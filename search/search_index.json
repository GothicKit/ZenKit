{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZenKit \u2013 Documentation","text":"<p>Quote</p> <p>The ZenKit project aims to re-implement file formats used by the ZenGin made by Piranha Bytes for their early-2000s games Gothic and Gothic II. It is heavily based on ZenLib which is used as an initial reference implementation of the file formats.</p> <p>Welcome to the joint ZenKit and ZenGin reference documentation. Here you will find information about how to use the ZenKit library to parse ZenGin files as well as in-depth descriptions of the file formats being used.</p> <p>The Library Reference contains information relevant for users of the ZenKit library while the ZenGin Reference contains detailed information about each file format and the ZenGin itself.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Library Reference<ul> <li>Overview</li> <li>Getting Started</li> <li>File Type Reference</li> <li>Miscellaneous<ul> <li>Migration Guide (v1.2 \u279e v1.3)</li> </ul> </li> <li>ZenKit Concepts<ul> <li>Archive</li> <li>Cutscene Library</li> <li>Daedalus Script</li> <li>Daedalus VM</li> <li>Font</li> <li>Mesh</li> <li>Model</li> <li>Model Animation</li> <li>Model Hierarchy</li> <li>Model Mesh</li> <li>Model Script</li> <li>Morph Mesh</li> <li>Multi-Resolution Mesh</li> <li>Save Game</li> <li>Texture</li> <li>Virtual File System</li> <li>World</li> </ul> </li> </ul> </li> <li>ZenGin Reference<ul> <li>Overview</li> <li>Datatypes</li> <li>Formats<ul> <li>ZenGin Animations</li> <li>ZenGin Scripts<ul> <li>Script Binaries</li> <li>Daedalus Bytecode</li> </ul> </li> <li>ZenGin Font</li> <li>ZenGin Texture</li> <li>ZenGin Virtual File System</li> <li>ZenGin Archive</li> <li>ZenGin Save Game</li> </ul> </li> <li>Objects<ul> <li>zCVob<ul> <li>zCVobLevelCompo</li> <li>zCVobLight</li> <li>zCVobSpot</li> <li>zCVobStair</li> <li>zCVobStartpoint</li> <li>zCCSCamera</li> <li>zCCamTrj_KeyFrame</li> <li>zCEffect<ul> <li>zCVobAnimate</li> <li>zCVobLensFlare</li> <li>zCVobScreenFX</li> <li>zCPFXControler</li> <li>zCEarthquake</li> <li>zCTouchDamage<ul> <li>oCTouchDamage</li> </ul> </li> </ul> </li> <li>oCVob<ul> <li>oCMOB<ul> <li>oCMobInter<ul> <li>oCMobBed</li> <li>oCMobFire</li> <li>oCMobLadder</li> <li>oCMobSwitch</li> <li>oCMobWheel</li> <li>oCMobLockable<ul> <li>oCMobContainer</li> <li>oCMobDoor</li> </ul> </li> </ul> </li> </ul> </li> <li>oCItem</li> </ul> </li> <li>zCTriggerBase<ul> <li>zCCodeMaster</li> <li>zCMessageFilter</li> <li>zCMoverControler</li> <li>zCTriggerUntouch</li> <li>zCTriggerWorldStart</li> <li>zCTrigger<ul> <li>zCTriggerList</li> <li>oCTriggerScript</li> <li>oCTriggerChangeLevel</li> <li>oCCSTrigger</li> <li>zCMover</li> </ul> </li> </ul> </li> <li>zCZone<ul> <li>oCZoneMusic<ul> <li>oCZoneMusicDefault</li> </ul> </li> <li>zCZoneVobFarPlane<ul> <li>zCZoneVobFarPlaneDefault</li> </ul> </li> <li>zCZoneZFog<ul> <li>zCZoneZFogDefault</li> </ul> </li> <li>zCVobSound<ul> <li>zCVobSoundDaytime</li> </ul> </li> </ul> </li> </ul> </li> <li>zCVisual<ul> <li>zCDecal</li> </ul> </li> <li>oCSavegameInfo</li> <li>oCInfo</li> <li>oCInfoManager</li> <li>oCLogManager</li> <li>oCLogTopic</li> <li>oCMission</li> <li>oCMissionManager</li> </ul> </li> <li>Encodings<ul> <li>Binary</li> <li>Binary, Chunked</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/datatypes/","title":"Datatype Reference","text":"<p>This page contains a set of commonly used datatypes and their definition.</p> Datatype Size Description <code>byte</code> 1 A single, unsigned 8-bit integer <code>char</code> 1 A single, 8-bit integer representing a string character <code>short</code> 2 A single, signed 16-bit integer <code>ushort</code> 2 A single, unsigned 16-bit integer <code>int</code> 4 A single, signed 32-bit integer <code>uint</code> 4 A single, unsigned 32-bit integer <code>float</code> 4 A single, IEEE 754 floating point number <code>string</code> * A set of Windows-1252 encoded characters of dynamic length,terminated by <code>\\0</code> or <code>0x0A</code> (exceptions are documented) <code>zVEC2</code> 8 A set of two <code>float</code>s describing a 2-dimensional vector of the form <code>(x, y)</code> <code>zVEC3</code> 12 A set of three <code>float</code>s describing a 3-dimensional vector of the form <code>(x, y, z)</code> <code>zVEC4</code> 16 A set of four <code>float</code>s describing a 4-dimensional vector or quaternion of the form <code>(x, y, z, w)</code> <code>zTBBox3D</code> 24 A set of two <code>zVEC3</code>s describing a 3-dimensional bounding box of the form <code>(min, max)</code> <code>zDATE</code> 16 A structure describing a date: <code>struct {int year; ushort month, day, hour, minute, second; byte _padding[2];}</code>"},{"location":"engine/overview/","title":"ZenGin Reference","text":"<p>Welcome to the open ZenGin reference documentation. This page contains information about file formats used by the ZenGin, an early 2000's game engine developed by Piranha Bytes for the games Gothic and Gothic II.</p>"},{"location":"engine/overview/#prerequisites","title":"Prerequisites","text":"<p>To properly understand this documentation, a good understanding of binary data and operations as well as the C programming language is highly useful. Experience with other data exchange formats such as JSON and XML might also be helpful.</p>"},{"location":"engine/encodings/binary-chunked/","title":"Chunked Binary Encoding","text":"<p>Quick Infos</p> <p>Type: Encoding Class Name: <code>zCFileBIN</code> Used By: <code>zCModelAni</code></p> <p>Many asset files are encoded in binary, splitting the data up into sections called chunks. Each chunk consists of a type identifier, its size and the actual data wrapped inside it. Files using the chunked binary encoding do not contain data outside of chunks.</p> File Structure<pre><code>struct zCFileBIN {\n    zCFileBIN_Chunk chunks[];\n}\n\nstruct zCFileBIN_Chunk {\n    ushort type;\n    uint size;\n    byte data[/* size */];\n};\n</code></pre> <p>It should be noted that, apart from the data being grouped into chunks, files encoded in chunked binary behave the same as flat binary files.</p>"},{"location":"engine/encodings/binary-chunked/#representation","title":"Representation","text":"<p>Wherever the chunked binary format is used in asset format references, the chunks are represented in a tabbed list. To keep it concise, the names of the tabs contain the chunk type and their content contains a C-style struct defining the data stored within.</p> <code>0x1000</code><code>0x1010</code> Section 0x1000<pre><code>struct MyClass_Section1 {\n    uint myValue1;\n\n    // ...\n};\n</code></pre> <p>This tab describes the section with type <code>0x1000</code>. As declared in the struct above, it only contains a 32-bit unsigned integer. The definition of all datatypes can be found in the Datatype Reference.</p> Section 0x1010<pre><code>struct MyClass_Section2 {\n    string myValue2;\n\n    // ...\n};\n</code></pre> <p>This tab describes the section with type <code>0x1010</code>. As you can see, it works the same as the first tab.</p> <p>You may have noticed, that the chunk's size is not mentioned anywhere in these tabs. While it should be taken as the actual size of the chunk, this reference aims to be as complete as possible, so the size of the struct provided for each section should be the same as the chunk size. If it is not, there is an error in this documentation.</p>"},{"location":"engine/encodings/binary/","title":"Binary Encoding","text":"<p>Quick Infos</p> <p>Type: Encoding Class Name: <code>zFILE</code> Used By: <code>zCFileBIN</code>, <code>zCFont</code>, <code>zCTexture</code>, <code>zFILE_VDFS</code></p> <p>Most asset files and other encodings are based flat binary files. As their name indicates, files encoded using flat binary just contain raw bytes. Their structure is fully defined by the asset format using the encoding.</p> <p>Binary files and other encodings based on them are little-endian.</p>"},{"location":"engine/encodings/binary/#representation","title":"Representation","text":"<p>Wherever binary data needs to be represented in a structured form, C-style structs are used. In this documentation, they are intended to be read without any sort of padding (see below). All primitive datatypes and how they should be read are documented in the Datatype Reference.</p> Example Binary Data<pre><code>struct Example {\n    ushort checksum;\n    byte type;\n};\n\nstatic_assert(sizeof(Example) == 3, \"A ushort is 2 bytes plus a byte is 3 bytes\");\n</code></pre> <p>Often, binary structures contain arrays of dynamic size. In order to allow for more fluent definitions, the C-style array declaration syntax is used. The variable containing the dynamic size of the array is put in a comment within the brackets.</p> Example Binary Data Containing Arrays<pre><code>struct Example {\n    uint staticArray[10]; //&lt; A set of 10 consecutive uints\n\n    ushort dynamicLength;\n    byte dynamicArray[/* dynamicLength */]; //&lt; A set of `dynamicLength` consecutive bytes\n};\n</code></pre>"},{"location":"engine/formats/animation/","title":"ZenGin Animations","text":"<p>Quick Infos</p> <p>Type: Asset Format Format Name: Model Animation File Extension: <code>.MAN</code> Class Name: <code>zCModelAni</code> Encoding: Binary, Chunked</p> <p>ZenGin animation files contain skeletal animations for rigged meshes. Each file contains the data for one animation, including metadata and animation samples.</p> <p>Animations are found within the <code>Anims.vdf</code> file found in the <code>Data/</code> directory in the Gothic installation.</p>"},{"location":"engine/formats/animation/#format-description","title":"Format Description","text":"<p>Model animations are stored in a chunked binary file which contains the following chunks. Also refer to the Datatype Reference for general information about often used datatypes.</p> <code>0xA000</code><code>0xA010</code><code>0xA020</code><code>0xA030</code><code>0xA090</code> Marker Chunk<pre><code>struct zCModelAni_Marker {\n};\n</code></pre> <p>The marker chunks marks the beginning of a model animation file.</p> Source Chunk<pre><code>struct zCModelAni_Source {\n    zDATE date; // Broken. See below.\n    string sourcePath;\n    string sourceScript;\n};\n</code></pre> <p>This source chunks was originally written to the file using a function called <code>zCFileBIN::WriteBinSrcFileStats</code>. It has a bug which causes it to use an uninitialized <code>zDATE</code> and write it to the output file. This is why the values in the date don't make any sense. Tread with care.</p> Header Chunk<pre><code>struct zCModelAni_Header {\n    ushort version;\n    string name;\n    uint layer;\n    uint numFrames;\n    uint numNodes;\n    float fps;\n    float fpsSource;\n\n    float samplePositionMin;\n    float samplePositionScale;\n\n    zTBBox3D bounds;\n    string next;\n};\n</code></pre> Events Chunk<pre><code>struct zCModelAni_Events {\n    uint numEvents;\n    zCModelAni_Events_Entry entries[/* numEvents */];\n};\n\nstruct zCModelAni_Events_Entry {\n    uint type;\n    uint number;\n    string tag;\n    string content[4];\n    float values[4];\n    float probability;\n};\n</code></pre> Samples Chunk<pre><code>struct zCModelAni_Samples {\n    uint checksum;\n    uint nodeIndices[/* zCModelAni_Header.numNodes */];\n\n    struct zTMdl_AniSample {\n        ushort rotation[3];\n        ushort position[3];\n    } samples[/* zCModelAni_Header.numNodes * zCModelAni_Header.numFrames */];\n};\n</code></pre> <p>The <code>zCModelAni.checksum</code> field is used to match compatible the animation to a specific model. It is the same for assets belonging to the same model. Linked assets are <code>zCModelAni.checksum</code>, <code>zCModelMeshLib.checksum</code> and <code>zCModelHierarchy.checksum</code>.</p> <p>It is important to understand that the animation samples do not contain the actual values for the rotation and position. To save on memory and disk space consumption, the values are packed into shorts which are converted back to floats on demand. See Sample Positions and Sample Rotations for more information.</p>"},{"location":"engine/formats/animation/#sample-positions","title":"Sample Positions","text":"<p>The positions are represented as multiples of <code>zCModelAni_Header.samplePositionScale</code>. The formula for packing a given <code>zVEC3</code> position into the stored format can be summarized like this:</p> \\[     \\begin{bmatrix}         x_{p} \\\\         y_{p} \\\\         z_{p}     \\end{bmatrix}     =     \\Bigg(-v_{min} +     \\begin{bmatrix}         x \\\\         y \\\\         z     \\end{bmatrix}     \\Bigg) \\cdot \\frac{65535}{v_{max} - v_{min}} \\] <p>where \\(v_{min}\\) is the smallest value across all components of all sample positions of the animation and \\(v_{max}\\) is the maximum value. The output vector \\(\\begin{smallmatrix}x_{p} \\\\ y_{p} \\\\ z_{p} \\end{smallmatrix}\\) then contains a scaled representation of the input vector \\(\\begin{smallmatrix}x \\\\ y \\\\ z\\end{smallmatrix}\\) as three 16-bit unsigned integers. This operation is performed by <code>zCModelAni::AddTrafoMatrix</code> and <code>zTMdl_AniSample::PackTrans</code>.</p> <p>Alongside these packed positions, both \\(v_{min}\\) and the constant \\(s = (\\frac{65535}{v_{max} - v_{min}})^{-1}\\) are saved as <code>zCModelAni_Header.samplePositionMin</code> and <code>zCModelAni_Header.samplePositionScale</code> respectively. Thus, to convert the stored position back to its floating point representation, the following calculation may be applied:</p> \\[     \\begin{bmatrix}         x \\\\         y \\\\         z     \\end{bmatrix}     =      \\begin{bmatrix}         x_{p} \\\\         y_{p} \\\\         z_{p}     \\end{bmatrix}     \\cdot s + v_{min} \\] <p>where \\(x_{p}\\) , \\(y_{p}\\) and \\(z_{p}\\) are <code>zTMdl_AniSample.position[0]</code>, <code>zTMdl_AniSample.position[1]</code> and <code>zTMdl_AniSample.position[2]</code> respectively. This operation is performed by <code>zTMdl_AniSample::UnpackTrans</code> .</p>"},{"location":"engine/formats/animation/#sample-rotations","title":"Sample Rotations","text":"<p>The rotations are represented as a packed quaternion which is calculated in the following way:</p> \\[     \\begin{bmatrix}         x_{p} \\\\         y_{p} \\\\         z_{p}     \\end{bmatrix}     =     \\begin{cases}         \\begin{bmatrix}             x \\\\             y \\\\             z         \\end{bmatrix}         \\div s + h  &amp; \\quad \\text{if } w \\geq 0 \\\\         -\\Bigg(         \\begin{bmatrix}             x \\\\             y \\\\             z         \\end{bmatrix}         \\div s + h\\Bigg) - 2  &amp; \\quad \\text{if } w &lt; 0 \\\\     \\end{cases} \\] <p>where</p> \\[     s = \\frac{1}{2^{16} - 1} * 2.1 = \\frac{1}{65535} * 2.1 \\] <p>and</p> \\[     h = 2^{15} - 1 = 32767 \\] <p>This operation packs a quaternion of the form \\(r = \\begin{smallmatrix}x \\\\ y \\\\ z \\\\ w\\end{smallmatrix}\\) into a set of three 16-bit unsigned integers \\(x_{p}\\) , \\(y_{p}\\) and \\(z_{p}\\) which are stored into the sample. The input quaternion \\(r\\) is required to be a unit vector. This operation was performed by <code>zCModelAni::AddTrafoMatrix</code> and <code>zTMdl_AniSample::PackQuat</code>.</p> <p>They can be unpacked using some quaternion wizardry as described below.</p> \\[     \\begin{bmatrix}         x \\\\         y \\\\         z \\\\         w      \\end{bmatrix}     =     \\begin{cases}         \\begin{bmatrix}             x_{t} \\\\             y_{t} \\\\             z_{t} \\\\             \\sqrt{1 - l}         \\end{bmatrix} &amp; \\quad \\text{if } l \\leq 1 \\\\         \\begin{bmatrix}             x_{t} \\\\             y_{t} \\\\             z_{t} \\\\             0         \\end{bmatrix}         \\cdot \\frac{1}{\\sqrt{l}} &amp; \\quad \\text{if } l &gt; 1     \\end{cases}  \\] <p>where</p> \\[     \\begin{bmatrix}         x_{t} \\\\         y_{t} \\\\         z_{t} \\\\     \\end{bmatrix}     =     \\Bigg(\\begin{bmatrix}         x_{p} \\\\         y_{p} \\\\         z_{p} \\\\     \\end{bmatrix} - h\\Bigg) \\cdot s \\] <p>and</p> \\[     l = (x_{t})^2 + (y_{t})^2 + (z_{t})^2 \\] <p>The values \\(x_{p}\\) , \\(y_{p}\\) and \\(z_{p}\\) for this computation are stored in <code>zTMdl_AniSample.rotation[0]</code>, <code>zTMdl_AniSample.rotation[1]</code> and <code>zTMdl_AniSample.rotation[2]</code> respectively. This is possible since the quaternion \\(r\\) used to calculate the packed rotation is guaranteed to be a unit-quaternion, thus, if we have three components (like we do), it is possible to calculate the third component. This operation is performed by <code>zTMdl_AniSample::UnpackQuat</code>.</p>"},{"location":"engine/formats/animation/#todo-how-animated-models-are-loaded","title":"(todo) How animated models are loaded","text":"<p>Animated models are loaded by using their associated model script file. While parsing the model script, the parser will encounter a <code>meshAndTree</code> directive (in MSB files a chunk of type <code>0xf300</code>) which points to a model hierarchy.</p> <p>This model hierarchy is then loaded and acts as the ground truth of the model. If a hierarchy can't be loaded for any reason, the engine tries to load a model mesh instead.</p> <p>The model script parser continues and eventually hits the <code>aniEnum</code> section. While loading it, it will come across <code>ani</code> sections. Those sections contain a model and animation name which are then loaded as animations and model meshes respectively.</p> <p>Linking these parts together is a checksum calculates from the list of hierarchy nodes. It is just the CRC32 checksum of all node names appended after each other in the order they are saved in. I.e. a model hierarchy with two nodes <code>\"BIP01\"</code> and <code>\"BIP01 LEVER STICK\"</code> (in that order) will have a checksum of <code>ea809bf7</code> (which is <code>crc32(\"BIP01BIP01 LEVER STICK\")</code>.</p>"},{"location":"engine/formats/archive/","title":"ZenGin Archives","text":"<p>ZenGin archives (ZEN files) contain generic data for use with the ZenGin. Most archives store key-value pairs organized into objects, similar to JSON. Archives have three different encodings: binary archives store unannotated bytes, safe binary archives store binary data annotated with field types and names and ascii archives contain a human-readable form of the same data stored in safe binary archives.</p>"},{"location":"engine/formats/archive/#general-concepts","title":"General Concepts","text":"<p>A basic archive file might look like this.</p> Example ZEN archive (ASCII)<pre><code>ZenGin Archive\nver 1\nzCArchiverGeneric\nASCII\nsaveGame 0\ndate 17.9.2002 15:21:1\nuser mario.roeske\nEND\nobjects 7        \nEND\n[% oCWorld:zCWorld 64513 0]\n    [VobTree % 0 0]\n        childs0=int:1\n        [% zCVob 39168 1]\n            pack=int:0\n            presetName=string:LIGHT\n            bbox3DWS=rawFloat:334.003906 -443.912476 -7493.55371 2734.00391 1956.08765 -5093.55371 \n            trafoOSToWSRot=raw:974226bf00000000a9a9423f000000000000803f00000000a9a942bf00000000974226bf\n            trafoOSToWSPos=vec3:1534.00403 756.087585 -6293.55371\n            vobName=string:LIGHT\n            visual=string:\n            showVisual=bool:0\n            visualCamAlign=enum:0\n            visualAniMode=enum:0\n            visualAniModeStrength=float:0\n            vobFarClipZScale=float:1\n            cdStatic=bool:0\n            cdDyn=bool:0\n            staticVob=bool:1\n            dynShadow=enum:0\n            zbias=int:1\n            isAmbient=bool:0\n            [visual % 0 0]\n            []\n            [ai % 0 0]\n            []\n        []\n    []\n[]\n</code></pre> <p>At the beginning of the file, the header is defined. It consists of two parts, the first one being the same across all encoding and the second being specific to the encoding used. The data content of the file starts right after the second <code>END</code>. The first line of the file's content, <code>[% oCWorld:zCWorld 64513 0]</code>, marks the start of a new object while the last line, <code>[]</code> marks the end of an object.</p> <p>Each object can contain multiple entries alongside other objects. Each entry has a name, a type and a value. This only applies to ascii and safe binary encodings.</p>"},{"location":"engine/formats/archive/#header","title":"Header","text":"<p>The header of ZEN archives consists of two parts. The first has the same structure for every archive and the second differs between encodings. The first part of the header looks like this. Variable elements of the header have been replaced by <code>&lt;...&gt;</code> placeholders.</p> Example ZEN archive header<pre><code>ZenGin Archive\nver 1\n&lt;archiver&gt;\n&lt;encoding&gt;\nsaveGame &lt;issave&gt;\ndate &lt;timestamp&gt;\nuser &lt;username&gt;\nEND\n</code></pre> <p>Line breaks denote only one newline (<code>\\n</code>) character. The <code>&lt;archiver&gt;</code> is a string value, being either <code>zCArchiverGeneric</code> or <code>zCArchiverBinSafe</code>, in reference to the names of the ZEN archive parser classes in the original source code. <code>&lt;encoding&gt;</code> specifies the type of archive in the file. It is either <code>ASCII</code> (for ascii encoded archives), <code>BINARY</code> (for binary encoded archives) or <code>BIN_SAFE</code> (for safe binary encoded archives). If the archive is a save game file <code>&lt;issave&gt;</code> is set to <code>1</code>, otherwise it is <code>0</code>. <code>&lt;timestamp&gt;</code> denotes the date and time the archive was created. It follows the strptime format <code>%d.%m.%Y %H:%M:%S</code>. <code>&lt;username&gt;</code> is the name of the user (originally the windows account name) the archive was created by. For save games this contains the name of the user who saved the game. Refer to the example above for a filled-out version of the header.</p> <p>The encoding-specific headers follow directly after the <code>END\\n</code> line of the first header as can be seen in the example.</p>"},{"location":"engine/formats/archive/#objects","title":"Objects","text":"<p>Objects in ZEN archives consist of an object name, a class name, a version identifier and an index. The object name is used to describe a unique sub-object of another while the class name is used to identify the type of the object. A ZEN archive object <code>[visual zCParticleFX 0 6]</code> describes a specific sub-object <code>visual</code> of type <code>zCParticleFX</code> meaning it has a set of entries consistent with the definition of a <code>zCParticleFX</code>. Objects without an object name just contain a <code>%</code> instead. Objects always end with <code>[]</code>.</p> <p>Note</p> <p>This behavior can be seen in the example above. Every object with the class name <code>zCVob</code> has the same set of entries as shown in the example.</p> <p>Danger</p> <p>The object name must be unique within each sub-object. A ZEN archive like this is invalid.</p> Text Only<pre><code>[% oCWorld:zCWorld 64513 0]\n    [VobTree % 0 0]\n    []\n    [VobTree % 0 0]\n    []\n[]\n</code></pre> <p>Class names originally referenced a specific class in C++-code. These classes were polymorphic so an object with a class name <code>zCVobLight:zCVob</code> contains both entries of type <code>zCVob</code> and <code>zCVobLight</code>. The entries of the super-class always precede the entries of the subclass, so the <code>zCVobLight:zCVob</code> would first contain all entries of <code>zCVob</code> and then all entries of <code>zCVobLight</code>. Objects without a class name just contain a <code>%</code> instead.</p> <p>Warning</p> <p>Class and object names may not contain spaces.</p> <p>The version of an object is a 32-bit unsigned number which denotes the version of the bottom-most subclass. The version of object <code>[% oCMobInter:oCMOB:zCVob 35585 0]</code> would be <code>35585</code>. This version, however, only refers to the <code>oCMobInter</code>-part.</p> <p>Danger</p> <p>This leads to issues when trying to determine whether an object uses the Gothic or the Gothic II definition. If the structure for <code>oCMobInter</code> did not change between the games, the version will be the same. This is not necessarily true for <code>zVob</code> though. Its definition might have changed but this change is not reflected in the <code>version</code> field of the object.</p> <p>The index field of the object is a 32-bit unsigned number which increments for every object with a class name in the archive. In the example this can be seen with the objects <code>[% oCWorld:zCWorld 64513 0]</code> and <code>[% zCVob 39168 1]</code>. Objects without a class name have an index of <code>0</code>.</p>"},{"location":"engine/formats/archive/#entries","title":"Entries","text":"<p>The concept of entries only really applies to archives with ascii or safe binary encoding. An entry originally represented a field in a C++-class which defined an object. For this reason, each entry has a name, a type and a value. The following entry types are supported:</p> Type Name Type ID<sup>1</sup> Description <code>string</code> 1 ISO-8859-1 encoded text <code>int</code> 2 A 32-bit signed integer <code>float</code> 3 An IEEE 754 floating-point number <code>byte</code> 4 An 8-bit unsigned integer <code>word</code> 5 An 16-bit unsigned integer <code>bool</code> 6 An boolean value<sup>2</sup> <code>vec3</code> 7 A set of 3 IEEE 754 floating-point numbers <code>color</code> 8 A set of 4 8-bit unsigned integers <code>raw</code> 9 A set of an arbitrary amount of 8-bit unsigned integers <code>rawFloat</code> 16 A set of an arbitrary amount of IEEE 754 floating-point numbers <code>enum</code> 17 A 32-bit unsigned integer<sup>3</sup> <code>hash</code> 18 A 32-bit unsigned integer; specific to the safe binary encoding"},{"location":"engine/formats/archive/#ascii","title":"ASCII","text":"<p>ASCII-archives are human-readable ZEN archives, comparable to JSON. Contrary to its name, the file is not actually using the ASCII text encoding. Rather these files are encoded in ISO-8859-1 or alternatively Windows-1252 (because the characters used are encoded identically).</p> <p>ASCII ZEN-archives use a line-based format. Every line after the header contains exactly one object start statement, entry statement or object end token. Leading whitespace is ignored.</p>"},{"location":"engine/formats/archive/#header_1","title":"Header","text":"<p>The encoding specific header for the ASCII-encoding looks like this. Variable elements of the header have been replaced by <code>&lt;...&gt;</code> placeholders.</p> Text Only<pre><code>objects &lt;count&gt;\nEND\n</code></pre> <p><code>&lt;count&gt;</code> denotes the total number of objects in the archive. Refer to the example above for a filled-out version of the header.</p>"},{"location":"engine/formats/archive/#objects_1","title":"Objects","text":"<p>As stated above, objects in ASCII-ZENs start with a line <code>[% oCWorld:zCWorld 64513 0]</code> defined as <code>[&lt;object name&gt; &lt;class name&gt; &lt;version&gt; &lt;index&gt;]</code>. This is explained further in the section about objects.</p>"},{"location":"engine/formats/archive/#entries_1","title":"Entries","text":"<p>Entries in ASCII-ZENs follow the format <code>&lt;name&gt;:&lt;type&gt;=&lt;value&gt;</code> where <code>&lt;name&gt;</code> is a C++ identifier, <code>&lt;type&gt;</code> is one of the type names mentioned in the entries section with the exclusion of the <code>hash</code> type. <code>&lt;value&gt;</code> depends on the given type. It has the following formats:</p> Type Name Format Regex Example <code>string</code> An unlimited number of characters excluding newline characters <code>^[^\\n\\r]*</code> <code>field=string:This is a string</code> <code>int</code> A decimal 32-bit integer <code>^[+-]?\\d+$</code> <code>field=int:199</code> <code>float</code> A decimal floating point value with decimal separator <code>.</code> <code>^[+-]?(\\d+\\.)?\\d+$</code> <code>field=float:-1.0</code> <code>byte</code> A decimal 8-bit unsigned integer <code>^\\d{1,3}$</code> <code>field=byte:255</code> <code>word</code> A decimal 16-bit unsigned integer <code>^\\d+$</code> <code>field=word:1001</code> <code>bool</code> A decimal 1-bit integer <code>^[01]$</code> <code>field=bool:1</code> <code>vec3</code> A set of three floating point values <code>^[+-]?(\\d+\\.)?\\d+ [+-]?(\\d+\\.)?\\d+ [+-]?(\\d+\\.)?\\d+$</code> <code>field=vec3:1.0 -0.1 +100</code> <code>color</code> A set of four 8-bit unsigned integers <code>^\\d{1,3} \\d{1,3} \\d{1,3} \\d{1,3}$</code> <code>field=color:100 0 255 12</code> <code>raw</code> An unlimited number of hexadecimal bytes <code>^([0-9A-Fa-f]{2})*</code> <code>field=raw:0fac3256b1</code> <code>rawFloat</code> An unlimited number of floating point values <code>^([+-]?(\\d+\\.)?\\d+ )*</code> <code>field=rawFloat:1.0 -100</code> <code>enum</code> A decimal 32-bit unsigned integer <code>^\\d+$</code> <code>field=enum:10</code>"},{"location":"engine/formats/archive/#binary","title":"Binary","text":"<p>Binary archives are little more than containers for raw bytes. They don't actually contain key-value pairs.</p>"},{"location":"engine/formats/archive/#header_2","title":"Header","text":"<p>The encoding specific header for the Binary-encoding is the same as that of the ascii encoding. Variable elements of the header have been replaced by <code>&lt;...&gt;</code> placeholders.</p> Text Only<pre><code>objects &lt;count&gt;\nEND\n</code></pre> <p><code>&lt;count&gt;</code> denotes the total number of objects in the archive.</p>"},{"location":"engine/formats/archive/#objects_2","title":"Objects","text":"<p>Objects in binary ZENs don't work like they do in the ascii and safe binary encodings. No object end marker is stored and the beginning of an object does not follow the same format.</p> Binary archive object begin structure<pre><code>#pragma pack(push, 1)\nstruct zen_object_begin {\n    uint32_t object_size; //the size of the object in bytes, including the header.\n    uint16_t version; // the *version* number of the object\n    uint32_t index; // the *index* of the object\n    char* object_name; // The *name* of the object including a null-termination character\n    char* class_name; // The *class* of the object including a null-termination character\n};\n#pragma pack(pop)\n</code></pre>"},{"location":"engine/formats/archive/#entries_2","title":"Entries","text":"<p>Binary ZENs just contains packed bytes with no added type annotations. This makes it very difficult to determine the layout of structures within it without having access to the original source code.</p> <p>To read an integer from a binary ZEN for example, the next four bytes are read in literally like this (assuming a little-endian architecture).</p> Binary archive entry read scalar example<pre><code>int32_t zen_binary_read_int(FILE* fp) {\n    int32_t value = 0;\n    fread(&amp;value, sizeof(value), 1, fp);\n    return value;\n}\n</code></pre> <p>Note</p> <p>On big-endian architectures, the value read would have to be byte-swapped after reading.</p> <p>This method of extracting values from binary archives is also used for aggregate types, like the <code>vec3</code>. Instead of reading just one float from the input, three are read like this.</p> Binary ZEN entry read vector example<pre><code>typedef struct vec3 {\n    float x;\n    float y;\n    float z;\n} vec3_t;\n\nvec3_t zen_binary_read_int(FILE* fp) {\n    vec3_t value;\n    fread(&amp;value.x, sizeof(float), 1, fp);\n    fread(&amp;value.y, sizeof(float), 1, fp);\n    fread(&amp;value.z, sizeof(float), 1, fp);\n    return value;\n}\n</code></pre> <p>Refer to the following table for type sizes.</p> Type Name C-equivalent Byte Count <code>string</code> <code>char[]</code> <code>1 * n</code> <code>int</code> <code>int32_t</code> 4 <code>float</code> <code>float</code> 4 <code>byte</code> <code>uint8_t</code> 1 <code>word</code> <code>uint16_t</code> 2 <code>bool</code> <code>uint8_t</code> 1 <code>vec3</code> <code>struct { float, float, float }</code> <code>4 * 3</code> <code>color</code> <code>struct { uint8_t, uint8_t, uint8_t, uint8_t }</code> <code>1 * 4</code> <code>raw</code> <code>uint8_t[]</code> <code>1 * n</code> <code>rawFloat</code> <code>float[]</code> <code>4 * n</code> <code>enum</code> <code>uint32_t</code> 4"},{"location":"engine/formats/archive/#safe-binary","title":"Safe Binary","text":"<p>Safe binary archives store binary values annotated with field types and names. They are the most prevalent types of archives and also the ones in which world data is stored. The values of entries as well as their prefixes are stored in a packed binary format. This encoding is not fully reverse-engineered.</p>"},{"location":"engine/formats/archive/#header_3","title":"Header","text":"<p>The header of safe binary archives is also binary and has the following structure.</p> Safe binary archive header structure<pre><code>#pragma pack(push, 1)\nstruct zen_binsafe_header {\n    uint32_t bs_version; // A separate version identifier for the version of the safe binary encoding used.\n    uint32_t object_count; // The total number of objects in the archive\n    uint32_t hash_table_offset; // The offset of the hash table from the beginning of the file in bytes; discussed below.\n};\n#pragma pack(pop)\n</code></pre> <p>In addition to the secondary header, safe binary archives also contain a so-called hash table<sup>4</sup> which stores field name information. The hash table is a binary structure as well; it looks like this.</p> Safe binary ZEN hash table structure<pre><code>#pragma pack(push, 1)\nstruct zen_binsafe_hashtable_entry {\n    uint16_t name_length; // The length of the name string at the end of the structure\n    uint16_t insertion_index; // The index of this entry in the hashtable `entries` member array\n    uint32_t bucket_index; // The bucket index of this entry. See below.\n    char name[]; // The name of the entry. This name is the field name of the entry as explained below\n};\n\nstruct zen_binsafe_hashtable {\n    uint32_t size; // The number of entries in the hash table. Corresponds with the length of the `entries` member array.\n    zen_binsafe_hashtable_entry entries[]; // An array of all hash table entries; unordered.\n};\n#pragma pack(pop)\n</code></pre> <p>The bucket_index is calculated using the following algorithm:</p> C<pre><code>/* The capacity of the hash table was always the same: 0x61 buckets. */\n#define HARDCODED_HASHTABLE_CAPACITY 0x61\n\nint zen_calculate_bucket_index(char const* key) {\n    int hash = 0;\n\n    while (*key != '\\0') {\n       hash = hash * 0x21 + (int) *key;\n       key += 1;\n    }\n\n    return hash % HARDCODED_HASHTABLE_CAPACITY;\n}\n</code></pre>"},{"location":"engine/formats/archive/#objects_3","title":"Objects","text":"<p>In safe binary ZENs, objects are handled in almost the same way entries are. Objects definitions are preceded by the string type identifier <code>\\x01</code> and a 16-bit string length value. The value of this string is the same as the object definition for ASCII-ZENs: Objects start with a line <code>[% oCWorld:zCWorld 64513 0]</code> defined as <code>[&lt;object name&gt; &lt;class name&gt; &lt;version&gt; &lt;index&gt;]</code>. This is explained further in the section about objects.</p> <p>A full object definition might look like this: <code>\\x01\\x1B\\x00[% oCWorld:zCWorld 64513 0]</code>.</p> <p>Note</p> <p>Note that objects are never preceded by a field name like entries are.</p>"},{"location":"engine/formats/archive/#entries_3","title":"Entries","text":"<p>Every entry in safe binary ZENs is preceded by a field name index and a type identifier including a length if applicable. File name indexes start with a <code>\\x12</code> which is followed by a 32-bit unsigned integer, indicating an index into the hash table discussed above. The name of the hash table entry at that index is the name of the field.</p> <p>A boolean entry in this format might look like <code>\\x12\\x01\\x00\\00\\x00\\x06\\x01\\x00\\x00\\x00</code>. It hashtable index is <code>1</code> and its value is <code>true</code>. Type IDs are always <code>uint8_t</code>s and hashtable indices are always <code>uint32_t</code>s.</p> <p>Reference the table below for all types in safe binary archives.</p> Type Name Type ID Has Length? C-equivalent Byte Count <code>string</code> 1 Yes <code>char[]</code> <code>1 * n</code> <code>int</code> 2 No <code>int32_t</code> 4 <code>float</code> 3 No <code>float</code> 4 <code>byte</code> 4 No <code>uint8_t</code> 1 <code>word</code> 5 No <code>uint16_t</code> 2 <code>bool</code> 6 No <code>uint32_t</code> 4 <code>vec3</code> 7 No <code>struct { float, float, float }</code> <code>4 * 3</code> <code>color</code> 8 No <code>struct { uint8_t, uint8_t, uint8_t, uint8_t }</code> <code>1 * 4</code> <code>raw</code> 9 Yes <code>uint8_t[]</code> <code>1 * n</code> <code>rawFloat</code> 16 Yes <code>float[]</code> <code>4 * n</code> <code>enum</code> 17 No <code>uint32_t</code> 4 <p>Note</p> <p>Entries with a length prefix, are encoded like this: <code>\\x12\\x01\\x00\\00\\x00\\x01\\x0D\\x00Hello, world!</code>. It hashtable index is <code>1</code>, its length is <code>0x0D</code> and its value is <code>Hello, World!</code>. Note that the length is always a <code>uint16_t</code> and always follows directly after the type ID.</p> <ol> <li> <p>The type index is relevant only for safe binary encoded archives.\u00a0\u21a9</p> </li> <li> <p>The actual representation of this value changes between encodings. With the safe binary encoding a boolean value is represented as a 32-bit unsigned integer while it is represented as an 8-bit integer in the binary encoding.\u00a0\u21a9</p> </li> <li> <p>Enums represent an actual enumeration value in C++-code.\u00a0\u21a9</p> </li> <li> <p>The origin of that name is unknown. It has been used in ZenLib to describe this element of the format.\u00a0\u21a9</p> </li> </ol>"},{"location":"engine/formats/bytecode/","title":"ZenGin Bytecode","text":"<p>Bytecode is read from <code>DatFile.bytecode</code> field</p> Bytecode Buffer<pre><code>struct Bytecode {\n    Instruction instructions[/* Read until there is no bytes left in the buffer */]\n};\n</code></pre>"},{"location":"engine/formats/bytecode/#instruction","title":"Instruction","text":"<pre><code>struct Instruction {\n    Opcode opcode,\n    InstructionData data,\n};\n</code></pre>"},{"location":"engine/formats/bytecode/#opcode","title":"Opcode","text":"enum Opcode: uint { ... } <p>Unused variants are commented out <pre><code>enum Opcode: uint {\n    zPAR_OP_PLUS         = 0,\n    zPAR_OP_MINUS        = 1,\n    zPAR_OP_MUL          = 2,\n    zPAR_OP_DIV          = 3,\n    zPAR_OP_MOD          = 4,\n    zPAR_OP_OR           = 5,\n    zPAR_OP_AND          = 6,\n    zPAR_OP_LOWER        = 7,\n    zPAR_OP_HIGHER       = 8,\n    zPAR_OP_IS           = 9,\n    zPAR_OP_LOG_OR       = 11,\n    zPAR_OP_LOG_AND      = 12,\n    zPAR_OP_SHIFTL       = 13,\n    zPAR_OP_SHIFTR       = 14,\n    zPAR_OP_LOWER_EQ     = 15,\n    zPAR_OP_EQUAL        = 16,\n    zPAR_OP_NOTEQUAL     = 17,\n    zPAR_OP_HIGHER_EQ    = 18,\n    zPAR_OP_ISPLUS       = 19,\n    zPAR_OP_ISMINUS      = 20,\n    zPAR_OP_ISMUL        = 21,\n    zPAR_OP_ISDIV        = 22,\n    // zPAR_OP_UNARY        = 30,\n    zPAR_OP_UN_PLUS      = 30,\n    zPAR_OP_UN_MINUS     = 31,\n    zPAR_OP_UN_NOT       = 32,\n    zPAR_OP_UN_NEG       = 33,\n    // zPAR_OP_MAX          = 33,\n    // zPAR_TOK_BRACKETON   = 40,\n    // zPAR_TOK_BRACKETOFF  = 41,\n    // zPAR_TOK_SEMIKOLON   = 42,\n    // zPAR_TOK_KOMMA       = 43,\n    // zPAR_TOK_SCHWEIF     = 44,\n    zPAR_TOK_NONE        = 45,\n    // zPAR_TOK_FLOAT       = 51,\n    // zPAR_TOK_VAR         = 52,\n    // zPAR_TOK_OPERATOR    = 53,\n    zPAR_TOK_RET         = 60,\n    zPAR_TOK_CALL        = 61,\n    zPAR_TOK_CALLEXTERN  = 62,\n    // zPAR_TOK_POPINT      = 63,\n    zPAR_TOK_PUSHINT     = 64,\n    zPAR_TOK_PUSHVAR     = 65,\n    // zPAR_TOK_PUSHSTR     = 66,\n    zPAR_TOK_PUSHINST    = 67,\n    // zPAR_TOK_PUSHINDEX   = 68,\n    // zPAR_TOK_POPVAR      = 69,\n    zPAR_TOK_ASSIGNSTR   = 70,\n    zPAR_TOK_ASSIGNSTRP  = 71,\n    zPAR_TOK_ASSIGNFUNC  = 72,\n    zPAR_TOK_ASSIGNFLOAT = 73,\n    zPAR_TOK_ASSIGNINST  = 74,\n    zPAR_TOK_JUMP        = 75,\n    zPAR_TOK_JUMPF       = 76,\n    zPAR_TOK_SETINSTANCE = 80,\n    // zPAR_TOK_SKIP        = 90,\n    // zPAR_TOK_LABEL       = 91,\n    // zPAR_TOK_FUNC        = 92,\n    // zPAR_TOK_FUNCEND     = 93,\n    // zPAR_TOK_CLASS       = 94,\n    // zPAR_TOK_CLASSEND    = 95,\n    // zPAR_TOK_INSTANCE    = 96,\n    // zPAR_TOK_INSTANCEEND = 97,\n    // zPAR_TOK_NEWSTRING   = 98,\n    zPAR_TOK_FLAGARRAY   = zPAR_TOK_VAR + 128\n};\n</code></pre></p>"},{"location":"engine/formats/bytecode/#instruction-data","title":"Instruction Data","text":"<p>Depending on <code>opcode</code> the data may be different or in most cases 0 sized.</p> CALL, JUMPF, JUMPPUSHINTCALLEXTERN, PUSHVAR, PUSHINST, SETINSTANCEPUSHVAR + FLAGARRAYany other <pre><code>struct InstructionData {\n    uint address;\n};\n</code></pre> <pre><code>struct InstructionData {\n    int immediate;\n};\n</code></pre> <pre><code>struct InstructionData {\n    uint symbol;\n};\n</code></pre> <pre><code>struct InstructionData {\n    uint symbol;\n    byte index;\n};\n</code></pre> <pre><code>struct InstructionData {};\n</code></pre>"},{"location":"engine/formats/font/","title":"ZenGin Fonts","text":"<p>Quick Infos</p> <p>Type: Asset Format Format Name: Font File Extension: <code>.FNT</code> Class Name: <code>zCFont</code> Encoding: Binary</p> <p>ZenGin font files contain metadata for bitmap fonts used in the engine. In particular, they contain the position and size of font glyphs in a texture file.</p> <p>Fonts are found within the <code>Textures.vdf</code> file found in the <code>Data/</code> directory in the Gothic installation.</p>"},{"location":"engine/formats/font/#format-description","title":"Format Description","text":"<p>Fonts are stored in a binary file which contains the following data. Also refer to the Datatype Reference for general information about often used datatypes.</p> Font Structure<pre><code>struct zCFont {\n    string version; // Always \"1\".\n    string imageName;\n    uint glyphHeight;\n    uint glyphCount; \n\n    byte glyphWidths[/* glyphCount */];\n    zVEC2 glyphTopLeftUVs[/* glyphCount */];\n    zVEC2 glyphBottomRightUVs[/* glyphCount */];\n};\n</code></pre> <p>Since ZenGin fonts are a kind of bitmap font, a font texture is required in addition to this font metadata file. The name of that texture is found in <code>imageName</code>.</p> <p>To get the actual pixel coordinates for each glyph in the texture for any given UV-coordinate, multiply the <code>x</code> coordinate by the width of the texture and the <code>y</code> coordinate by the height of the texture.</p> <p>Warning</p> <p>Some coordinates are negative. These should be ignored since they don't have a glyph image associated with them.</p>"},{"location":"engine/formats/savegame/","title":"ZenGin Save Games","text":"<p>Quick Infos</p> <p>Type: Asset Format Format Name: SaveGame File Extension: Folder Class Name: \u2014 Encoding: Various</p> <p>ZenGin save-games are essentially just folders containing a set of files holding various data relevant to the world and script state.</p> <ul> <li><code>LOG.SAV</code> \u2014 Contains the hero's attributes (such as XP and health) over time</li> <li><code>SAVEHDR.SAV</code> \u2014 Contains the path of the world file the hero was in when creating the save</li> <li><code>SAVEINFO.SAV</code> \u2014 Contains general metadata about the save-game such as its name and when it was created</li> <li><code>SAVEDAT.SAV</code> \u2014 Contains the script and player state among other miscellaneous values</li> <li><code>THUMB.SAV</code> \u2014 A texture file containing a thumbnail for the save.</li> </ul> <p>The rest of the files in the save will be the world state of each level the player has been in. For example in Gothic 1, every save-game will have a <code>WORLD.SAV</code> containing the VOb-tree and Waynet of the main game world in the state it was in when creating the save.</p>"},{"location":"engine/formats/savegame/#logsav","title":"<code>LOG.SAV</code>","text":"<p>The log file contains the hero's attributes over time. It takes the form of a tab-separated values file (TSV) where each row represents the hero's attribute state at the point of time the save was created. The first line acts as a column header descriptor. Here's an example file taken from a Gothic II save (though the columns are the same for both games):</p> LOG.SAV<pre><code>minutes day hour    minute  level   experience  learnpoints guild   strength    dexterity   max.hitpoints   max.mana    1handed 2handed bow crossbow    circle  picklock    pickpocket  sneak   acrobatic   \n0   0   8   0   0   0   0   Gildenlos   10  10  40  10  0   0   0   0   0   0   0   0   0   \n6   0   8   6   0   0   0   Gildenlos   10  10  40  10  0   0   0   0   0   0   0   0   0   \n60  0   9   0   0   200 0   Gildenlos   10  10  40  10  0   0   0   0   0   0   0   0   0   \n</code></pre>"},{"location":"engine/formats/savegame/#savehdrsav","title":"<code>SAVEHDR.SAV</code>","text":"<p>This file contains only one line with the path of the world file to be loaded initially when playing the save. It refers to the world file as it is found in the <code>worlds.vdf</code> file. In Gothic I, for example, the file might contain </p> SAVEHDR.SAV<pre><code>WORLD.ZEN\n</code></pre> <p>if the save was made while the hero was in the main game world. If the hero was in another world at the time, this file would contain the path of that world instead.</p>"},{"location":"engine/formats/savegame/#saveinfosav","title":"<code>SAVEINFO.SAV</code>","text":"<p>Contains basic metadata information about the save-game. It is presented in ZenGin Archive format and was originally only used to generate the save-game list preview when browsing saved games. It contains a single <code>oCSavegameInfo</code> object.</p>"},{"location":"engine/formats/savegame/#savedatsav","title":"<code>SAVEDAT.SAV</code>","text":"<p>Contains most of the script and world state information of the save-game. It uses the ZenGin Archive format and structured as follows:</p> <ul> <li>day = 0</li> <li>hour = 0</li> <li>min = 0</li> <li>(inline)<sup>1</sup> oCInfoManager</li> <li>(inline)<sup>1</sup> oCMissionManager</li> <li>(inline)<sup>1</sup> oCLogManager</li> <li>(inline)<sup>1</sup> oCCSManager</li> <li>numSymbols = 0</li> <li>(Symbol) ...</li> <li>symName0 = \"\"</li> <li>symValue0 = 0</li> <li>symName0cnt = 0</li> <li>symValue0_0 = 0</li> <li>guildTable = 0 ...</li> </ul>"},{"location":"engine/formats/savegame/#day","title":"<code>day</code>","text":"<p>The number of in-game days played in the save-game.</p> <p>Info</p> <p>This value is the true time to be set when loading the save. The value stored in <code>SAVEINFO.SAV</code> is discarded and only used in the save-game preview.</p>"},{"location":"engine/formats/savegame/#hour","title":"<code>hour</code>","text":"<p>The hour of the in-game day when the save-game was created (values from <code>0</code> to <code>24</code>).</p> <p>Info</p> <p>This value is the true time to be set when loading the save. The value stored in <code>SAVEINFO.SAV</code> is discarded and only used in the save-game preview.</p>"},{"location":"engine/formats/savegame/#min","title":"<code>min</code>","text":"<p>The minute of the in-game hour when the save-game was created (values from <code>0</code> to <code>59</code>).</p> <p>Info</p> <p>This value is the true time to be set when loading the save. The value stored in <code>SAVEINFO.SAV</code> is discarded and only used in the save-game preview.</p>"},{"location":"engine/formats/savegame/#numsymbols","title":"<code>numSymbols</code>","text":"The number of script symbol values that are stored in the archive."},{"location":"engine/formats/savegame/#symname0","title":"<code>symName0</code>","text":"The name of the symbol the next value is stored for. Appears for every stored symbol value and is suffixed with the index in the saved symbol list."},{"location":"engine/formats/savegame/#symvalue0","title":"<code>symValue0</code>","text":"<p>The single value saved for the symbol.</p> <p>Warning</p> <p>Only available in Gothic I-saves. Gothic II allows for storing multiple values per symbol; see symName0cnt.</p>"},{"location":"engine/formats/savegame/#symname0cnt","title":"<code>symName0cnt</code>","text":"<p>The number of values stored for the symbol. Appears for every stored symbol value.</p> <p>Warning</p> <p>Only available in Gothic II-saves.</p>"},{"location":"engine/formats/savegame/#symvalue0_0","title":"<code>symValue0_0</code>","text":"<p>The value of the symbol at the index given by the suffix. Stored sequentially.</p> <p>Warning</p> <p>Only available in Gothic II-saves.</p>"},{"location":"engine/formats/savegame/#guildtable","title":"<code>guildTable</code>","text":"The attitude values for each in-game guild towards each other. Stored as a 42x42 matrix in the <code>raw</code> format. <ol> <li> <p>\"Inline\" means, that these objects are not wrapped in an archive object. Rather, their contents are simply   all written to the parent object directly without encapsulation.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"engine/formats/script_binaries/","title":"ZenGin Script Binaries","text":"<p>Quick Infos</p> <p>Type: Script Format Format Name: DAT File Extension: <code>.DAT</code> Class Name: <code>zCParser</code> Encoding: Binary</p> <p>ZenGin DAT files contain symbols and bytecode used by the VM of the engine. DAT files are the result of Daedalus script compilation process.</p>"},{"location":"engine/formats/script_binaries/#format-description","title":"Format Description","text":"<p>Compiled scripts are stored in a binary file which contains the following data. Also refer to the Datatype Reference for general information about often used datatypes.</p> DAT Structure<pre><code>struct DatFile {\n    byte version;\n\n    uint symbolCount;\n    uint symbolIds[/* symbolCount */]; // (1)\n    zCPar_Symbol symbolTable[/* symbolCount */];\n\n    uint bytecodeSize;\n    byte bytecode[/* bytecodeSize */]; // (2)\n};\n</code></pre> <ol> <li>Symbol IDs sorted lexicographically</li> <li>Read bytecode page for more info about this data.</li> </ol>"},{"location":"engine/formats/script_binaries/#symbol","title":"Symbol","text":"<pre><code>struct zCPar_Symbol {\n    byte isNamed; // (1) \n    SymbolName name;\n\n    SymbolParameters params;\n    SymbolCodeSpan span;\n    SymbolData data;\n    int parent; // (2)\n};\n</code></pre> <ol> <li>Does this symbol have a name</li> <li>Parent type, <code>-1</code> means <code>None</code></li> </ol>"},{"location":"engine/formats/script_binaries/#symbol-name","title":"Symbol Name","text":"If isNamed == 1If isNamed == 0 <pre><code>struct SymbolName {\n    string name;\n};\n</code></pre> <pre><code>struct SymbolName {};\n</code></pre>"},{"location":"engine/formats/script_binaries/#symbol-parameters","title":"Symbol Parameters","text":"<pre><code>struct SymbolParameters {\n    int offset; // (1)\n    uint count: 12; // (2)\n    zPAR_TYPE type: 4;\n    zPAR_FLAG flags: 6;\n    uint space: 1;\n    uint reserved: 9;\n};\n\nenum zPAR_TYPE: uint {\n    VOID = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    CLASS = 4,\n    FUNC = 5,\n    PROTOTYPE = 6,\n    INSTANCE = 7,\n};\n\n// Parameter bitflags\nenum zPAR_FLAG: uint {\n    CONST = 1,\n    RETURN = 2,\n    CLASSVAR = 4,\n    EXTERNAL = 8,\n    MERGED = 16\n};\n</code></pre> <ol> <li>Depending on <code>type</code> either Offset (ClassVar), Size (Class) or ReturnType (Func)</li> <li>How many sub items does this symbol have</li> </ol>"},{"location":"engine/formats/script_binaries/#symbol-code-span","title":"Symbol Code Span","text":"<p>This is span debug information, pointing at the source daedalus script</p> <pre><code>struct SymbolCodeSpan {\n    uint fileIndex: 19;\n    uint reserved: 13;\n    uint lineStart: 19;\n    uint reserved: 13;\n    uint lineCount: 19;\n    uint reserved: 13;\n    uint charStart: 24; // (1)\n    uint reserved: 8;\n    uint charCount: 24; // (2)\n    uint reserved: 8;\n};\n</code></pre> <ol> <li>Points to a byte of a source code file at which the span starts</li> <li>Determines how many bytes does the span starting at <code>charStart</code> has</li> </ol>"},{"location":"engine/formats/script_binaries/#symbol-data","title":"Symbol Data","text":"<p>This depends on <code>params.flags</code>, if <code>CLASSVAR</code> flag is set this data will always be 0 sized.</p> If <code>CLASSVAR</code> flag is not setIf <code>CLASSVAR</code> flag is set <p>It also depends on <code>params.type</code> of the symbol.</p> FLOATINTSTRINGCLASSINSTANCE, FUNCTION, PROTOTYPEVOID <pre><code>struct SymbolData {\n    float value[/* params.count */];\n};\n</code></pre> <pre><code>struct SymbolData {\n    int value[/* params.count */];\n};\n</code></pre> <pre><code>struct SymbolData {\n    string value[/* params.count */];\n};\n</code></pre> <p>Warning</p> <p>Some mods don't terminate those strings correctly, look at this code and the issue related to it.</p> <pre><code>struct SymbolData {\n    int classOffset;\n};\n</code></pre> <pre><code>struct SymbolData {\n    int address;\n};\n</code></pre> <pre><code>struct SymbolData {}\n</code></pre> <pre><code>struct SymbolData {}\n</code></pre>"},{"location":"engine/formats/texture/","title":"ZenGin Textures","text":"<p>Quick Infos</p> <p>Type: Asset Format Format Name: Texture File Extension: <code>.TEX</code> Class Name: <code>zCTexture</code> Encoding: Binary Used By: <code>zCFont</code></p> <p>ZenGin texture files contain DXT1-5, palette or raw textures alongside mipmaps of each texture. Textures are contained within binary files which start with a header followed by palette and image data.</p> <p>Standalone textures are found within the <code>Textures.vdf</code> file found in the <code>Data/</code> directory in the Gothic installation. They are sometimes embedded into other formats too, though.</p>"},{"location":"engine/formats/texture/#format-description","title":"Format Description","text":"<p>Textures are stored in a binary file which contains the following data. Also refer to the Datatype Reference for general information about often used datatypes.</p> Texture Structure<pre><code>enum zCTexture_Format {\n    bgra8  = (uint32_t) 0, // 32-bit BGRA pixel format with alpha, using 8 bits per channel\n    rgba8  = (uint32_t) 1, // 32-bit RGBA pixel format with alpha, using 8 bits per channel\n    abgr8  = (uint32_t) 2, // 32-bit ABGR pixel format with alpha, using 8 bits per channel\n    argb8  = (uint32_t) 3, // 32-bit ARGB pixel format with alpha, using 8 bits per channel\n    bgr8   = (uint32_t) 4, // 24-bit BGR pixel format with 8 bits per channel\n    rgb8   = (uint32_t) 5, // 24-bit RGB pixel format with 8 bits per channel\n    argb4  = (uint32_t) 6, // 16-bit ARGB pixel format with 4 bits for each channel\n    a1rgb5 = (uint32_t) 7, // 16-bit ARGB pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha\n    r5g6b5 = (uint32_t) 8, // 16-bit RGB pixel format with 5 bits for red, 6 bits for green, and 5 bits for blue\n    p8     = (uint32_t) 9, // 8-bit color indexed\n    dxt1   = (uint32_t) 10, // DXT1 compression texture format\n    dxt2   = (uint32_t) 11, // DXT2 compression texture format\n    dxt3   = (uint32_t) 12, // DXT3 compression texture format\n    dxt4   = (uint32_t) 13, // DXT4 compression texture format\n    dxt5   = (uint32_t) 14, // DXT5 compression texture format\n};\n\nstruct zCTexture {\n    char magic[4]; // Always `\"ZTEX\"`.\n    uint version; // Always 0.\n    uint format; // One of enum zCTexture_Format\n    uint width; // The width of the texture in pixels.\n    uint height; // The height of the texture in pixels.\n    uint numMipmaps; // The number of mipmap stored.\n    uint referenceWidth;\n    uint referenceHeight;\n    uint averageColor; // A 32-bit ARGB value containing the average color of the image.\n\n    // Texture data. See below for more information.\n    union {\n        struct {\n            uint palette[256];\n            byte palettePixels[/* (width * height) */];\n        };\n\n        byte rawPixels[/* (width * height * pixelsize(format) */]; // Depends on the pixel format (see zCTexture_Format)\n    } mipmaps[/* numMipmaps */];\n};\n</code></pre> <p>Note</p> <p>All color values should be understood as word-order, so an <code>RGBA</code> color <code>#aabbccdd</code> would be represented as the bytes <code>dd cc bb aa</code> in little-endian byte order. An alpha byte of <code>0xff</code> means full opacity.</p>"},{"location":"engine/formats/texture/#mipmaps","title":"Mipmaps","text":"<p>Mipmaps are stored from the smallest to the largest image. If the mipmap-image with the level <code>0</code> has a with of <code>w</code> and a height of <code>h</code> pixels then the mipmap image with the level <code>n</code> has a width of <code>w &gt;&gt; n</code> and a height of <code>h &gt;&gt; n</code> pixels (each mipmap-level is half the size of the previous one).</p>"},{"location":"engine/formats/texture/#format-dxt","title":"Format: DXT","text":"<p>If the texture format is <code>dxt1</code>, <code>dxt2</code>, <code>dxt3</code>, <code>dxt4</code> or <code>dxt5</code> the data stored right after the header is DXT compressed. To figure out the size of each mipmap-level in bytes, for DXT1 compressed data calculate <code>max(1, w / 4) * max(1, h / 4) * 8</code><sup>1</sup> and for DXT2-DXT5 calculate <code>max(1, w / 4) * max(1, h / 4) * 16</code><sup>1</sup> where <code>w</code> and <code>h</code> depend on the mipmap level. In practice, only DXT1, DXT3 AND DXT5 are used.</p>"},{"location":"engine/formats/texture/#format-palette","title":"Format: Palette","text":"<p>With the <code>p8</code> format, the texture file contains a palette-list before the actual texture data. This palette follows right after the header and contains <code>256</code> 32-bit ARGB8 colors. These are then referenced in the texture data section right after the palette data. Each byte in the texture data represents one pixel. Its color is the color in the palette at the index indicated by the byte's value.</p>"},{"location":"engine/formats/texture/#format-raw","title":"Format: Raw","text":"<p>If the format is not <code>p8</code> and not one of the <code>dxt</code> formats, the texture stores raw data according to the format described above. For <code>bgra8</code>, <code>rgba8</code>, <code>abgr8</code> and <code>argb8</code> formats, each pixel is 4 bytes in size. With formats <code>bgr8</code> and <code>rgb8</code>, each pixel is 3 bytes in size. <code>argb4</code>, <code>a1rgb5</code> and <code>r5g6b5</code> contain 2-byte sized pixels.</p> <ol> <li> <p>This calculation has been adopted from ZenLib.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"engine/formats/vdf/","title":"ZenGin Virtual File System","text":"<p>Quick Infos</p> <p>Type: Asset Format Format Name: Virtual File System File Extension: <code>.VDF</code> Class Name: <code>zFILE_VDFS</code> <sup>3</sup> Encoding: Binary</p> <p>VDF is a container format for a file/directory structure, similar to the tar format. VDF files are not intended to be used for general file transfer, and thus they don't contain metadata like permission information which can usually be found in such container formats.</p> <p>VDF files can usually be found in the <code>Data/</code> directory of Gothic installations.</p>"},{"location":"engine/formats/vdf/#format-description","title":"Format Description","text":"<p>VDF files consist of a header, the catalog and a data section which are described below. Also refer to the Datatype Reference for general information about often used datatypes.</p> VDF Structure<pre><code>struct zFILE_VDFS {\n    zFILE_VDFS_Header header;\n    zFILE_VDFS_Catalog catalog;\n    byte data[];\n};\n</code></pre>"},{"location":"engine/formats/vdf/#header","title":"Header","text":"<p>The VDFs header describes the file and its contents. It always has the same physical size and can be represented as a C struct like this.</p> VDF Header<pre><code>struct zFILE_VDFS_Header {\n    char comment[256]; // (1)\n    char signature[16]; // (2)\n    uint numEntries;\n    uint numFiles;\n    uint timestamp; // (3)\n    uint size; // (4)\n    uint catalogOffset; // (5)\n    uint version; // (6)\n};\n</code></pre> <ol> <li>The comment might not fill the entire 256 bytes. If it does not, the rest of the array is filled with <code>'\\x1A'</code>    characters.</li> <li>The signature indicates which game this VDF file was made for. If it is <code>\"PSVDSC_V2.00\\r\\n\\r\\n\"</code> then the VDF was    made for Gothic and if it is <code>\"PSVDSC_V2.00\\n\\r\\n\\r\"</code> it was made for Gothic II.</li> <li>The timestamp has a special format called \"DOS date format\" by all sources<sup>1</sup>. It is described    below.</li> <li>The full size of the file in bytes.</li> <li>An offset from the beginning of the file in bytes at which the first entry of the catalog is located.    Because of a likely bug in the original <code>vdfs32g.dll</code> shipped with the game, this value must always be <code>296</code>.</li> <li>The version of the VDF format being used. This is always <code>0x50</code> in reality.</li> </ol>"},{"location":"engine/formats/vdf/#catalog","title":"Catalog","text":"<p>The catalog describes the directory and file structure contained within the VDF file. Each entry is either a file or a directory entry. File entries always point to an address in the data section of the container while directory entries always point to a subsection of the catalog listing the child entries of the directory. Here's a basic example:</p> Text Only<pre><code>00 _WORK/  -&gt; 01\n01   DATA/    -&gt; 03\n02   CUSTOM/  -&gt; 10\n03     ANIMS/     -&gt; 05\n04     TEXTURES/  -&gt; 07\n05       ANIM1.MAN\n06       ANIM2.MAN\n07       TEXTURE_A.TEX\n08       TEXTURE_B.TEX\n09       TEXTURE_C.TEX\n10     MYFILE.WAV\n</code></pre> <p>As you can see, the full path of <code>ANIM1.MAN</code> would be <code>_WORK/DATA/ANIMS/ANIM1.MAN</code>. Notice that all entries of a directory are always listed right after each other, and their respective child entries are listed after the parent folder's entries.</p> <p>Each entry can be represented as a C struct like this.</p> VDF Catalog<pre><code>struct zFILE_VDFS_Catalog {\n    struct {\n        char name[64]; // (1)\n        uint32_t offset; // (2)\n        uint32_t size; // (3)\n        uint32_t type; // (4)\n        uint32_t attributes; // (5)\n    } entries[/* zFILE_VDFS_Header.numEntries */];\n};\n</code></pre> <ol> <li>The name might not fill the entire 64 bytes. If it does not, the rest of the array is filled with <code>'\\x20'</code>    characters.</li> <li>If the entry is a file, this contains an offset into the file at which the entry's data is stored.    If it is a directory, this contains the index of the first child entry in the catalog.</li> <li>The size of the entry if it is a file, otherwise contains 0.</li> <li>A bitmask describing the type of the entry. If bit <code>0x80000000</code> is set, the entry is a directory, otherwise it is    a file. If bit <code>0x40000000</code> is set, the entry is the last in the parent directory<sup>2</sup>.</li> <li>Extra attributes for the entry. Unused.</li> </ol>"},{"location":"engine/formats/vdf/#dos-date-format","title":"DOS date format","text":"<p>The timestamp format used for VDF files has been called DOS date format<sup>1</sup>, however I can not find any official reference for it online. In any case, these timestamps are saved in a 32-bit unsigned integer and formatted like this.</p> DOS date format<pre><code>//                            year (1)       day         minute\n//                            ---------      -----       ------\nuint32_t date = 0x2D65BBB3 == 0b0010110'1011'00101'10111'011101'10011\n//                                      ----       -----        -----\n//                                     month (2)    hour       second (3)\n</code></pre> <ol> <li>The number of years after 1980, here <code>1980 + 0b0010110 = 2002</code></li> <li>The month starts counting a <code>1</code> (January), here <code>11 = November</code></li> <li>Seconds are only stored with half-precision so to get the correct number, the number has to be multiplied by two,    here <code>0b10011 * 2 = 38</code></li> </ol> <p>This reference implementation can be used to load and create DOS timestamps. It is heavily based on the implementation in PhysicsFS.</p> DOS date format reference implementation<pre><code>/**\n * Converts a DOS timestamp to a standard unix timestamp.\n */\ntime_t dos_to_unix_time(uint32_t dos) {\n    struct tm t {};\n    t.tm_year = ((int) ((dos &gt;&gt; 25) &amp; 0x7F)) + 80;\n    t.tm_mon =  ((int) ((dos &gt;&gt; 21) &amp; 0x0F)) - 1;\n    t.tm_mday =  (int) ((dos &gt;&gt; 16) &amp; 0x1F);\n    t.tm_hour =  (int) ((dos &gt;&gt; 11) &amp; 0x1F);\n    t.tm_min =   (int) ((dos &gt;&gt; 5 ) &amp; 0x3F);\n    t.tm_sec =  ((int) ((dos &gt;&gt; 0 ) &amp; 0x1F)) * 2;\n    return timegm(&amp;t);\n}\n\n/**\n * Converts a unix timestamp to a DOS timestamp.\n */\nuint32_t unix_time_to_dos(time_t nix) {\n    struct tm* t {gmtime(&amp;nix)};\n    uint32_t dos {0};\n    dos |= (t-&gt;tm_year - 80) &lt;&lt; 25;\n    dos |= (t-&gt;tm_mon + 1) &lt;&lt; 21;\n    dos |= t-&gt;tm_mday &lt;&lt; 16;\n    dos |= t-&gt;tm_hour &lt;&lt; 11;\n    dos |= t-&gt;tm_min &lt;&lt; 5;\n    dos |= (t-&gt;tm_sec / 2) &lt;&lt; 0;\n    return dos;\n}\n</code></pre> <ol> <li> <p>References to the DOS date format can be found in PhysicsFS where the VDF format is implemented. It is also discussed in the Wiki for ReGoth (the old repository).\u00a0\u21a9\u21a9</p> </li> <li> <p>Referring back to the example, the <code>0x40000000</code> bit will be set for entries <code>_WORK/</code> (<code>00</code>), <code>CUSTOM/</code> (<code>02</code>), <code>TEXTURES/</code> (<code>04</code>), <code>ANIM2.MAN</code> (<code>06</code>), <code>TEXTURE_C.TEX</code> (<code>09</code>) and <code>MYFILE.WAV</code> (<code>10</code>).\u00a0\u21a9</p> </li> <li> <p>It should be noted that the original implementation of VDF files was provided by a separate DLL called <code>Vdfs32g.dll</code>. <code>zFILE_VDFS</code> is merely an implementation using that API.\u00a0\u21a9</p> </li> </ol>"},{"location":"engine/objects/oCCSTrigger/","title":"<code>oCCSTrigger</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCCSTrigger</code> Version Identifiers: \u2014 Gothic I: <code>24577</code> \u2014 Gothic II: <code>24577</code> ZenKit Class: <code>VCutsceneTrigger</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A special trigger VObject which can start a cutscene. The <code>zCTriggerBase:triggerTarget</code> must be the name of the cutscene (without the extension) to be started. For this to work, the cutscene must already be loaded. <code>OnUntrigger</code> events are ignored by <code>oCCSTrigger</code>s. </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCCSTrigger<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCCSTrigger<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCCSTrigger<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCCSTrigger<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCInfo/","title":"<code>oCInfo</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCInfo</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCInfo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCInfo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCInfo<ul> <li>Told = FALSE</li> <li>InstName = </li> </ul> </li> </ul> <ul> <li>oCInfo<ul> <li>Told = FALSE</li> <li>InstName = </li> </ul> </li> </ul>"},{"location":"engine/objects/oCInfo/#properties","title":"Properties","text":""},{"location":"engine/objects/oCInfo/#told","title":"<code>Told</code>","text":"<p>Whether the hero has already been told this info.</p> <ul> <li><code>False</code> \u2014 The info has not yet been told.</li> <li><code>True</code> \u2014 The info has already been told.</li> </ul> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCInfo/#instname","title":"<code>InstName</code>","text":"<p>The name of the script instance representing this info.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCInfoManager/","title":"<code>oCInfoManager</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCInfoManager</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCInfoManager<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCInfoManager<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCInfoManager<ul> <li>NumOfEntries = 0</li> <li>oCInfo ... = NULL</li> </ul> </li> </ul> <ul> <li>oCInfoManager<ul> <li>NumOfEntries = 0</li> <li>oCInfo ... = NULL</li> </ul> </li> </ul>"},{"location":"engine/objects/oCInfoManager/#properties","title":"Properties","text":""},{"location":"engine/objects/oCInfoManager/#numofentries","title":"<code>NumOfEntries</code>","text":"<p>The number of saved <code>oCInfo</code> objects.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCItem/","title":"<code>oCItem</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCItem</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> Sources: \u2014 gothic-library.ru</p> <p>Represents an item in the game world. Items are special VObjects which are tied to a script instance which defines their attributes. They have physics enabled and can be targeted and picked up by the player. </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCItem<ul> <li>itemInstance = </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCItem<ul> <li>itemInstance = </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCItem<ul> <li>itemInstance = </li> <li>amount = </li> <li>flags = </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCItem<ul> <li>itemInstance = </li> <li>amount = </li> <li>flags = </li> </ul> </li> </ul>"},{"location":"engine/objects/oCItem/#properties","title":"Properties","text":""},{"location":"engine/objects/oCItem/#iteminstance","title":"<code>itemInstance</code>","text":"The name of the script instance representing the item."},{"location":"engine/objects/oCItem/#amount","title":"<code>amount</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCItem/#flags","title":"<code>flags</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCLogManager/","title":"<code>oCLogManager</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCLogManager</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCLogManager<ul> <li>LOGMANAGERTOPICCOUNT = 0</li> <li>oCLogTopic ... = NULL</li> </ul> </li> </ul> <ul> <li>oCLogManager<ul> <li>LOGMANAGERTOPICCOUNT = 0</li> <li>oCLogTopic ... = NULL</li> </ul> </li> </ul> <ul> <li>oCLogManager<ul> <li>LOGMANAGERTOPICCOUNT = 0</li> <li>oCLogTopic ... = NULL</li> </ul> </li> </ul> <ul> <li>oCLogManager<ul> <li>LOGMANAGERTOPICCOUNT = 0</li> <li>oCLogTopic ... = NULL</li> </ul> </li> </ul>"},{"location":"engine/objects/oCLogManager/#properties","title":"Properties","text":""},{"location":"engine/objects/oCLogManager/#logmanagertopiccount","title":"<code>LOGMANAGERTOPICCOUNT</code>","text":"The number of saved <code>oCLogTopic</code> objects."},{"location":"engine/objects/oCLogTopic/","title":"<code>oCLogTopic</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCLogTopic</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCLogTopic<ul> <li>TOPICDESCRIPTION = 0</li> <li>TOPICSECTION = zELogSection_Missions</li> <li>TOPICSTATUS = zELogTopicStatus_Free</li> <li>LOGTOPICENTRYCOUNT = 0</li> <li>LOGMANAGERENTRYCOUNT = 0</li> <li>ENTRYDESCRIPTION ... = </li> </ul> </li> </ul> <ul> <li>oCLogTopic<ul> <li>TOPICDESCRIPTION = 0</li> <li>TOPICSECTION = zELogSection_Missions</li> <li>TOPICSTATUS = zELogTopicStatus_Free</li> <li>LOGTOPICENTRYCOUNT = 0</li> <li>LOGMANAGERENTRYCOUNT = 0</li> <li>ENTRYDESCRIPTION ... = </li> </ul> </li> </ul> <ul> <li>oCLogTopic<ul> <li>TOPICDESCRIPTION = 0</li> <li>TOPICSECTION = zELogSection_Missions</li> <li>TOPICSTATUS = zELogTopicStatus_Free</li> <li>LOGTOPICENTRYCOUNT = 0</li> <li>LOGMANAGERENTRYCOUNT = 0</li> <li>ENTRYDESCRIPTION ... = </li> </ul> </li> </ul> <ul> <li>oCLogTopic<ul> <li>TOPICDESCRIPTION = 0</li> <li>TOPICSECTION = zELogSection_Missions</li> <li>TOPICSTATUS = zELogTopicStatus_Free</li> <li>LOGTOPICENTRYCOUNT = 0</li> <li>LOGMANAGERENTRYCOUNT = 0</li> <li>ENTRYDESCRIPTION ... = </li> </ul> </li> </ul>"},{"location":"engine/objects/oCLogTopic/#properties","title":"Properties","text":""},{"location":"engine/objects/oCLogTopic/#topicdescription","title":"<code>TOPICDESCRIPTION</code>","text":"The name of the quest log entry."},{"location":"engine/objects/oCLogTopic/#topicsection","title":"<code>TOPICSECTION</code>","text":"<p>The quest log section the entry is in.</p> <ul> <li><code>zELogSection_Missions</code> \u2014 The entry is in one of the mission sections of the quest log.</li> <li><code>zELogSection_Notes</code> \u2014 The entry is in the general notes section of the quest log.</li> </ul>"},{"location":"engine/objects/oCLogTopic/#topicstatus","title":"<code>TOPICSTATUS</code>","text":"<p>The status the quest log entry.</p> <ul> <li><code>zELogTopicStatus_Free</code> \u2014 Unknown, makes the entry disappear from the quest log.</li> <li><code>zELogTopicStatus_Running</code> \u2014 The entry is in the 'running quests' section of the quest log.</li> <li><code>zELogTopicStatus_Success</code> \u2014 The entry is in the 'succeeded quests' section of the quest log.</li> <li><code>zELogTopicStatus_Failure</code> \u2014 The entry is in the 'failed quests' section of the quest log.</li> <li><code>zELogTopicStatus_Obsolete</code> \u2014 The entry is in the 'obsolete quests' section of the quest log.</li> </ul> <p>Warning</p> <p>This field is ignored unless <code>TOPICSECTION</code> is set to <code>zELogSection_Missions</code>.</p>"},{"location":"engine/objects/oCLogTopic/#logtopicentrycount","title":"<code>LOGTOPICENTRYCOUNT</code>","text":"The number of entries of this log topic."},{"location":"engine/objects/oCLogTopic/#logmanagerentrycount","title":"<code>LOGMANAGERENTRYCOUNT</code>","text":"The same as <code>LOGTOPICENTRYCOUNT</code>."},{"location":"engine/objects/oCLogTopic/#entrydescription","title":"<code>ENTRYDESCRIPTION</code>","text":"A single entry in the log topic. Log entries are shown in chronological order on the detailed view of the log topic, separated by three dashes."},{"location":"engine/objects/oCMOB/","title":"<code>oCMOB</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMOB</code> Version Identifiers: \u2014 Gothic I: <code>47105</code> \u2014 Gothic II: <code>47105</code> ZenKit Class: <code>VMovableObject</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject which can optionally be moved and/or carried.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB<ul> <li>MOB<ul> <li>focusName = </li> <li>hitpoints = 0</li> <li>damage = 0</li> <li>moveable = FALSE</li> <li>takeable = FALSE</li> <li>focusOverride = FALSE</li> <li>soundMaterial = WOOD</li> <li>visualDestroyed = </li> <li>owner = </li> <li>ownerGuild = </li> </ul> </li> <li>isDestroyed = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB<ul> <li>MOB<ul> <li>focusName = </li> <li>hitpoints = 0</li> <li>damage = 0</li> <li>moveable = FALSE</li> <li>takeable = FALSE</li> <li>focusOverride = FALSE</li> <li>soundMaterial = WOOD</li> <li>visualDestroyed = </li> <li>owner = </li> <li>ownerGuild = </li> </ul> </li> <li>isDestroyed = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB<ul> <li>MOB<ul> <li>focusName = </li> <li>hitpoints = 0</li> <li>damage = 0</li> <li>moveable = FALSE</li> <li>takeable = FALSE</li> <li>focusOverride = FALSE</li> <li>soundMaterial = WOOD</li> <li>visualDestroyed = </li> <li>owner = </li> <li>ownerGuild = </li> </ul> </li> <li>isDestroyed = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB<ul> <li>MOB<ul> <li>focusName = </li> <li>hitpoints = 0</li> <li>damage = 0</li> <li>moveable = FALSE</li> <li>takeable = FALSE</li> <li>focusOverride = FALSE</li> <li>soundMaterial = WOOD</li> <li>visualDestroyed = </li> <li>owner = </li> <li>ownerGuild = </li> </ul> </li> <li>isDestroyed = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMOB/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMOB/#focusname","title":"<code>focusName</code>","text":"The name of the object as seen in-game when focusing it."},{"location":"engine/objects/oCMOB/#hitpoints","title":"<code>hitpoints</code>","text":"The number of hitpoints of the object."},{"location":"engine/objects/oCMOB/#damage","title":"<code>damage</code>","text":"The damage dealt by the object when being used."},{"location":"engine/objects/oCMOB/#moveable","title":"<code>moveable</code>","text":"<p>Whether the object can be moved by the player.</p> <ul> <li><code>False</code> \u2014 The object can not be moved.</li> <li><code>True</code> \u2014 The object can be moved.</li> </ul>"},{"location":"engine/objects/oCMOB/#takeable","title":"<code>takeable</code>","text":"<p>Whether the object can be carried by the player.</p> <ul> <li><code>False</code> \u2014 The object can not be carried.</li> <li><code>True</code> \u2014 The object can be carried.</li> </ul>"},{"location":"engine/objects/oCMOB/#focusoverride","title":"<code>focusOverride</code>","text":"Unknown."},{"location":"engine/objects/oCMOB/#soundmaterial","title":"<code>soundMaterial</code>","text":"<p>The sound to play when the object is hit.</p> <ul> <li><code>WOOD</code> \u2014 Wood.</li> <li><code>STONE</code> \u2014 Stone.</li> <li><code>METAL</code> \u2014 Metal.</li> <li><code>LEATHER</code> \u2014 Leather.</li> <li><code>CLAY</code> \u2014 Clay.</li> <li><code>GLAS</code> \u2014 Glass.</li> </ul>"},{"location":"engine/objects/oCMOB/#visualdestroyed","title":"<code>visualDestroyed</code>","text":"The name of the visual to use when the object is destroyed. Behaves like <code>zCVob:visual</code>."},{"location":"engine/objects/oCMOB/#owner","title":"<code>owner</code>","text":"The name of the script instance of the NPC who is the owner of this object."},{"location":"engine/objects/oCMOB/#ownerguild","title":"<code>ownerGuild</code>","text":"The name of the guild this object belongs to. This name corresponds to the script constant for each guild (i.e. <code>GIL_BAU</code>), found in <code>Constants.d</code>."},{"location":"engine/objects/oCMOB/#isdestroyed","title":"<code>isDestroyed</code>","text":"Unknown."},{"location":"engine/objects/oCMission/","title":"<code>oCMission</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMission</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCMission<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCMission<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>oCMission<ul> <li>name = </li> <li>ID = 0</li> <li>AV = FALSE</li> <li>NumInList = 0</li> <li>Status ...<ul> <li>VobIDL = 0</li> <li>StatusL = 0</li> <li>startTimeL = 0.0</li> </ul> </li> <li>StatusIndex = 0</li> </ul> </li> </ul> <ul> <li>oCMission<ul> <li>name = </li> <li>ID = 0</li> <li>AV = FALSE</li> <li>NumInList = 0</li> <li>Status ...<ul> <li>VobIDL = 0</li> <li>StatusL = 0</li> <li>startTimeL = 0.0</li> </ul> </li> <li>StatusIndex = 0</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMission/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMission/#name","title":"<code>name</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#id","title":"<code>ID</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#av","title":"<code>AV</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#numinlist","title":"<code>NumInList</code>","text":"<p>The number of statuses stored for the mission.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#vobidl","title":"<code>VobIDL</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#statusl","title":"<code>StatusL</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#starttimel","title":"<code>startTimeL</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMission/#statusindex","title":"<code>StatusIndex</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMissionManager/","title":"<code>oCMissionManager</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMissionManager</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>\u2014</code> </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCMissionManager<ul> <li>NumOfEntries = 0</li> <li>oCMission ... = NULL</li> </ul> </li> </ul> <ul> <li>oCMissionManager<ul> <li>NumOfEntries = 0</li> <li>oCMission ... = NULL</li> </ul> </li> </ul> <ul> <li>oCMissionManager<ul> <li>NumOfEntries = 0</li> <li>oCMission ... = NULL</li> </ul> </li> </ul> <ul> <li>oCMissionManager<ul> <li>NumOfEntries = 0</li> <li>oCMission ... = NULL</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMissionManager/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMissionManager/#numofentries","title":"<code>NumOfEntries</code>","text":"The number of saved <code>oCMission</code> objects."},{"location":"engine/objects/oCMobBed/","title":"<code>oCMobBed</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobBed</code> Version Identifiers: \u2014 Gothic I: <code>35585</code> \u2014 Gothic II: <code>35585</code> ZenKit Class: <code>VBed</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>VObject marking beds for NPCs and the player to sleep on. In the original Gothic I, there is a bug which prevents <code>oCMobBed</code>s from working correctly, so it is recommended to instead use <code>oCMobDoor</code> and attach the visual of a bed when targeting that platform. </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMob</li> <li>oCMobInter</li> <li>oCMobBed<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMob</li> <li>oCMobInter</li> <li>oCMobBed<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMob</li> <li>oCMobInter</li> <li>oCMobBed<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMob</li> <li>oCMobInter</li> <li>oCMobBed<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobContainer/","title":"<code>oCMobContainer</code>","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobContainer</code> Version Identifiers: \u2014 Gothic I: <code>64513</code> \u2014 Gothic II: <code>64513</code> ZenKit Class: <code>VContainer</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>An object which contains items.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMOBInter</li> <li>oCMOBLockable</li> <li>oCMobContainer<ul> <li>Container<ul> <li>contains = </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMOBInter</li> <li>oCMOBLockable</li> <li>oCMobContainer<ul> <li>Container<ul> <li>contains = </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMOBInter</li> <li>oCMOBLockable</li> <li>oCMobContainer<ul> <li>Container<ul> <li>contains = </li> </ul> </li> <li>NumOfEntries = 0</li> <li>oCItem ... = NULL</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMOBInter</li> <li>oCMOBLockable</li> <li>oCMobContainer<ul> <li>Container<ul> <li>contains = </li> </ul> </li> <li>NumOfEntries = 0</li> <li>oCItem ... = NULL</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobContainer/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMobContainer/#contains","title":"<code>contains</code>","text":"The items found inside the container as a comma-separated list. Each element of the list starts with the name of theitem script instance and is optionally followed by a colon and a number, indicating the number of that item to be foundinside.Example: <code>ItMi_Gold:75, ItFo_Fish:2, ItMi_Quartz</code>"},{"location":"engine/objects/oCMobContainer/#numofentries","title":"<code>NumOfEntries</code>","text":"<p>The number of items in the container.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCMobDoor/","title":"oCMobDoor","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobDoor</code> Version Identifiers: \u2014 Gothic I: <code>64513</code> \u2014 Gothic II: <code>64513</code> ZenKit Class: <code>VDoor</code> Sources: \u2014 gothic-library.ru</p> <p>A VObject representing a door. This is also used for NPCs navigating the waynet.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLockable</li> <li>oCMobDoor<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLockable</li> <li>oCMobDoor<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLockable</li> <li>oCMobDoor<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLockable</li> <li>oCMobDoor<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobFire/","title":"oCMobFire","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobFire</code> Version Identifiers: \u2014 Gothic I: <code>18433</code> \u2014 Gothic II: <code>18433</code> ZenKit Class: <code>VFire</code> Sources: \u2014 gothic-library.ru</p> <p>An object with an integrated fire effect. Only supports rigged models as visuals.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobFire<ul> <li>fireSlot = \"\"</li> <li>fireVobtreeName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobFire<ul> <li>fireSlot = \"\"</li> <li>fireVobtreeName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobFire<ul> <li>fireSlot = \"\"</li> <li>fireVobtreeName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobFire<ul> <li>fireSlot = \"\"</li> <li>fireVobtreeName = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobFire/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMobFire/#fireslot","title":"<code>fireSlot</code>","text":"The bone of the rigged model to place the fire effect at."},{"location":"engine/objects/oCMobFire/#firevobtreename","title":"<code>fireVobtreeName</code>","text":"The name of the template file which contains the configuration of the fire effect. For example: <code>FIRETREE_MEDIUM.ZEN</code>."},{"location":"engine/objects/oCMobInter/","title":"oCMobInter","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobInter</code> Version Identifiers: \u2014 Gothic I: <code>35585</code> \u2014 Gothic II: <code>35585</code> ZenKit Class: <code>VInteractiveObject</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Interactive objects can be interacted with by NPCs and the player. Every time the object is interacted with, an <code>OnTrigger</code> event is sent to the <code>triggerTarget</code> object.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter<ul> <li>stateNum = 0</li> <li>triggerTarget = \"\"</li> <li>useWithItem = \"\"</li> <li>conditionFunc = \"\"</li> <li>onStateFunc = \"\"</li> <li>rewind = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter<ul> <li>stateNum = 0</li> <li>triggerTarget = \"\"</li> <li>useWithItem = \"\"</li> <li>conditionFunc = \"\"</li> <li>onStateFunc = \"\"</li> <li>rewind = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter<ul> <li>stateNum = 0</li> <li>triggerTarget = \"\"</li> <li>useWithItem = \"\"</li> <li>conditionFunc = \"\"</li> <li>onStateFunc = \"\"</li> <li>rewind = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter<ul> <li>stateNum = 0</li> <li>triggerTarget = \"\"</li> <li>useWithItem = \"\"</li> <li>conditionFunc = \"\"</li> <li>onStateFunc = \"\"</li> <li>rewind = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobInter/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMobInter/#statenum","title":"<code>stateNum</code>","text":"Contains number of states for an object."},{"location":"engine/objects/oCMobInter/#triggertarget","title":"<code>triggerTarget</code>","text":"The name of the VObject(s) to send an <code>OnTrigger</code> event to when this object is interacted with. Controlled by the <code>rewind</code> property."},{"location":"engine/objects/oCMobInter/#usewithitem","title":"<code>useWithItem</code>","text":"The name of the item which the player or NPC must have in their inventory in order to interact with the object. Corresponds to the name of the item instance in the scripts."},{"location":"engine/objects/oCMobInter/#conditionfunc","title":"<code>conditionFunc</code>","text":"The name of a script function which, when called, determines whether the object can be interacted with. The script function returns an int which is either <code>0</code>, if the object should be disabled and <code>1</code> if it should be enabled."},{"location":"engine/objects/oCMobInter/#onstatefunc","title":"<code>onStateFunc</code>","text":"The name of a script function to be called when the object is being used."},{"location":"engine/objects/oCMobInter/#rewind","title":"<code>rewind</code>","text":"Determines whether an <code>OnTrigger</code> event should be sent every time the object is interacted with or only the first time. <code>TRUE</code> \u2014 Send <code>OnTrigger</code> events multiple times. <code>FALSE</code> \u2014 Only send the event once."},{"location":"engine/objects/oCMobLadder/","title":"oCMobLadder","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobLadder</code> Version Identifiers: \u2014 Gothic I: <code>35585</code> \u2014 Gothic II: <code>35585</code> ZenKit Class: <code>VLadder</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject representing a ladder. NPCs can interact with ladders by climbing.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLadder<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLadder<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLadder<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobLadder<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobLockable/","title":"oCMobLockable","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobLockable</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: \u2014</p> <p>The base class for many lockable objects like containers and doors.</p> <p>Warning</p> <p>This object is an abstract base class and cannot be instantiated by itself.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobContainer<ul> <li>Lockable<ul> <li>locked = FALSE</li> <li>keyInstance = \"\"</li> <li>pickLockStr = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobContainer<ul> <li>Lockable<ul> <li>locked = FALSE</li> <li>keyInstance = \"\"</li> <li>pickLockStr = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobContainer<ul> <li>Lockable<ul> <li>locked = FALSE</li> <li>keyInstance = \"\"</li> <li>pickLockStr = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobContainer<ul> <li>Lockable<ul> <li>locked = FALSE</li> <li>keyInstance = \"\"</li> <li>pickLockStr = \"\"</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobLockable/#properties","title":"Properties","text":""},{"location":"engine/objects/oCMobLockable/#locked","title":"<code>locked</code>","text":"Determines whether the container is locked. <code>TRUE</code> \u2014 The container is locked. <code>FALSE</code> \u2014 The container is not locked."},{"location":"engine/objects/oCMobLockable/#keyinstance","title":"<code>keyInstance</code>","text":"<p>The name of the item script instance which unlocks the container.</p> <p>Tip</p> <p>Only relevant if the container is locked.</p>"},{"location":"engine/objects/oCMobLockable/#picklockstr","title":"<code>pickLockStr</code>","text":"<p>The combination which unlocks this container when picking the lock. Each character of the string is either <code>R</code> or <code>L</code> where <code>R</code> stands for \"Right\" and <code>L</code> stands for \"Left\". If empty, the lock can not be picked. Example: <code>LRRLLRL</code>.</p> <p>Tip</p> <p>Only relevant if the container is locked.</p>"},{"location":"engine/objects/oCMobSwitch/","title":"oCMobSwitch","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobSwitch</code> Version Identifiers: \u2014 Gothic I: <code>35585</code> \u2014 Gothic II: <code>35585</code> ZenKit Class: <code>VSwitch</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A VObject representing a switch with two states.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobSwitch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobSwitch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobSwitch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobSwitch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCMobWheel/","title":"oCMobWheel","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCMobWheel</code> Version Identifiers: \u2014 Gothic I: <code>35585</code> \u2014 Gothic II: <code>35585</code> ZenKit Class: <code>VWheel</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A wheel with four different states. For example, this is used for the gates of the old camp in Gothic I.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobWheel<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobWheel<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobWheel<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob</li> <li>oCMOB</li> <li>oCMobInter</li> <li>oCMobWheel<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCSavegameInfo/","title":"oCSavegameInfo","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCSavegameInfo</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>SaveMetadata</code></p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>oCSavegameInfo<ul> <li>Title = \"\"</li> <li>WorldName = \"\"</li> <li>TimeDay = 0</li> <li>TimeHour = 0</li> <li>TimeMinute = 0</li> <li>SaveDate = \"01.01.0001 - 00:00\"</li> <li>VersionMajor = 0</li> <li>VersionMinor = 0</li> <li>PlayTimeSeconds = 0</li> <li>VersionPoint = 0</li> <li>VersionInt = 0</li> <li>VersionAppName = \"\"</li> </ul> </li> </ul> <ul> <li>oCSavegameInfo<ul> <li>Title = \"\"</li> <li>WorldName = \"\"</li> <li>TimeDay = 0</li> <li>TimeHour = 0</li> <li>TimeMinute = 0</li> <li>SaveDate = \"01.01.0001 - 00:00\"</li> <li>VersionMajor = 0</li> <li>VersionMinor = 0</li> <li>PlayTimeSeconds = 0</li> <li>VersionPoint = 0</li> <li>VersionInt = 0</li> <li>VersionAppName = \"\"</li> </ul> </li> </ul> <ul> <li>oCSavegameInfo<ul> <li>Title = \"\"</li> <li>WorldName = \"\"</li> <li>TimeDay = 0</li> <li>TimeHour = 0</li> <li>TimeMinute = 0</li> <li>SaveDate = \"01.01.0001 - 00:00\"</li> <li>VersionMajor = 0</li> <li>VersionMinor = 0</li> <li>PlayTimeSeconds = 0</li> <li>VersionPoint = 0</li> <li>VersionInt = 0</li> <li>VersionAppName = \"\"</li> </ul> </li> </ul> <ul> <li>oCSavegameInfo<ul> <li>Title = \"\"</li> <li>WorldName = \"\"</li> <li>TimeDay = 0</li> <li>TimeHour = 0</li> <li>TimeMinute = 0</li> <li>SaveDate = \"01.01.0001 - 00:00\"</li> <li>VersionMajor = 0</li> <li>VersionMinor = 0</li> <li>PlayTimeSeconds = 0</li> <li>VersionPoint = 0</li> <li>VersionInt = 0</li> <li>VersionAppName = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/oCSavegameInfo/#properties","title":"Properties","text":""},{"location":"engine/objects/oCSavegameInfo/#title","title":"<code>Title</code>","text":"The name of the save-game as provided by the player."},{"location":"engine/objects/oCSavegameInfo/#worldname","title":"<code>WorldName</code>","text":"The name of the world the hero was in when creating the save. For example: <code>\"WORLD\"</code> or <code>\"NEWORLD\"</code>."},{"location":"engine/objects/oCSavegameInfo/#timeday","title":"<code>TimeDay</code>","text":"The number of in-game days played in the save-game."},{"location":"engine/objects/oCSavegameInfo/#timehour","title":"<code>TimeHour</code>","text":"The hour of the in-game day when the save-game was created (values from <code>0</code> to <code>24</code>)."},{"location":"engine/objects/oCSavegameInfo/#timeminute","title":"<code>TimeMinute</code>","text":"The minute of the in-game hour when the save-game was created (values from <code>0</code> to <code>59</code>)."},{"location":"engine/objects/oCSavegameInfo/#savedate","title":"<code>SaveDate</code>","text":"The real-world date at which the save-game was created in a human-readable format. Its value conforms to this <code>strftime</code> format string: <code>%d.%m.%Y - %H:%M</code>"},{"location":"engine/objects/oCSavegameInfo/#versionmajor","title":"<code>VersionMajor</code>","text":"The major version of the save-game format. Known values for Gothic I: [<code>1</code>], known values for Gothic II: [<code>2</code>]"},{"location":"engine/objects/oCSavegameInfo/#versionminor","title":"<code>VersionMinor</code>","text":"The minor version of the save-game format. Known values for Gothic I: [<code>87</code>], known values for Gothic II: [<code>6</code>]"},{"location":"engine/objects/oCSavegameInfo/#playtimeseconds","title":"<code>PlayTimeSeconds</code>","text":"The total number of real-time seconds played in this save-game."},{"location":"engine/objects/oCSavegameInfo/#versionpoint","title":"<code>VersionPoint</code>","text":"<p>Unknown. Known values: [<code>0</code>]</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/oCSavegameInfo/#versionint","title":"<code>VersionInt</code>","text":"<p>Unknown. Known values: [<code>0</code>]</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/oCSavegameInfo/#versionappname","title":"<code>VersionAppName</code>","text":"<p>The name and version number of the version of Gothic used to create the save-game.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/oCTouchDamage/","title":"oCTouchDamage","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCTouchDamage</code> Version Identifiers: \u2014 Gothic I: <code>36865</code> \u2014 Gothic II: <code>36865</code> ZenKit Class: <code>VTouchDamage</code></p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage</li> <li>oCTouchDamage<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage</li> <li>oCTouchDamage<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage</li> <li>oCTouchDamage<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage</li> <li>oCTouchDamage<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCTriggerChangeLevel/","title":"oCTriggerChangeLevel","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCTriggerChangeLevel</code> Version Identifiers: \u2014 Gothic I: <code>24577</code> \u2014 Gothic II: <code>24577</code> ZenKit Class: <code>VTriggerChangeLevel</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A special <code>zCTrigger</code> which in addition to performing all other trigger actions also causes the engine to load another level when activated.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerChangeLevel<ul> <li>levelName = \"\"</li> <li>startVobName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerChangeLevel<ul> <li>levelName = \"\"</li> <li>startVobName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerChangeLevel<ul> <li>levelName = \"\"</li> <li>startVobName = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerChangeLevel<ul> <li>levelName = \"\"</li> <li>startVobName = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/oCTriggerChangeLevel/#properties","title":"Properties","text":""},{"location":"engine/objects/oCTriggerChangeLevel/#levelname","title":"<code>levelName</code>","text":"The name of the level to load including the file extension."},{"location":"engine/objects/oCTriggerChangeLevel/#startvobname","title":"<code>startVobName</code>","text":"The name of the VObject in the new level to place the player at."},{"location":"engine/objects/oCTriggerScript/","title":"oCTriggerScript","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCTriggerScript</code> Version Identifiers: \u2014 Gothic I: <code>24577</code> \u2014 Gothic II: <code>24577</code> ZenKit Class: <code>VTriggerScript</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A special <code>zCTrigger</code> which in addition to performing all other trigger actions also calls a script function when the trigger is activated. <code>OnUntrigger</code> events do not result in the script function being called.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerScript<ul> <li>scriptFunc = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerScript<ul> <li>scriptFunc = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerScript<ul> <li>scriptFunc = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>oCTriggerScript<ul> <li>scriptFunc = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/oCTriggerScript/#properties","title":"Properties","text":""},{"location":"engine/objects/oCTriggerScript/#scriptfunc","title":"<code>scriptFunc</code>","text":"The name script function to call when the trigger successfully processes a message."},{"location":"engine/objects/oCVob/","title":"oCVob","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCVob</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: Unused ZenKit Class: \u2014</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>oCVob<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>oCVob<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/oCZoneMusic/","title":"oCZoneMusic","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCZoneMusic</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>VZoneMusic</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject which defines the music to be played within its bounding box. Music zones may overlap; if they do, their <code>priority</code> property determines which music zone should be used. The camera object is used to test which music zone applies. If no music zone applies the music defined in the optional <code>oCZoneMusicDefault</code> is used.</p> <p>The name of the music theme to be played is defined by the <code>vobName</code>.</p> <p>Tip</p> <p>If the suffix <code>_NCI</code> or <code>_NCO</code> is added to the end of the zone name, it snows instead of rains in the zone.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic<ul> <li>enabled = TRUE</li> <li>priority = 0</li> <li>ellipsoid = FALSE</li> <li>reverbLevel = 0</li> <li>volumeLevel = 100</li> <li>loop = TRUE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic<ul> <li>enabled = TRUE</li> <li>priority = 0</li> <li>ellipsoid = FALSE</li> <li>reverbLevel = 0</li> <li>volumeLevel = 100</li> <li>loop = TRUE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic<ul> <li>enabled = TRUE</li> <li>priority = 0</li> <li>ellipsoid = FALSE</li> <li>reverbLevel = 0</li> <li>volumeLevel = 100</li> <li>loop = TRUE</li> <li>local_enabled = FALSE</li> <li>dayEntranceDone = FALSE</li> <li>nightEntranceDone = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic<ul> <li>enabled = TRUE</li> <li>priority = 0</li> <li>ellipsoid = FALSE</li> <li>reverbLevel = 0</li> <li>volumeLevel = 100</li> <li>loop = TRUE</li> <li>local_enabled = FALSE</li> <li>dayEntranceDone = FALSE</li> <li>nightEntranceDone = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/oCZoneMusic/#properties","title":"Properties","text":""},{"location":"engine/objects/oCZoneMusic/#enabled","title":"<code>enabled</code>","text":"Whether the music zone is enabled when loading the level. When disabled, no music will be played in the zone. <code>TRUE</code> \u2014 Enable the music zone when loading the level. <code>FALSE</code> \u2014 The not enable the zone."},{"location":"engine/objects/oCZoneMusic/#priority","title":"<code>priority</code>","text":"<p>The priority of the music zone if two zones overlap. A higher number means a higher priority. <code>0</code> is the lowest possible priority.</p> <p>Warning</p> <p>Only relevant if two <code>zCZoneMusic</code> zones overlap.</p>"},{"location":"engine/objects/oCZoneMusic/#ellipsoid","title":"<code>ellipsoid</code>","text":"<p>Determines the shape of the zone.</p> <ul> <li><code>TRUE</code> \u2014 The zone forms an ellipsoid within the bounding box.</li> <li><code>FALSE</code> \u2014 The zone exactly mirrors the bounding box.</li> </ul>"},{"location":"engine/objects/oCZoneMusic/#reverblevel","title":"<code>reverbLevel</code>","text":"Unclear."},{"location":"engine/objects/oCZoneMusic/#volumelevel","title":"<code>volumeLevel</code>","text":"Unclear."},{"location":"engine/objects/oCZoneMusic/#loop","title":"<code>loop</code>","text":"Unclear."},{"location":"engine/objects/oCZoneMusic/#local_enabled","title":"<code>local_enabled</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCZoneMusic/#dayentrancedone","title":"<code>dayEntranceDone</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCZoneMusic/#nightentrancedone","title":"<code>nightEntranceDone</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/oCZoneMusicDefault/","title":"oCZoneMusicDefault","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>oCZoneMusicDefault</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>VZoneMusicDefault</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>Determines the default music to be played when the camera is outside any <code>oCZoneMusic</code> zones. The volume-related options of the zone are ignored. There may only be one <code>oCZoneMusicDefault</code> object in a world.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic</li> <li>oCZoneMusicDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic</li> <li>oCZoneMusicDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic</li> <li>oCZoneMusicDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>oCZoneMusic</li> <li>oCZoneMusicDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCCSCamera/","title":"zCCSCamera","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCCSCamera</code> Version Identifiers: \u2014 Gothic I: <code>30720</code> \u2014 Gothic II: <code>33793</code> ZenKit Class: <code>VCutsceneCamera</code> Sources: \u2014 gothic-library.ru</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCCSCamera<ul> <li>camTrjFOR = WORLD</li> <li>targetTrjFOR = WORLD</li> <li>loopMode = NONE</li> <li>splLerpMode = PATH</li> <li>ignoreFORVobRotCam = FALSE</li> <li>ignoreFORVobRotTarget = FALSE</li> <li>adaptToSurroundings = FALSE</li> <li>easeToFirstKey = FALSE</li> <li>easeFromLastKey = FALSE</li> <li>totalTime = 10.0</li> <li>autoCamFocusVobName = \"\"</li> <li>autoCamPlayerMovable = TRUE</li> <li>autoCamUntriggerOnLastKey = TRUE</li> <li>autoCamUntriggerOnLastKeyDelay = 0.0</li> <li>numPos = 0</li> <li>numTargets = 0</li> <li>zCCamTrj_KeyFrame ...<sup>1</sup> = NULL</li> <li>zCCamTrj_KeyFrame ...<sup>2</sup> = NULL</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCSCamera<ul> <li>camTrjFOR = WORLD</li> <li>targetTrjFOR = WORLD</li> <li>loopMode = NONE</li> <li>splLerpMode = PATH</li> <li>ignoreFORVobRotCam = FALSE</li> <li>ignoreFORVobRotTarget = FALSE</li> <li>adaptToSurroundings = FALSE</li> <li>easeToFirstKey = FALSE</li> <li>easeFromLastKey = FALSE</li> <li>totalTime = 10.0</li> <li>autoCamFocusVobName = \"\"</li> <li>autoCamPlayerMovable = TRUE</li> <li>autoCamUntriggerOnLastKey = TRUE</li> <li>autoCamUntriggerOnLastKeyDelay = 0.0</li> <li>numPos = 0</li> <li>numTargets = 0</li> <li>zCCamTrj_KeyFrame ...<sup>1</sup> = NULL</li> <li>zCCamTrj_KeyFrame ...<sup>2</sup> = NULL</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCSCamera<ul> <li>camTrjFOR = WORLD</li> <li>targetTrjFOR = WORLD</li> <li>loopMode = NONE</li> <li>splLerpMode = PATH</li> <li>ignoreFORVobRotCam = FALSE</li> <li>ignoreFORVobRotTarget = FALSE</li> <li>adaptToSurroundings = FALSE</li> <li>easeToFirstKey = FALSE</li> <li>easeFromLastKey = FALSE</li> <li>totalTime = 10.0</li> <li>autoCamFocusVobName = \"\"</li> <li>autoCamPlayerMovable = TRUE</li> <li>autoCamUntriggerOnLastKey = TRUE</li> <li>autoCamUntriggerOnLastKeyDelay = 0.0</li> <li>numPos = 0</li> <li>numTargets = 0</li> <li>zCCamTrj_KeyFrame ...<sup>1</sup> = NULL</li> <li>zCCamTrj_KeyFrame ...<sup>2</sup> = NULL</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCSCamera<ul> <li>camTrjFOR = WORLD</li> <li>targetTrjFOR = WORLD</li> <li>loopMode = NONE</li> <li>splLerpMode = PATH</li> <li>ignoreFORVobRotCam = FALSE</li> <li>ignoreFORVobRotTarget = FALSE</li> <li>adaptToSurroundings = FALSE</li> <li>easeToFirstKey = FALSE</li> <li>easeFromLastKey = FALSE</li> <li>totalTime = 10.0</li> <li>autoCamFocusVobName = \"\"</li> <li>autoCamPlayerMovable = TRUE</li> <li>autoCamUntriggerOnLastKey = TRUE</li> <li>autoCamUntriggerOnLastKeyDelay = 0.0</li> <li>numPos = 0</li> <li>numTargets = 0</li> <li>zCCamTrj_KeyFrame ...<sup>1</sup> = NULL</li> <li>zCCamTrj_KeyFrame ...<sup>2</sup> = NULL</li> <li>paused = FALSE</li> <li>started = FALSE</li> <li>gotoTimeMode = FALSE</li> <li>csTime = 0.0</li> </ul> </li> </ul>"},{"location":"engine/objects/zCCSCamera/#properties","title":"Properties","text":""},{"location":"engine/objects/zCCSCamera/#camtrjfor","title":"<code>camTrjFOR</code>","text":"<p>The coordinate system of the key frames of the camera trajectory.</p> <ul> <li><code>WORLD</code> \u2014 Positions are relative to the global world coordinate system.</li> <li><code>OBJECT</code> \u2014 Positions are relative to the position of the camera object in the previous frame. Essentially, when   the camera travels along the keyframes each subsequent keyframe's position is relative to the position of the   previous keyframe. The position of the first keyframe is relative to the initial position of the camera.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#targettrjfor","title":"<code>targetTrjFOR</code>","text":"<p>The keyframe coordinate system of the target camera trajectory.</p> <ul> <li><code>WORLD</code> \u2014 Positions are relative to the global world coordinate system.</li> <li><code>OBJECT</code> \u2014 Positions are relative to the position of the camera object in the previous frame. Essentially, when   the camera travels along the keyframes each subsequent keyframe's position is relative to the position of the   previous keyframe. The position of the first keyframe is relative to the initial position of the camera.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#loopmode","title":"<code>loopMode</code>","text":"<p>The repetition mode of the camera animation.</p> <ul> <li><code>NONE</code> \u2014 The camera animation stops after the last frame is reached.</li> <li><code>RESTART</code> \u2014 The camera animation starts from the beginning after the last frame is reached. The ModKit states,   that this is only useful if the animation is to be interrupted by scripts or triggers.</li> <li><code>PINGPONG</code> \u2014 The camera animation re-plays the keyframes in reverse order after reaching the last frame.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#spllerpmode","title":"<code>splLerpMode</code>","text":"<p>Adjust camera orientation while moving.</p> <ul> <li><code>UNDEF</code> \u2014 Unset.</li> <li><code>PATH</code> \u2014 The camera's orientation is specified by the slope of the target path spline.</li> <li><code>PATH_IGNOREROLL</code> \u2014 The camera's orientation is similar to <code>PATH</code> with the only difference being that the    camera's XZ plane is always parallel to the world's XZ plane.</li> <li><code>PATH_ROT_SAMPLES</code> \u2014 The camera's orientation is based on the keyframes.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#ignoreforvobrotcam","title":"<code>ignoreFORVobRotCam</code>","text":"<p>Determines whether the orientation to reference VOB objects should be taken into account when passing through key frames.</p> <ul> <li><code>TRUE</code> \u2014 Orientation to VOB reference objects is ignored. This can be useful if VOB objects appear that are    calculated by the rotation animation. After this, the orientation is taken into account only once at the    beginning of the movement.</li> <li><code>FALSE</code> \u2014 Orientation is not ignored.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#ignoreforvobrottarget","title":"<code>ignoreFORVobRotTarget</code>","text":"<p>Determines the need to take into account the orientation of target key frames to reference VOB objects.</p> <ul> <li><code>TRUE</code> \u2014 Orientation to VOB reference objects is ignored. Orientation to VOB reference objects is ignored.    May be necessary when rotation of reference VOBs defines animation. After this, the orientation is taken    into account only once at the beginning of the movement.</li> <li><code>FALSE</code> \u2014 Orientation is not ignored.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#adapttosurroundings","title":"<code>adaptToSurroundings</code>","text":"<p>Indicates the need for dynamic adaptation to the environment.</p> <ul> <li><code>TRUE</code> \u2014 Enable adaptation.</li> <li><code>FALSE</code> \u2014 Disable adaptation. The camera will not adapt to its environment. Useful in cases where the keyframes    in the world have taken an absolute position (i.e. the camTrjFOR parameter is set to <code>WORLD</code>).</li> </ul>"},{"location":"engine/objects/zCCSCamera/#easetofirstkey","title":"<code>easeToFirstKey</code>","text":"<p>Gives a smooth transition of camera position from the first keyframe to the last, if possible.</p> <ul> <li><code>TRUE</code> \u2014 Smooth transition if possible.</li> <li><code>FALSE</code> \u2014 No smooth transition.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#easefromlastkey","title":"<code>easeFromLastKey</code>","text":"<p>Gives a smooth transition of camera position from the last keyframe to the first, if possible.</p> <ul> <li><code>TRUE</code> \u2014 Smooth transition if possible.</li> <li><code>FALSE</code> \u2014 No smooth transition.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#totaltime","title":"<code>totalTime</code>","text":"The duration of the camera animation in seconds."},{"location":"engine/objects/zCCSCamera/#autocamfocusvobname","title":"<code>autoCamFocusVobName</code>","text":"The name of the VOB object which the camera will automatically focus."},{"location":"engine/objects/zCCSCamera/#autocamplayermovable","title":"<code>autoCamPlayerMovable</code>","text":"<p>Indicates whether the player will be able to move when moving the camera animation.</p> <ul> <li><code>TRUE</code> \u2014 The player will be able to move.</li> <li><code>FALSE</code> \u2014 The player is motionless.</li> </ul>"},{"location":"engine/objects/zCCSCamera/#autocamuntriggeronlastkey","title":"<code>autoCamUntriggerOnLastKey</code>","text":"Emit an <code>OnUntrigger</code> event after reaching the last animation frame."},{"location":"engine/objects/zCCSCamera/#autocamuntriggeronlastkeydelay","title":"<code>autoCamUntriggerOnLastKeyDelay</code>","text":"Unclear."},{"location":"engine/objects/zCCSCamera/#numpos","title":"<code>numPos</code>","text":"<p>The number of position key frames for the camera animation.</p> <p>Warning</p> <p>This property is not available in the Spacer.</p>"},{"location":"engine/objects/zCCSCamera/#numtargets","title":"<code>numTargets</code>","text":"<p>The number of target key frames for the camera animation.</p> <p>Warning</p> <p>This property is not available in the Spacer.</p>"},{"location":"engine/objects/zCCSCamera/#paused","title":"<code>paused</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games made using Gothic II.</p>"},{"location":"engine/objects/zCCSCamera/#started","title":"<code>started</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games made using Gothic II.</p>"},{"location":"engine/objects/zCCSCamera/#gototimemode","title":"<code>gotoTimeMode</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games made using Gothic II.</p>"},{"location":"engine/objects/zCCSCamera/#cstime","title":"<code>csTime</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games made using Gothic II.</p> <ol> <li> <p>A list of position key frames. The number of items is indicated by the <code>numPos</code> property.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>A list of target key frames. The number of items is indicated by the <code>numTargets</code> property.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"engine/objects/zCCamTrj_KeyFrame/","title":"zCCamTrj_KeyFrame","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCCamTrj_KeyFrame</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VCameraTrajectoryFrame</code> Sources: \u2014 gothic-library.ru</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCCamTrj_KeyFrame<ul> <li>time = -1.0</li> <li>angleRollDeg = 0.0</li> <li>camFOVScale = 0.0</li> <li>motionType = SMOOTH</li> <li>motionTypeFOV = SMOOTH</li> <li>motionTypeRoll = SMOOTH</li> <li>motionTypeTimeScale = SMOOTH</li> <li>Details<ul> <li>tension = 0.0</li> <li>bias = 0.0</li> <li>continuity = 0.0</li> <li>timeScale = 1.0</li> <li>timeIsFixed = FALSE</li> </ul> </li> <li>originalPose = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCamTrj_KeyFrame<ul> <li>time = -1.0</li> <li>angleRollDeg = 0.0</li> <li>camFOVScale = 0.0</li> <li>motionType = SMOOTH</li> <li>motionTypeFOV = SMOOTH</li> <li>motionTypeRoll = SMOOTH</li> <li>motionTypeTimeScale = SMOOTH</li> <li>Details<ul> <li>tension = 0.0</li> <li>bias = 0.0</li> <li>continuity = 0.0</li> <li>timeScale = 1.0</li> <li>timeIsFixed = FALSE</li> </ul> </li> <li>originalPose = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCamTrj_KeyFrame<ul> <li>time = -1.0</li> <li>angleRollDeg = 0.0</li> <li>camFOVScale = 0.0</li> <li>motionType = SMOOTH</li> <li>motionTypeFOV = SMOOTH</li> <li>motionTypeRoll = SMOOTH</li> <li>motionTypeTimeScale = SMOOTH</li> <li>Details<ul> <li>tension = 0.0</li> <li>bias = 0.0</li> <li>continuity = 0.0</li> <li>timeScale = 1.0</li> <li>timeIsFixed = FALSE</li> </ul> </li> <li>originalPose = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCCamTrj_KeyFrame<ul> <li>time = -1.0</li> <li>angleRollDeg = 0.0</li> <li>camFOVScale = 0.0</li> <li>motionType = SMOOTH</li> <li>motionTypeFOV = SMOOTH</li> <li>motionTypeRoll = SMOOTH</li> <li>motionTypeTimeScale = SMOOTH</li> <li>Details<ul> <li>tension = 0.0</li> <li>bias = 0.0</li> <li>continuity = 0.0</li> <li>timeScale = 1.0</li> <li>timeIsFixed = FALSE</li> </ul> </li> <li>originalPose = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</li> </ul> </li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#properties","title":"Properties","text":""},{"location":"engine/objects/zCCamTrj_KeyFrame/#time","title":"<code>time</code>","text":"Unclear."},{"location":"engine/objects/zCCamTrj_KeyFrame/#anglerolldeg","title":"<code>angleRollDeg</code>","text":"The camera rotation angle of the frame along the Z axis."},{"location":"engine/objects/zCCamTrj_KeyFrame/#camfovscale","title":"<code>camFOVScale</code>","text":"Focal zoom of the camera's field of view (FOV) of the frame. Use reasonable values to avoid dizzying effects."},{"location":"engine/objects/zCCamTrj_KeyFrame/#motiontype","title":"<code>motionType</code>","text":"<p>The type of camera movement for the frame.</p> <ul> <li><code>SMOOTH</code> \u2014 The movement method is calculated taking into account nearby frames.</li> <li><code>LINEAR</code> \u2014 Constant speed in the current frame.</li> <li><code>STEP</code> - Step by step. Movement is jerky.</li> <li><code>SLOW</code> - The camera movement slows down in the current frame.</li> <li><code>FAST</code> - The camera movement accelerates in the current frame.</li> <li><code>CUSTOM</code> - Not implemented.</li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#motiontypefov","title":"<code>motionTypeFOV</code>","text":"<p>The type of focus change for the frame.</p> <ul> <li><code>SMOOTH</code> \u2014 The movement method is calculated taking into account nearby frames.</li> <li><code>LINEAR</code> \u2014 Constant speed in the current frame.</li> <li><code>STEP</code> - Step by step. Movement is jerky.</li> <li><code>SLOW</code> - The camera movement slows down in the current frame.</li> <li><code>FAST</code> - The camera movement accelerates in the current frame.</li> <li><code>CUSTOM</code> - Not implemented.</li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#motiontyperoll","title":"<code>motionTypeRoll</code>","text":"<p>The type of rotation for the frame.</p> <ul> <li><code>SMOOTH</code> \u2014 The movement method is calculated taking into account nearby frames.</li> <li><code>LINEAR</code> \u2014 Constant speed in the current frame.</li> <li><code>STEP</code> - Step by step. Movement is jerky.</li> <li><code>SLOW</code> - The camera movement slows down in the current frame.</li> <li><code>FAST</code> - The camera movement accelerates in the current frame.</li> <li><code>CUSTOM</code> - Not implemented.</li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#motiontypetimescale","title":"<code>motionTypeTimeScale</code>","text":"<p>Unclear.</p> <ul> <li><code>SMOOTH</code> \u2014 The movement method is calculated taking into account nearby frames.</li> <li><code>LINEAR</code> \u2014 Constant speed in the current frame.</li> <li><code>STEP</code> - Step by step. Movement is jerky.</li> <li><code>SLOW</code> - The camera movement slows down in the current frame.</li> <li><code>FAST</code> - The camera movement accelerates in the current frame.</li> <li><code>CUSTOM</code> - Not implemented.</li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#tension","title":"<code>tension</code>","text":"Defines the bend of the camera motion curve at the specified key. Larger values result in a sharper bend."},{"location":"engine/objects/zCCamTrj_KeyFrame/#bias","title":"<code>bias</code>","text":"Determines the slope of a line in one direction. The direction of the slope is determined by the sign, and the steepness by the value."},{"location":"engine/objects/zCCamTrj_KeyFrame/#continuity","title":"<code>continuity</code>","text":"Determines the amount of curve discontinuity at this animation key."},{"location":"engine/objects/zCCamTrj_KeyFrame/#timescale","title":"<code>timeScale</code>","text":"Unknown."},{"location":"engine/objects/zCCamTrj_KeyFrame/#timeisfixed","title":"<code>timeIsFixed</code>","text":"<p>An auxiliary flag indicating the time of the key frame, which cannot be changed automatically.</p> <ul> <li><code>TRUE</code> \u2014 The time of this frame is set manually and cannot be changed automatically.</li> <li><code>FALSE</code> \u2014 The frame time is calculated from the total specified animation playback time.</li> </ul>"},{"location":"engine/objects/zCCamTrj_KeyFrame/#originalpose","title":"<code>originalPose</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is not available in the Spacer.</p>"},{"location":"engine/objects/zCCodeMaster/","title":"zCCodeMaster","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCCodeMaster</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>zCCodeMaster</code> Source: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p><code>zCCodeMaster</code> VObjects keep a list of 'slave' VObjects and keep track of events received by them. If the master receives an <code>OnTrigger</code> event from a slave, it remembers that it did. After it has receives an <code>OnTrigger</code> message from all slaves, it emits an <code>OnTrigger</code> event to the <code>triggerTarget</code>. Receiving or sending an <code>OnTrigger</code> event is also referred to as an 'activation' for this purpose.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCCodeMaster<ul> <li>CodeMaster<ul> <li>orderRelevant = FALSE</li> <li>OrderRelevant<ul> <li>firstFalseIsFailure = TRUE</li> <li>triggerTargetFailure = \"\"</li> </ul> </li> <li>OrderNotRelevant<ul> <li>untriggerCancels = FALSE</li> </ul> </li> <li>slaveVobName ... = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCCodeMaster<ul> <li>CodeMaster<ul> <li>orderRelevant = FALSE</li> <li>OrderRelevant<ul> <li>firstFalseIsFailure = TRUE</li> <li>triggerTargetFailure = \"\"</li> </ul> </li> <li>OrderNotRelevant<ul> <li>untriggerCancels = FALSE</li> </ul> </li> <li>slaveVobName ... = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCCodeMaster<ul> <li>CodeMaster<ul> <li>orderRelevant = FALSE</li> <li>OrderRelevant<ul> <li>firstFalseIsFailure = TRUE</li> <li>triggerTargetFailure = \"\"</li> </ul> </li> <li>OrderNotRelevant<ul> <li>untriggerCancels = FALSE</li> </ul> </li> <li>slaveVobName ... = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCCodeMaster<ul> <li>CodeMaster<ul> <li>orderRelevant = FALSE</li> <li>OrderRelevant<ul> <li>firstFalseIsFailure = TRUE</li> <li>triggerTargetFailure = \"\"</li> </ul> </li> <li>OrderNotRelevant<ul> <li>untriggerCancels = FALSE</li> </ul> </li> <li>slaveVobName ... = \"\"</li> <li>numSlavesTriggered = 0</li> <li>slaveTriggered ... = NULL</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCCodeMaster/#properties","title":"Properties","text":""},{"location":"engine/objects/zCCodeMaster/#orderrelevant","title":"<code>orderRelevant</code>","text":"<p>Controls whether the master should keep track of the order it receives messages from its slaves.</p> <ul> <li><code>TRUE</code> \u2014 Only send an <code>OnTrigger</code> event to the <code>triggerTarget</code> if the slaves have fired in   the exact order they are configured here. Also counts multiple activations.</li> <li><code>FALSE</code> \u2014 Send an <code>OnTrigger</code> event to the <code>triggerTarget</code> after all slaves have fired at least   once, regardless of order.</li> </ul>"},{"location":"engine/objects/zCCodeMaster/#firstfalseisfailure","title":"<code>firstFalseIsFailure</code>","text":"<p>Controls when the slave activation sequence is considered to be incorrect. After the sequence is marked as incorrect an <code>OnTrigger</code> event is sent to <code>triggerTargetFailure</code>.</p> <ul> <li><code>TRUE</code> \u2014 The sequence is considered to be incorrect as soon as one slave is activated out-of-order.</li> <li><code>FALSE</code> \u2014 The sequence is considered to be incorrect only after all slaves have been activated at least once and   they were activated out-of-order.</li> </ul> <p>Warning</p> <p>Only relevant if <code>orderRelevant</code> is set to <code>TRUE</code>.</p>"},{"location":"engine/objects/zCCodeMaster/#triggertargetfailure","title":"<code>triggerTargetFailure</code>","text":"<p>The name of the VObject to emit an <code>OnTrigger</code> event to if the activation sequence fails. This is controlled by <code>firstFalseIsFailure</code>.</p> <p>Warning</p> <p>Only relevant if <code>orderRelevant</code> is set to <code>TRUE</code>.</p>"},{"location":"engine/objects/zCCodeMaster/#untriggercancels","title":"<code>untriggerCancels</code>","text":"<p>Controls whether slaves can emit <code>OnUntrigger</code> events to the master VObject to mark themselves as deactivated.</p> <ul> <li><code>TRUE</code> \u2014 When the master receives an <code>OnUntrigger</code> event from the slave, it marks it as not having been activated.</li> <li><code>FALSE</code> \u2014 The master ignore <code>OnUntrigger</code> events from its slaves.</li> </ul> <p>Warning</p> <p>Only relevant if <code>orderRelevant</code> is set to <code>FALSE</code>.</p>"},{"location":"engine/objects/zCCodeMaster/#slavevobname","title":"<code>slaveVobName</code>","text":"The name of a slave VObject."},{"location":"engine/objects/zCCodeMaster/#numslavestriggered","title":"<code>numSlavesTriggered</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCDecal/","title":"zCDecal","text":"<p>Quick Infos</p> <p>Type: Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCDecal</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>64513</code> ZenKit Class: <code>VisualDecal</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Decals are used to insert flat 2-dimensional textures into the game world. It is used for things like spider webs and waterfall splash effects which don't need to be 3-dimensional objects.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVisual</li> <li>zCDecal<ul> <li>name = \"\"</li> <li>decalDim = 25 25</li> <li>decalOffset = 0 0</li> <li>decal2Sided = FALSE</li> <li>decalAlphaFunc = NONE</li> <li>decalTexAniFPS = 0.0</li> </ul> </li> </ul> <ul> <li>zCVisual</li> <li>zCDecal<ul> <li>name = \"\"</li> <li>decalDim = 25 25</li> <li>decalOffset = 0 0</li> <li>decal2Sided = FALSE</li> <li>decalAlphaFunc = NONE</li> <li>decalTexAniFPS = 0.0</li> <li>decalAlphaWeight = 255</li> <li>ignoreDayLight = FALSE</li> </ul> </li> </ul> <ul> <li>zCVisual</li> <li>zCDecal<ul> <li>name = \"\"</li> <li>decalDim = 25 25</li> <li>decalOffset = 0 0</li> <li>decal2Sided = FALSE</li> <li>decalAlphaFunc = NONE</li> <li>decalTexAniFPS = 0.0</li> </ul> </li> </ul> <ul> <li>zCVisual</li> <li>zCDecal<ul> <li>name = \"\"</li> <li>decalDim = 25 25</li> <li>decalOffset = 0 0</li> <li>decal2Sided = FALSE</li> <li>decalAlphaFunc = NONE</li> <li>decalTexAniFPS = 0.0</li> <li>decalAlphaWeight = 255</li> <li>ignoreDayLight = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/zCDecal/#properties","title":"Properties","text":""},{"location":"engine/objects/zCDecal/#name","title":"<code>name</code>","text":"The name of the decal texture. If the decal is part of a VObject, this field is the same as zCVob.visual."},{"location":"engine/objects/zCDecal/#decaldim","title":"<code>decalDim</code>","text":"The size of the decal texture as a 2-dimensional vector. The first element is the width, and the second is the height."},{"location":"engine/objects/zCDecal/#decaloffset","title":"<code>decalOffset</code>","text":"The offset of the decal texture relative to the parent VObject's position as a 2-dimensional vector."},{"location":"engine/objects/zCDecal/#decal2sided","title":"<code>decal2Sided</code>","text":"Enables or disables backface culling for the texture. <code>TRUE</code> \u2014 Show the texture on both sides. <code>FALSE</code> \u2014 Show the texture on the front side only."},{"location":"engine/objects/zCDecal/#decalalphafunc","title":"<code>decalAlphaFunc</code>","text":"<p>The function to use for calculating the texture's alpha channel.</p> <ul> <li><code>MAT_DEFAULT</code> \u2014 Use the texture's alpha channel as-is.</li> <li><code>NONE</code> \u2014 Treat the alpha channel as an \"on or off\" value.</li> <li><code>BLEND</code> \u2014 Mixing.</li> <li><code>ADD</code> \u2014 Addition.</li> <li><code>SUB</code> \u2014 Subtraction.</li> <li><code>MUL</code> \u2014 Multiplication.</li> <li><code>MUL2</code> \u2014 Multiplication.</li> </ul>"},{"location":"engine/objects/zCDecal/#decaltexanifps","title":"<code>decalTexAniFPS</code>","text":"Determines the number of frames per minute to use for animated textures."},{"location":"engine/objects/zCDecal/#decalalphaweight","title":"<code>decalAlphaWeight</code>","text":"<p>Determines the transparency of the texture between <code>0</code> and <code>255</code>. Only relevant if <code>decalAlphaFunc</code> is set to a value other than <code>NONE</code>. A value of <code>255</code> indicates that the texture is fully visible and a value of <code>0</code> indicates that the decal is invisible.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCDecal/#ignoredaylight","title":"<code>ignoreDayLight</code>","text":"<p>Determines whether to take the day lighting into account when calculation the brightness of this decal. <code>TRUE</code> \u2014 To take into account daylight. <code>FALSE</code> \u2014 Do not take into account daylight.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCEarthquake/","title":"zCEarthquake","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCEarthquake</code> Version Identifiers: \u2014 Gothic I: Unused \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VEarthquake</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject used to create an earthquake effect when it receives an <code>OnTrigger</code> event. An earthquake is represented by a shaking camera.</p> <p>Warning</p> <p>This VObject is only available in Gothic II.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <p>Unavailable</p> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCEarthquake<ul> <li>Earthquake<ul> <li>radius = 200</li> <li>timeSec = 5</li> <li>amplitudeCM = 0</li> </ul> </li> </ul> </li> </ul> <p>Unavailable</p> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCEarthquake<ul> <li>Earthquake<ul> <li>radius = 200</li> <li>timeSec = 5</li> <li>amplitudeCM = 0</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCEarthquake/#properties","title":"Properties","text":""},{"location":"engine/objects/zCEarthquake/#radius","title":"<code>radius</code>","text":"The radius of the earthquake effect"},{"location":"engine/objects/zCEarthquake/#timesec","title":"<code>timeSec</code>","text":"The duration of the earthquake effect in seconds."},{"location":"engine/objects/zCEarthquake/#amplitudecm","title":"<code>amplitudeCM</code>","text":"The amplitude of the earthquake effect."},{"location":"engine/objects/zCEffect/","title":"zCEffect","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCEffect</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: \u2014</p> <p>The base class for many visual and sound effects.</p> <p>Warning</p> <p>This object is an abstract base class and cannot be instantiated by itself.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCMessageFilter/","title":"zCMessageFilter","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCMessageFilter</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>VMessageFilter</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>Transforms any incoming <code>OnTrigger</code> and <code>OnUntrigger</code> events before passing them on to the trigger target. All  <code>OnTrigger</code> and <code>OnUntrigger</code> messages received by this <code>zCMessageFilter</code> VObject are transformed according to  <code>onTrigger</code> and <code>onUntrigger</code> and then passed on to the VObject with the name specified  in the <code>triggerTarget</code>.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMessageFilter<ul> <li>onTrigger = MT_TRIGGER</li> <li>onUntrigger = MT_UNTRIGGER</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMessageFilter<ul> <li>onTrigger = MT_TRIGGER</li> <li>onUntrigger = MT_UNTRIGGER</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMessageFilter<ul> <li>onTrigger = MT_TRIGGER</li> <li>onUntrigger = MT_UNTRIGGER</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMessageFilter<ul> <li>onTrigger = MT_TRIGGER</li> <li>onUntrigger = MT_UNTRIGGER</li> </ul> </li> </ul>"},{"location":"engine/objects/zCMessageFilter/#properties","title":"Properties","text":""},{"location":"engine/objects/zCMessageFilter/#ontrigger","title":"<code>onTrigger</code>","text":"<p>The type of event to emit to the <code>triggerTarget</code> if this VObject receives an <code>OnTrigger</code> message.</p> <ul> <li><code>MT_NONE</code> \u2014 Don't emit another event.</li> <li><code>MT_TRIGGER</code> \u2014 Emit an <code>OnTrigger</code> event.</li> <li><code>MT_UNTRIGGER</code> \u2014 Emit an <code>OnUntrigger</code> event.</li> <li><code>MT_ENABLE</code> \u2014 Emit an <code>Enable</code> event.</li> <li><code>MT_DISABLE</code> \u2014 Emit a <code>Disable</code> event.</li> <li><code>MT_TOGGLE_ENABLED</code> \u2014 Emit a <code>ToggleEnabled</code> event.</li> </ul>"},{"location":"engine/objects/zCMessageFilter/#onuntrigger","title":"<code>onUntrigger</code>","text":"<p>The type of event to emit to the <code>triggerTarget</code> if this VObject receives an <code>OnUntrigger</code> message.</p> <ul> <li><code>MT_NONE</code> \u2014 Don't emit another event.</li> <li><code>MT_TRIGGER</code> \u2014 Emit an <code>OnTrigger</code> event.</li> <li><code>MT_UNTRIGGER</code> \u2014 Emit an <code>OnUntrigger</code> event.</li> <li><code>MT_ENABLE</code> \u2014 Emit an <code>Enable</code> event.</li> <li><code>MT_DISABLE</code> \u2014 Emit a <code>Disable</code> event.</li> <li><code>MT_TOGGLE_ENABLED</code> \u2014 Emit a <code>ToggleEnabled</code> event.</li> </ul>"},{"location":"engine/objects/zCMover/","title":"zCMover","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCMover</code> Version Identifiers: \u2014 Gothic I: <code>39936</code> \u2014 Gothic II: <code>39936</code> ZenKit Class: <code>VMover</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject which can move along a pre-determined path in response to an event. Movers can be controlled through a set of keyframes or the animation of their visuals. If the visual has an attached animation to be used as the mover's animation, it must have the following animations which are run depending on the mover's state: <code>S_OPEN</code>, <code>S_CLOSED</code>, <code>T_CLOSED_2_OPEN</code>, <code>T_OPEN_2_CLOSED</code>, <code>S_LOCKED</code>, <code>S_UNLOCKED</code>, <code>T_UNLOCKED_TO_LOCKED</code>, <code>T_LOCKED_TO_UNLOCKED</code>.</p> <p>Each mover is in one of three states, \"open\", \"closed\" or \"moving\". Keyframe <code>0</code> (or <code>S_OPEN</code> when using the visual's animation) corresponds to the \"open\" state while the last keyframe (or <code>S_CLOSED</code>) corresponds to the \"closed\" state. When transitioning between the \"open\" and \"closed\" states, the mover is in the \"moving\" state during which it sequentially moves between its keyframes (or runs the <code>T_CLOSED_2_OPEN</code> or <code>T_OPEN_TO_CLOSED</code> animations). Movers with their <code>moverBehavior</code> set to <code>NSTATE_SINGLE_KEYS</code> are an exception to this rule: each keyframe can individually be addressed as a state.</p> <p>Movers are specialized triggers. Before beginning their animation, movers first filter the incoming events as per the <code>zCTrigger</code>'s rules and only start the animation if the event passes through the filters. When the mover reaches the \"open\" state after being activated, it emits an <code>OnTrigger</code> event according to the fire behavior set for the <code>zCTrigger</code>. Similarly, when it reaches the \"closed\" state it emits an <code>OnUntrigger</code> event.</p> <p>Movers can be enabled and disabled using the <code>OnEnable</code>, <code>OnDisable</code> and <code>OnToggleDisabled</code> events.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCMover<ul> <li>Mover<ul> <li>moverBehavior = 2STATE_TOGGLE</li> <li>touchBlockerDamage = 0.0</li> <li>stayOpenTimeSec = 0.0</li> <li>moverLocked = FALSE</li> <li>autoLinkEnabled = FALSE</li> <li>Keyframe<ul> <li>numKeyframes = 0</li> <li>moveSpeed = 0.0</li> <li>posLerpType = CURVE</li> <li>speedType = CONST</li> </ul> </li> <li>Sound<ul> <li>sfxOpenStart = \"\"</li> <li>sfxOpenEnd = \"\"</li> <li>sfxMoving = \"\"</li> <li>sfxCloseStart = \"\"</li> <li>sfxCloseEnd = \"\"</li> <li>sfxLock = \"\"</li> <li>sfxUnlock = \"\"</li> <li>sfxUseLocked = \"\"</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCMover<ul> <li>Mover<ul> <li>moverBehavior = 2STATE_TOGGLE</li> <li>touchBlockerDamage = 0.0</li> <li>stayOpenTimeSec = 0.0</li> <li>moverLocked = FALSE</li> <li>autoLinkEnabled = FALSE</li> <li>autoRotate = FALSE</li> <li>Keyframe<ul> <li>numKeyframes = 0</li> <li>moveSpeed = 0.0</li> <li>posLerpType = CURVE</li> <li>speedType = CONST</li> </ul> </li> <li>Sound<ul> <li>sfxOpenStart = \"\"</li> <li>sfxOpenEnd = \"\"</li> <li>sfxMoving = \"\"</li> <li>sfxCloseStart = \"\"</li> <li>sfxCloseEnd = \"\"</li> <li>sfxLock = \"\"</li> <li>sfxUnlock = \"\"</li> <li>sfxUseLocked = \"\"</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCMover<ul> <li>Mover<ul> <li>moverBehavior = 2STATE_TOGGLE</li> <li>touchBlockerDamage = 0.0</li> <li>stayOpenTimeSec = 0.0</li> <li>moverLocked = FALSE</li> <li>autoLinkEnabled = FALSE</li> <li>Keyframe<ul> <li>numKeyframes = 0</li> <li>moveSpeed = 0.0</li> <li>posLerpType = CURVE</li> <li>speedType = CONST</li> </ul> </li> <li>actKeyPosDelta = 0 0 0</li> <li>actKeyframeF = 0.0</li> <li>actKeyframe = 0</li> <li>nextKeyframe = 0</li> <li>moveSpeedUnit = 0.0 </li> <li>advanceDir = 0.0</li> <li>moverState = ?</li> <li>numTriggerEvents = 0</li> <li>stayOpenTimeDest = 0.0</li> <li>Sound<ul> <li>sfxOpenStart = \"\"</li> <li>sfxOpenEnd = \"\"</li> <li>sfxMoving = \"\"</li> <li>sfxCloseStart = \"\"</li> <li>sfxCloseEnd = \"\"</li> <li>sfxLock = \"\"</li> <li>sfxUnlock = \"\"</li> <li>sfxUseLocked = \"\"</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCMover<ul> <li>Mover<ul> <li>moverBehavior = 2STATE_TOGGLE</li> <li>touchBlockerDamage = 0.0</li> <li>stayOpenTimeSec = 0.0</li> <li>moverLocked = FALSE</li> <li>autoLinkEnabled = FALSE</li> <li>autoRotate = FALSE</li> <li>Keyframe<ul> <li>numKeyframes = 0</li> <li>moveSpeed = 0.0</li> <li>posLerpType = CURVE</li> <li>speedType = CONST</li> </ul> </li> <li>actKeyPosDelta = 0 0 0</li> <li>actKeyframeF = 0.0</li> <li>actKeyframe = 0</li> <li>nextKeyframe = 0</li> <li>moveSpeedUnit = 0.0 </li> <li>advanceDir = 0.0</li> <li>moverState = ?</li> <li>numTriggerEvents = 0</li> <li>stayOpenTimeDest = 0.0</li> <li>Sound<ul> <li>sfxOpenStart = \"\"</li> <li>sfxOpenEnd = \"\"</li> <li>sfxMoving = \"\"</li> <li>sfxCloseStart = \"\"</li> <li>sfxCloseEnd = \"\"</li> <li>sfxLock = \"\"</li> <li>sfxUnlock = \"\"</li> <li>sfxUseLocked = \"\"</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCMover/#properties","title":"Properties","text":""},{"location":"engine/objects/zCMover/#moverbehavior","title":"<code>moverBehavior</code>","text":"<p>Controls how the mover behaves in response to events (\"activation\").</p> <ul> <li><code>2STATE_TOGGLE</code> \u2014 Receiving either event causes the state of the mover to swap. The direction   of the animation is reversed.</li> <li><code>2STATE_TRIGGER_CTRL</code> \u2014 An <code>OnTrigger</code> causes the mover to transition to the \"open\" state while an <code>OnUntrigger</code>   event causes the mover to transition to the \"closed\" state.</li> <li><code>2STATE_OPEN_TIMED</code> \u2014 An <code>OnTrigger</code> event causes the mover to transition to the \"open\" state. It than transitions   to the \"closed\" state after a fixed amount of time specified by <code>stayOpenTimeSec</code>.</li> <li><code>NSTATE_LOOP</code> \u2014  The mover opens and closes in a loop indefinitely.</li> <li><code>NSTATE_SINGLE_KEYS</code> \u2014 The mover can transition to each keyframe separately. Often used in conjunction   with a <code>zCMoverController</code>.</li> </ul>"},{"location":"engine/objects/zCMover/#touchblockerdamage","title":"<code>touchBlockerDamage</code>","text":"The amount of damage to deal to objects in the way of the mover."},{"location":"engine/objects/zCMover/#stayopentimesec","title":"<code>stayOpenTimeSec</code>","text":"<p>The number of seconds a mover with the <code>2STATE_OPEN_TIMED</code> behavior stays in the \"open\" state until transitioning to the \"closed\" state again.</p> <p>Warning</p> <p>Only relevant if <code>moverBehavior</code> is <code>2STATE_OPEN_TIMED</code>.</p>"},{"location":"engine/objects/zCMover/#moverlocked","title":"<code>moverLocked</code>","text":"Unclear."},{"location":"engine/objects/zCMover/#autolinkenabled","title":"<code>autoLinkEnabled</code>","text":"<p>Determines whether the position of the object triggering the mover should be tied to the mover's position.</p> <ul> <li><code>TRUE</code> \u2014 When the mover transitions, the position of the triggering object follows the position of the mover.</li> <li><code>FALSE</code> \u2014 The triggering object's position is uncoupled from the position of the mover.</li> </ul>"},{"location":"engine/objects/zCMover/#autorotate","title":"<code>autoRotate</code>","text":"<p>Whether to automatically rotate the mover along its movement trajectory. For example, this is used for making fish always face in the direction they're moving.</p> <ul> <li><code>TRUE</code> \u2014 Automatically face the mover forward along its trajectory.</li> <li><code>FALSE</code> \u2014 Never automatically rotate the mover.</li> </ul> <p>Warning</p> <p>Only available in Gothic II.</p>"},{"location":"engine/objects/zCMover/#numkeyframes","title":"<code>numKeyframes</code>","text":"Unclear."},{"location":"engine/objects/zCMover/#movespeed","title":"<code>moveSpeed</code>","text":"<p>The movement speed for transitioning between keyframes in units per millisecond.</p> <p>Warning</p> <p>Only relevant if manually specified keyframes are used. Ignored when using the visual for the animation.</p>"},{"location":"engine/objects/zCMover/#poslerptype","title":"<code>posLerpType</code>","text":"<p>Defines how the mover should interpolate between the keyframe positions. Only affects the mover's position, never its rotation.</p> <ul> <li><code>CURVE</code> \u2014 Smoothly transition between keyframes.</li> <li><code>LINEAR</code> \u2014 Linearly transition between keyframes.</li> </ul> <p>Warning</p> <p>Only relevant if manually specified keyframes are used. Ignored when using the visual for the animation.</p>"},{"location":"engine/objects/zCMover/#speedtype","title":"<code>speedType</code>","text":"<p>Controls the acceleration and deceleration behavior of the mover.</p> <ul> <li><code>CONST</code> \u2014 Mover with a constant speed.</li> <li><code>SLOW_START_END</code> \u2014 Slowly accelerate at the first keyframe and decelerate at the last keyframe.</li> <li><code>SLOW_START</code> \u2014 Slowly accelerate at the first keyframe but don't decelerate at the end.</li> <li><code>SLOW_END</code> \u2014 Slowly decelerate at the last keyframe but don't accelerate at the start.</li> <li><code>SEG_SLOW_START_END</code> \u2014 Slowly accelerate at the beginning of each keyframe and decelerate at the end of each keyframe.</li> <li><code>SEG_SLOW_START</code> \u2014 Slowly accelerate at the beginning of each keyframe but don't decelerate at the end.</li> <li><code>SEG_SLOW_END</code> \u2014 Slowly decelerate at the end of each keyframe but don't accelerate at the beginning.</li> </ul> <p>Warning</p> <p>Only relevant if manually specified keyframes are used. Ignored when using the visual for the animation.</p>"},{"location":"engine/objects/zCMover/#sfxopenstart","title":"<code>sfxOpenStart</code>","text":"The name of the sound to play at the beginning of the opening sequence."},{"location":"engine/objects/zCMover/#sfxopenend","title":"<code>sfxOpenEnd</code>","text":"The name of the sound to play at the end of the opening sequence."},{"location":"engine/objects/zCMover/#sfxmoving","title":"<code>sfxMoving</code>","text":"The name of the sound to play in a loop while the mover is transitioning between keyframes."},{"location":"engine/objects/zCMover/#sfxclosestart","title":"<code>sfxCloseStart</code>","text":"The name of the sound to play at the beginning of the closing sequence."},{"location":"engine/objects/zCMover/#sfxcloseend","title":"<code>sfxCloseEnd</code>","text":"The name of the sound to play at the end of the closing sequence."},{"location":"engine/objects/zCMover/#sfxlock","title":"<code>sfxLock</code>","text":"The name of the sound to play when locking a mover."},{"location":"engine/objects/zCMover/#sfxunlock","title":"<code>sfxUnlock</code>","text":"The name of the sound to play when unlocking a mover."},{"location":"engine/objects/zCMover/#sfxuselocked","title":"<code>sfxUseLocked</code>","text":"The name of the sound to play when using a locked mover."},{"location":"engine/objects/zCMover/#actkeyposdelta","title":"<code>actKeyPosDelta</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#actkeyframef","title":"<code>actKeyframeF</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#actkeyframe","title":"<code>actKeyframe</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#nextkeyframe","title":"<code>nextKeyframe</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#movespeedunit","title":"<code>moveSpeedUnit</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#advancedir","title":"<code>advanceDir</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#moverstate","title":"<code>moverState</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#numtriggerevents","title":"<code>numTriggerEvents</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMover/#stayopentimedest","title":"<code>stayOpenTimeDest</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCMoverController/","title":"zCMoverControler","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCMoverControler</code> Version Identifiers: \u2014 Gothic I: <code>0</code> \u2014 Gothic II: <code>0</code> ZenKit Class: <code>VMoverController</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject used to control <code>zCMover</code> objects of type <code>NSTATE_SINGLE_KEYS</code> specifically. <code>zCMoverControler</code> objects react to incoming <code>OnTrigger</code> events to send a pre-configured event to the target mover object named by the <code>triggerTarget</code> propery, controlling its animation. Mover  controllers can make movers go to a specific keyframe in their animation or just step one keyframe back and forth  at a time.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMoverControler<ul> <li>moverMessage = GOTO_KEY_FIXED_DIRECTLY</li> <li>gotoFixedKey = 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMoverControler<ul> <li>moverMessage = GOTO_KEY_FIXED_DIRECTLY</li> <li>gotoFixedKey = 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMoverControler<ul> <li>moverMessage = GOTO_KEY_FIXED_DIRECTLY</li> <li>gotoFixedKey = 0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCMoverControler<ul> <li>moverMessage = GOTO_KEY_FIXED_DIRECTLY</li> <li>gotoFixedKey = 0</li> </ul> </li> </ul>"},{"location":"engine/objects/zCMoverController/#properties","title":"Properties","text":""},{"location":"engine/objects/zCMoverController/#movermessage","title":"<code>moverMessage</code>","text":"<p>The type of event to emit to the <code>triggerTarget</code> when this controller receives an <code>OnTrigger</code> event.</p> <ul> <li><code>GOTO_KEY_FIXED_DIRECTLY</code> \u2014 Make the target mover directly go to the keyframe specified   in <code>gotoFixedKey</code>, skipping all intermediate keyframes.</li> <li><code>GOTO_KEY_FIXED_ORDER</code> \u2014 Make the target mover go to the keyframe specified in in <code>gotoFixedKey</code>   while still going through all intermediate keyframes.</li> <li><code>GOTO_KEY_NEXT</code> \u2014 Make the target mover go to the next keyframe in sequence. Wraps around to the first keyframe.</li> <li><code>GOTO_KEY_PREV</code> \u2014 Make the target mover go to the previous keyframe in sequence. Wraps around to the last keyframe.</li> </ul>"},{"location":"engine/objects/zCMoverController/#gotofixedkey","title":"<code>gotoFixedKey</code>","text":"<p>The keyframe of the mover referred to by <code>triggerTarget</code> to move to.</p> <p>Warning</p> <p>Only relevant if <code>moverMessage</code> is <code>GOTO_KEY_FIXED_DIRECTLY</code> or <code>GOTO_KEY_FIXED_ORDER</code>.</p>"},{"location":"engine/objects/zCPFXController/","title":"zCPFXController","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCPFXControler</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VParticleEffectController</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A particle system in virtual space. Its effect can be activated and deactivated using the <code>OnTrigger</code> and <code>OnUntrigger</code> events.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCPFXController<ul> <li>pfxName = \"\"</li> <li>killVobWhenDone = TRUE</li> <li>pfxStartOn = TRUE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCPFXController<ul> <li>pfxName = \"\"</li> <li>killVobWhenDone = TRUE</li> <li>pfxStartOn = TRUE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCPFXController<ul> <li>pfxName = \"\"</li> <li>killVobWhenDone = TRUE</li> <li>pfxStartOn = TRUE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCPFXController<ul> <li>pfxName = \"\"</li> <li>killVobWhenDone = TRUE</li> <li>pfxStartOn = TRUE</li> </ul> </li> </ul>"},{"location":"engine/objects/zCPFXController/#properties","title":"Properties","text":""},{"location":"engine/objects/zCPFXController/#pfxname","title":"<code>pfxName</code>","text":"The name of the particle effect. Corresponds to a <code>.ZEN</code> file containing the particle system definition."},{"location":"engine/objects/zCPFXController/#killvobwhendone","title":"<code>killVobWhenDone</code>","text":"Disable the particle effect after it runs once."},{"location":"engine/objects/zCPFXController/#pfxstarton","title":"<code>pfxStartOn</code>","text":"<p>Whether to start the particle effect when the level is loaded.</p> <ul> <li><code>TRUE</code> \u2014 Start the particle effect when loading the world.</li> <li><code>FALSE</code> \u2014  Don't start the particle effect automatically.</li> </ul>"},{"location":"engine/objects/zCTouchDamage/","title":"zCTouchDamage","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTouchDamage</code> Version Identifiers: \u2014 Gothic I: <code>36865</code> \u2014 Gothic II: <code>36865</code> ZenKit Class: <code>VTouchDamage</code> Source: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject which damages other VObjects colliding with it.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage<ul> <li>TouchDamage<ul> <li>damage = 0</li> <li>DamageType<ul> <li>Barrier = TRUE</li> <li>Blunt = FALSE</li> <li>Edge = FALSE</li> <li>Fire = FALSE</li> <li>Fly = FALSE</li> <li>Magic = FALSE</li> <li>Point = FALSE</li> <li>Fall = FALSE</li> </ul> </li> <li>damageRepeatDelaySec = 0</li> <li>damageVolDownScale = 0</li> <li>damageCollType = BOX</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage<ul> <li>TouchDamage<ul> <li>damage = 0</li> <li>DamageType<ul> <li>Barrier = TRUE</li> <li>Blunt = FALSE</li> <li>Edge = FALSE</li> <li>Fire = FALSE</li> <li>Fly = FALSE</li> <li>Magic = FALSE</li> <li>Point = FALSE</li> <li>Fall = FALSE</li> </ul> </li> <li>damageRepeatDelaySec = 0</li> <li>damageVolDownScale = 0</li> <li>damageCollType = BOX</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage<ul> <li>TouchDamage<ul> <li>damage = 0</li> <li>DamageType<ul> <li>Barrier = TRUE</li> <li>Blunt = FALSE</li> <li>Edge = FALSE</li> <li>Fire = FALSE</li> <li>Fly = FALSE</li> <li>Magic = FALSE</li> <li>Point = FALSE</li> <li>Fall = FALSE</li> </ul> </li> <li>damageRepeatDelaySec = 0</li> <li>damageVolDownScale = 0</li> <li>damageCollType = BOX</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCTouchDamage<ul> <li>TouchDamage<ul> <li>damage = 0</li> <li>DamageType<ul> <li>Barrier = TRUE</li> <li>Blunt = FALSE</li> <li>Edge = FALSE</li> <li>Fire = FALSE</li> <li>Fly = FALSE</li> <li>Magic = FALSE</li> <li>Point = FALSE</li> <li>Fall = FALSE   {: .sp-bool}zCCodeMaster.md</li> </ul> </li> <li>damageRepeatDelaySec = 0</li> <li>damageVolDownScale = 0</li> <li>damageCollType = BOX</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCTouchDamage/#properties","title":"Properties","text":""},{"location":"engine/objects/zCTouchDamage/#damage","title":"<code>damage</code>","text":"The amount of damage being dealt."},{"location":"engine/objects/zCTouchDamage/#barrier","title":"<code>Barrier</code>","text":"<code>TRUE</code> \u2014 Deal barrier damage. <code>FALSE</code> \u2014 Do not deal barrier damage."},{"location":"engine/objects/zCTouchDamage/#blunt","title":"<code>Blunt</code>","text":"<code>TRUE</code> \u2014 Deal blunt damage (blunt weapons). <code>FALSE</code> \u2014 Do not deal blunt damage."},{"location":"engine/objects/zCTouchDamage/#edge","title":"<code>Edge</code>","text":"<code>TRUE</code> \u2014 Deal edge damage (sharp weapons). <code>FALSE</code> \u2014 Do not deal edge damage."},{"location":"engine/objects/zCTouchDamage/#fire","title":"<code>Fire</code>","text":"<code>TRUE</code> \u2014 Deal fire damage. <code>FALSE</code> \u2014 Do not deal fire damage."},{"location":"engine/objects/zCTouchDamage/#fly","title":"<code>Fly</code>","text":"<code>TRUE</code> \u2014 Deal knockout damage. <code>FALSE</code> \u2014 Do not deal knockout damage."},{"location":"engine/objects/zCTouchDamage/#magic","title":"<code>Magic</code>","text":"<code>TRUE</code> \u2014 Deal magic damage. <code>FALSE</code> \u2014 Do not deal magic damage."},{"location":"engine/objects/zCTouchDamage/#point","title":"<code>Point</code>","text":"<code>TRUE</code> \u2014 Deal point damage (bows and crossbows). <code>FALSE</code> \u2014 Do not deal point damage."},{"location":"engine/objects/zCTouchDamage/#fall","title":"<code>Fall</code>","text":"<code>TRUE</code> \u2014 Deal fall damage. <code>FALSE</code> \u2014 Do not deal fall damage."},{"location":"engine/objects/zCTouchDamage/#damagerepeatdelaysec","title":"<code>damageRepeatDelaySec</code>","text":"The delay between damage ticks when applying continuous damage. If set to <code>0</code>, only deals the damage once per collision. If set to a value greater than <code>0</code>, deals damage every <code>damageRepeatDelaySec</code> seconds."},{"location":"engine/objects/zCTouchDamage/#damagevoldownscale","title":"<code>damageVolDownScale</code>","text":"A scale value used in conjunction with <code>damageCollType</code>. Its function depends on the type of collision detection used."},{"location":"engine/objects/zCTouchDamage/#damagecolltype","title":"<code>damageCollType</code>","text":"<p>The type of collision detection to use for damage calculations.</p> <ul> <li><code>NONE</code> \u2014 Disable collision detection and thus damage application.</li> <li><code>BOX</code> \u2014 Scale the <code>bbox3dws</code> of the <code>zCTouchDamage</code> object by   <code>damageVolDownScale</code> and use this new bounding box to calculate   collisions with other VObjects</li> <li><code>POINT</code> \u2014 Scale the <code>bbox3dws</code> of the colliding object by   <code>damageVolDownScale</code> and only deal damage if it contains the center   point of the <code>zCTouchDamage</code> object. If the <code>visual</code> of the <code>zCTouchDamage</code>   object is a particle effect, test against every particle instead.</li> </ul>"},{"location":"engine/objects/zCTrigger/","title":"zCTrigger","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTrigger</code> Version Identifiers: \u2014 Gothic I: <code>47105</code> \u2014 Gothic II: <code>47105</code> ZenKit Class: <code>VTrigger</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>VObject to process and relay specific filtered events. When a <code>zCTrigger</code> receives an <code>OnTrigger</code>, <code>OnDamage</code>, or  <code>OnTouch</code> event it checks whether the event source (an <code>oCNpc</code>, the player or another VObject) should be acknowledged (see <code>respondToNPC</code>, <code>respondToPC</code> and <code>respondToObject</code> respectively). It then verifies if it should react to the specific event by checking the <code>reactToOnTrigger</code>, <code>reactToOnDamage</code> and <code>reactToOnTouch</code> properties. If both checks succeed, an <code>OnTrigger</code> event is sent to the <code>triggerTarget</code> and the trigger is considered to be activated. <code>zCTrigger</code> objects can be enabled and disabled by firing <code>OnEnable</code>, <code>OnDisable</code> and <code>OnToggleEnabled</code> events at them.</p> <p>Tip</p> <p>The <code>respondTo{Object,PC,NPC,VobName}</code> properties are logically linked by and \"or\" expression.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger<ul> <li>Trigger<ul> <li>ActivationFilter<ul> <li>reactToOnTrigger = TRUE</li> <li>reactToOnTouch = TRUE</li> <li>reactToOnDamage = TRUE</li> <li>respondToObject = TRUE</li> <li>respondToPC = TRUE</li> <li>respondToNPC = TRUE</li> <li>startEnabled = TRUE</li> <li>respondToVobName = \"\"</li> <li>numCanBeActivated = -1</li> <li>retriggerWaitSec = 0</li> <li>damageThreshold = 0</li> </ul> </li> <li>FireBehavior<ul> <li>fireDelaySec = 0</li> <li>sendUntrigger = TRUE</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger<ul> <li>Trigger<ul> <li>ActivationFilter<ul> <li>reactToOnTrigger = TRUE</li> <li>reactToOnTouch = TRUE</li> <li>reactToOnDamage = TRUE</li> <li>respondToObject = TRUE</li> <li>respondToPC = TRUE</li> <li>respondToNPC = TRUE</li> <li>startEnabled = TRUE</li> <li>respondToVobName = \"\"</li> <li>numCanBeActivated = -1</li> <li>retriggerWaitSec = 0</li> <li>damageThreshold = 0</li> </ul> </li> <li>FireBehavior<ul> <li>fireDelaySec = 0</li> <li>sendUntrigger = TRUE</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger<ul> <li>Trigger<ul> <li>ActivationFilter<ul> <li>reactToOnTrigger = TRUE</li> <li>reactToOnTouch = TRUE</li> <li>reactToOnDamage = TRUE</li> <li>respondToObject = TRUE</li> <li>respondToPC = TRUE</li> <li>respondToNPC = TRUE</li> <li>startEnabled = TRUE</li> <li>respondToVobName = \"\"</li> <li>numCanBeActivated = -1</li> <li>retriggerWaitSec = 0</li> <li>damageThreshold = 0</li> </ul> </li> <li>FireBehavior<ul> <li>fireDelaySec = 0</li> <li>sendUntrigger = TRUE</li> </ul> </li> <li>nextTimeTriggerable = 0.0</li> <li>savedOtherVob = NULL</li> <li>countCanBeActivated</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger<ul> <li>Trigger<ul> <li>ActivationFilter<ul> <li>reactToOnTrigger = TRUE</li> <li>reactToOnTouch = TRUE</li> <li>reactToOnDamage = TRUE</li> <li>respondToObject = TRUE</li> <li>respondToPC = TRUE</li> <li>respondToNPC = TRUE</li> <li>startEnabled = TRUE</li> <li>respondToVobName = \"\"</li> <li>numCanBeActivated = -1</li> <li>retriggerWaitSec = 0</li> <li>damageThreshold = 0</li> </ul> </li> <li>FireBehavior<ul> <li>fireDelaySec = 0</li> <li>sendUntrigger = TRUE</li> </ul> </li> <li>nextTimeTriggerable = 0.0</li> <li>savedOtherVob = NULL</li> <li>countCanBeActivated = 0</li> <li>isEnabled = TRUE</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCTrigger/#properties","title":"Properties","text":""},{"location":"engine/objects/zCTrigger/#reacttoontrigger","title":"<code>reactToOnTrigger</code>","text":"<p>Whether this trigger should react to <code>OnTrigger</code> events.</p> <ul> <li><code>TRUE</code> \u2014 Do react to <code>OnTrigger</code> events by sending an <code>OnTrigger</code> message to the <code>triggerTarget</code>   If <code>sendUntrigger</code> is set to <code>TRUE</code>, also sends an <code>OnUntrigger</code> event to the <code>triggerTarget</code>   if the trigger receives an <code>OnUntrigger</code> event.</li> <li><code>FALSE</code> \u2014 Ignore <code>OnTrigger</code> events.</li> </ul>"},{"location":"engine/objects/zCTrigger/#reacttoontouch","title":"<code>reactToOnTouch</code>","text":"<p>Whether this trigger should react to <code>OnTouch</code> events.</p> <ul> <li><code>TRUE</code> \u2014 Do react to <code>OnTouch</code> events by sending an <code>OnTrigger</code> message to the <code>triggerTarget</code>   If <code>sendUntrigger</code> is set to <code>TRUE</code>, also sends an <code>OnUntrigger</code> event to the <code>triggerTarget</code>   if the trigger receives an <code>OnUntouch</code> event.</li> <li><code>FALSE</code> \u2014 Ignore <code>OnTouch</code> events.</li> </ul>"},{"location":"engine/objects/zCTrigger/#reacttoondamage","title":"<code>reactToOnDamage</code>","text":"<p>Whether this trigger should react to <code>OnDamage</code> events.</p> <ul> <li><code>TRUE</code> \u2014 Do react to <code>OnDamage</code> events by sending an <code>OnTrigger</code> message to the <code>triggerTarget</code></li> <li><code>FALSE</code> \u2014 Ignore <code>OnDamage</code> events.</li> </ul>"},{"location":"engine/objects/zCTrigger/#respondtoobject","title":"<code>respondToObject</code>","text":"<p>Whether this trigger should process events coming from inanimate objects.</p> <ul> <li><code>TRUE</code> \u2014 Do process events from inanimate objects.</li> <li><code>FALSE</code> \u2014 Ignore events from inanimate objects.</li> </ul>"},{"location":"engine/objects/zCTrigger/#respondtopc","title":"<code>respondToPC</code>","text":"<p>Whether this trigger should process events coming from the player.</p> <ul> <li><code>TRUE</code> \u2014 Do process events from the player.</li> <li><code>FALSE</code> \u2014 Ignore events from the player.</li> </ul>"},{"location":"engine/objects/zCTrigger/#respondtonpc","title":"<code>respondToNPC</code>","text":"<p>Whether this trigger should process events coming from NPCs.</p> <ul> <li><code>TRUE</code> \u2014 Do process events from NPCs.</li> <li><code>FALSE</code> \u2014 Ignore events from NPCs.</li> </ul>"},{"location":"engine/objects/zCTrigger/#startenabled","title":"<code>startEnabled</code>","text":"<p>Determines whether the trigger is initially enabled. Enabled triggers will process incoming events and send outgoing events while disabled triggers do not. Triggers can be activated and deactivated at runtime by sending them <code>OnEnable</code>, <code>OnDisable</code> or <code>OnToggleEnabled</code> events.</p> <ul> <li><code>TRUE</code> \u2014 Enable the trigger when the world is loaded.</li> <li><code>FALSE</code> \u2014 Do not enable the trigger when the world is loaded.</li> </ul>"},{"location":"engine/objects/zCTrigger/#respondtovobname","title":"<code>respondToVobName</code>","text":"Whether this trigger should process events coming from VObjects with this name. If empty, match no VObject name directly."},{"location":"engine/objects/zCTrigger/#numcanbeactivated","title":"<code>numCanBeActivated</code>","text":"The number of times the trigger will process incoming events. If set to <code>-1</code> the trigger will process an infinite number of events."},{"location":"engine/objects/zCTrigger/#retriggerwaitsec","title":"<code>retriggerWaitSec</code>","text":"The number of seconds that have to elapse after processing an event before the trigger will process additional events. All events received by the trigger during that time are ignored."},{"location":"engine/objects/zCTrigger/#damagethreshold","title":"<code>damageThreshold</code>","text":"The amount of damage which must be dealt for the trigger to react to an <code>OnDamage</code> event."},{"location":"engine/objects/zCTrigger/#firedelaysec","title":"<code>fireDelaySec</code>","text":"The number of seconds to wait before emitting the <code>OnTrigger</code> event after processing."},{"location":"engine/objects/zCTrigger/#senduntrigger","title":"<code>sendUntrigger</code>","text":"Whether to send and <code>OnUntrigger</code> event to the <code>triggerTarget</code> after the trigger receives an <code>OnUntrigger</code> or <code>OnUntouch</code> event. Only fires the <code>OnUntrigger</code> event if <code>reactToOnTrigger</code> and <code>reactToOnTouch</code> are set to <code>TRUE</code> respectively."},{"location":"engine/objects/zCTrigger/#nexttimetriggerable","title":"<code>nextTimeTriggerable</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCTrigger/#savedothervob","title":"<code>savedOtherVob</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCTrigger/#countcanbeactivated","title":"<code>countCanBeActivated</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCTrigger/#isenabled","title":"<code>isEnabled</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games made using Gothic II.</p>"},{"location":"engine/objects/zCTriggerBase/","title":"zCTriggerBase","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTriggerBase</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: \u2014</p> <p>The base class for many triggers.</p> <p>Warning</p> <p>This object is an abstract base class and cannot be instantiated by itself.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase<ul> <li>triggerTarget = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase<ul> <li>triggerTarget = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase<ul> <li>triggerTarget = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase<ul> <li>triggerTarget = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/zCTriggerBase/#properties","title":"Properties","text":""},{"location":"engine/objects/zCTriggerBase/#triggertarget","title":"<code>triggerTarget</code>","text":"The name of VObject to send <code>OnTrigger</code> and <code>OnUntrigger</code> events to after processing."},{"location":"engine/objects/zCTriggerList/","title":"zCTriggerList","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTriggerList</code> Version Identifiers: \u2014 Gothic I: <code>59776</code> \u2014 Gothic II: <code>5505</code> ZenKit Class: <code>VTriggerList</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A special trigger which emits the <code>OnTrigger</code> events emitted by the <code>zCTrigger</code> to multiple targets. How the events are sent can be configured through <code>listProcess</code>. The <code>triggerTarget</code> and <code>fireDelaySec</code> properties of <code>zCTrigger</code> should be ignored.</p> <p><code>OnUntrigger</code> events sent to the trigger list are propagated to all targets in the list.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCTriggerList<ul> <li>TriggerList<ul> <li>listProcess = LP_ALL</li> <li>triggerTarget0 = \"\"</li> <li>fireDelay0 = 0</li> <li>triggerTarget1 = \"\"</li> <li>fireDelay1 = 0</li> <li>triggerTarget2 = \"\"</li> <li>fireDelay2 = 0</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCTriggerList<ul> <li>TriggerList<ul> <li>listProcess = LP_ALL</li> <li>triggerTarget0 = \"\"</li> <li>fireDelay0 = 0</li> <li>triggerTarget1 = \"\"</li> <li>fireDelay1 = 0</li> <li>triggerTarget2 = \"\"</li> <li>fireDelay2 = 0</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCTriggerList<ul> <li>TriggerList<ul> <li>listProcess = LP_ALL</li> <li>triggerTarget0 = \"\"</li> <li>fireDelay0 = 0</li> <li>triggerTarget1 = \"\"</li> <li>fireDelay1 = 0</li> <li>triggerTarget2 = \"\"</li> <li>fireDelay2 = 0</li> <li>actTarget = 0</li> <li>sendOnTrigger = TRUE</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTrigger</li> <li>zCTriggerList<ul> <li>TriggerList<ul> <li>listProcess = LP_ALL</li> <li>triggerTarget0 = \"\"</li> <li>fireDelay0 = 0</li> <li>triggerTarget1 = \"\"</li> <li>fireDelay1 = 0</li> <li>triggerTarget2 = \"\"</li> <li>fireDelay2 = 0</li> <li>actTarget = 0</li> <li>sendOnTrigger = TRUE</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCTriggerList/#properties","title":"Properties","text":""},{"location":"engine/objects/zCTriggerList/#listprocess","title":"<code>listProcess</code>","text":"<p>Controls how events are sent to the targets.</p> <ul> <li><code>LP_ALL</code> \u2014 Every target in the trigger list is sent the <code>OnTrigger</code> event sequentially. The <code>fireDelay</code>   of each target is taken into account so that target <code>n</code> is fired after <code>sum(fireDelay0, ..., fireDelayN-1)</code> seconds.</li> <li><code>LP_NEXT_ONE</code> \u2014 The event is sent to the next target in the list.</li> <li><code>LP_RAND_ONE</code> \u2014 The event is sent to a random target in the list.</li> </ul>"},{"location":"engine/objects/zCTriggerList/#triggertarget","title":"<code>triggerTarget</code>","text":"The name of the VObject to send events to. Behaves like <code>triggerTarget</code>."},{"location":"engine/objects/zCTriggerList/#firedelay","title":"<code>fireDelay</code>","text":"The delay after which to fire the event to the target. Behaves like <code>fireDelaySec</code>."},{"location":"engine/objects/zCTriggerList/#acttarget","title":"<code>actTarget</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCTriggerList/#sendontrigger","title":"<code>sendOnTrigger</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCTriggerUntouch/","title":"zCTriggerUntouch","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTriggerUntouch</code> Version Identifiers: \u2014 Gothic I: <code>52224</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VTriggerUntouch</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A trigger which fires an <code>OnTrigger</code> event to its <code>triggerTarget</code> if any <code>OnUntouch</code>  event is emitted from an inanimate object within the object's bounding box.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerUntouch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerUntouch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerUntouch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerUntouch<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCTriggerWorldStart/","title":"zCTriggerWorldStart","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCTriggerWorldStart</code> Version Identifiers: \u2014 Gothic I: <code>52224</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VTriggerWorldStart</code> Sources: \u2014 spacerhilfedatei.sph</p> <p>A special trigger which fires an <code>OnTrigger</code> event to its <code>triggerTarget</code> when the  world is loaded and started.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerWorldStart<ul> <li>fireOnlyFirstTime = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerWorldStart<ul> <li>fireOnlyFirstTime = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerWorldStart<ul> <li>fireOnlyFirstTime = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCTriggerBase</li> <li>zCTriggerWorldStart<ul> <li>fireOnlyFirstTime = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/zCTriggerWorldStart/#properties","title":"Properties","text":""},{"location":"engine/objects/zCTriggerWorldStart/#fireonlyfirsttime","title":"<code>fireOnlyFirstTime</code>","text":"<p>Determines whether to fire the <code>OnTrigger</code> event only the first time the world is loaded.</p> <ul> <li><code>TRUE</code> \u2014 Only fire the event if this is the first time the world is loaded.</li> <li><code>FALSE</code> \u2014 Fire the event every time the world is loaded.</li> </ul>"},{"location":"engine/objects/zCVisual/","title":"zCVisual","text":"<p>The base class for visual objects in the game world. It itself does not have any additional properties. The following visuals exist but also don't have any properties associated with them:</p> <ul> <li>zCMesh</li> <li>zCProgMeshProto</li> <li>zCParticleFX</li> <li>zCAICamera</li> <li>zCModel</li> <li>zCMorphMesh</li> </ul> <p>The only visual which has additional data associated with it is zCDecal.</p>"},{"location":"engine/objects/zCVob/","title":"zCVob","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVob</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VirtualObject</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Represents so-called virtual objects which appear in the game world. <code>zCVob</code> is the base class for all virtual objects which include everything from static models like boxes to interactive elements like doors and chests and invisible trigger objects. They are also referred to as VObjects in this documentation.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob<ul> <li>Internals<ul> <li>pack = 0</li> <li>presetName = \"\"</li> <li>bbox3DWS = 0 0 0 0 0 0</li> <li>trafoOSToWSRot = 0</li> <li>trafoOSToWSPOS = 0 0 200</li> </ul> </li> <li>Vob<ul> <li>vobName = \"\"</li> <li>visual = \"\"</li> <li>showVisual = TRUE</li> <li>visualCamAlign = NONE</li> <li>cdStatic = FALSE</li> <li>cdDyn = FALSE</li> <li>staticVob = FALSE</li> <li>dynShadow = DS_NONE</li> </ul> </li> <li>visual = NULL</li> <li>ai = NULL</li> </ul> </li> </ul> <ul> <li>zCVob<ul> <li>Internals<ul> <li>pack = 0</li> <li>presetName = \"\"</li> <li>bbox3DWS = 0 0 0 0 0 0</li> <li>trafoOSToWSRot = 0</li> <li>trafoOSToWSPOS = 0 0 200</li> </ul> </li> <li>Vob<ul> <li>vobName = \"\"</li> <li>visual = \"\"</li> <li>showVisual = TRUE</li> <li>visualCamAlign = NONE</li> <li>visualAniMode = NONE</li> <li>visualAniModeStrength = 0.0</li> <li>vobFarClipZScale = 1.0</li> <li>cdStatic = FALSE</li> <li>cdDyn = FALSE</li> <li>staticVob = FALSE</li> <li>dynShadow = DS_NONE</li> <li>zbias = 1</li> <li>isAmbient = FALSE</li> </ul> </li> <li>visual = NULL</li> <li>ai = NULL</li> </ul> </li> </ul> <ul> <li>zCVob<ul> <li>Internals<ul> <li>pack = 0</li> <li>presetName = \"\"</li> <li>bbox3DWS = 0 0 0 0 0 0</li> <li>trafoOSToWSRot = 0</li> <li>trafoOSToWSPOS = 0 0 200</li> </ul> </li> <li>Vob<ul> <li>vobName = \"\"</li> <li>visual = \"\"</li> <li>showVisual = TRUE</li> <li>visualCamAlign = NONE</li> <li>cdStatic = FALSE</li> <li>cdDyn = FALSE</li> <li>staticVob = FALSE</li> <li>dynShadow = DS_NONE</li> </ul> </li> <li>visual = NULL</li> <li>ai = NULL</li> <li>sleepMode = 0</li> <li>nextOnTimer = 0.0</li> </ul> </li> </ul> <ul> <li>zCVob<ul> <li>Internals<ul> <li>pack = 0</li> <li>presetName = \"\"</li> <li>bbox3DWS = 0 0 0 0 0 0</li> <li>trafoOSToWSRot = 0</li> <li>trafoOSToWSPOS = 0 0 200</li> </ul> </li> <li>Vob<ul> <li>vobName = \"\"</li> <li>visual = \"\"</li> <li>showVisual = TRUE</li> <li>visualCamAlign = NONE</li> <li>visualAniMode = NONE</li> <li>visualAniModeStrength = 0.0</li> <li>vobFarClipZScale = 1.0</li> <li>cdStatic = FALSE</li> <li>cdDyn = FALSE</li> <li>staticVob = FALSE</li> <li>dynShadow = DS_NONE</li> <li>zbias = 1</li> <li>isAmbient = FALSE</li> </ul> </li> <li>visual = NULL</li> <li>ai = NULL</li> <li>sleepMode = 0</li> <li>nextOnTimer = 0.0</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVob/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVob/#pack","title":"<code>pack</code>","text":"Internal property which indicates how the data associated with this VObject is stored. Can not be changed in the Spacer and is inaccessible in ZenKit."},{"location":"engine/objects/zCVob/#presetname","title":"<code>presetName</code>","text":"The name of the template used to create this VObject in the Spacer. Exposed as a normal field by ZenKit."},{"location":"engine/objects/zCVob/#bbox3dws","title":"<code>bbox3DWS</code>","text":"<p>The 3-dimensional bounding box of this VObject to be used for collision detection. This is used in conjunction with <code>cdStatic</code> and <code>cdDyn</code> to detect whether two VObject are colliding. Depending on the kind of VObject collision with it may do different things which are documented for each VObject separately.</p> <p>The bounding box is described by two opposite diagonal points in 3D world space coordinates.</p>"},{"location":"engine/objects/zCVob/#trafoostowsrot","title":"<code>trafoOSToWSRot</code>","text":"The rotation of this VObject in world space, represented by a 3x3 rotation matrix."},{"location":"engine/objects/zCVob/#trafoostowspos","title":"<code>trafoOSToWSPos</code>","text":"The coordinates of this VObject in world space."},{"location":"engine/objects/zCVob/#vobname","title":"<code>vobName</code>","text":"The name of this VObject. VObject names are not necessarily unique but are sometimes helpful for identifying them. For some VObjects, like zCVobSpot or zCTrigger setting the <code>vobName</code> is required"},{"location":"engine/objects/zCVob/#visual","title":"<code>visual</code>","text":"<p>The name of the visual component associated with this VObject. This is usually the name of a file containing the data for a visual object. The following file formats are supported:</p> <ul> <li><code>*.3DS</code> \u2014 Static models</li> <li><code>*.PFX</code> \u2014 Particle effects</li> <li><code>*.TGA</code> \u2014 Textures</li> <li><code>*.MDS</code>, <code>.ASC</code> \u2014 Interactive or rigged models</li> <li><code>*.MMS</code> \u2014 Morph-mesh animated models</li> </ul>"},{"location":"engine/objects/zCVob/#showvisual","title":"<code>showVisual</code>","text":"Indicates whether this VObject should display its associated visual.  <code>TRUE</code> \u2014 Display the visual. <code>FALSE</code> \u2014 Hide the visual."},{"location":"engine/objects/zCVob/#visualcamalign","title":"<code>visualCamAlign</code>","text":"<p>Indicates how this VObject should be aligned in relation to the camera. This may be used with grass or flowers which only consist of a 2-dimensional sprite to have it always face the camera, for example. Possible value are</p> <ul> <li><code>NONE</code> \u2014 The sprite is not affected by the camera's rotation.</li> <li><code>YAW</code> \u2014 The sprite rotates with the camera's yaw axis.</li> <li><code>FULL</code> \u2014 The sprite rotates alonside the camera.</li> </ul>"},{"location":"engine/objects/zCVob/#visualanimode","title":"<code>visualAniMode</code>","text":"<p>The type of wind animation to apply to the VObject. One of</p> <ul> <li><code>NONE</code> \u2014 No wave animation.</li> <li><code>WIND</code> \u2014 Indicates that the object should be animated as if shifting in strong wind. Used mostly for animating   grass and other small foliage.</li> <li><code>WIND2</code> \u2014 Indicates that the object should be animated as if shifting in light wind. Used mostly for animating trees.</li> </ul> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCVob/#visualanimodestrength","title":"<code>visualAniModeStrength</code>","text":"<p>Indicates the strength of the animation set through <code>visualAniMode</code>. This value is ignored if <code>visualAniMode</code> is set to <code>NONE</code>.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCVob/#vobfarclipzscale","title":"<code>vobFarClipZScale</code>","text":"<p>Indicates the draw distance of this VObject. Its value should be between 0 and 2. 0 Means, that this object is never drawn on screen but collisions are still calculated. A value of 2 means, that the draw distance of this VObject is the same as the draw distance specified in the <code>zCZoneVobFarPlane</code> object.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCVob/#cdstatic","title":"<code>cdStatic</code>","text":"<p>Indicates whether this VObject should collide with other VObjects. This is used for placing the object in the ZenGin map editor, the Spacer, where it will prevent the VObject being placed wither other VObjects. This setting is irrelevant for runtime collision detection.</p> <ul> <li><code>TRUE</code> \u2014 Collide with all other VObjects.</li> <li><code>FALSE</code> \u2014 Don't collide with other static VObjects.</li> </ul>"},{"location":"engine/objects/zCVob/#cddyn","title":"<code>cdDyn</code>","text":"<p>Indicates whether this VObject should collide with dynamic objects. For this purpose, dynamic objects are the player, NPCs and items. If this flag is set, implementations should apply collision detection to this VObject.</p> <ul> <li><code>TRUE</code> \u2014 Collide with dynamic VObjects.</li> <li><code>FALSE</code> \u2014 Don't collide with dynamic VObjects.</li> </ul>"},{"location":"engine/objects/zCVob/#staticvob","title":"<code>staticVob</code>","text":"<p>Indicates whether this VObject should be included during static lighting calculations. These lighting calculations are done at compile-time and will bake VObjects with this flag into the light-maps available from the world mesh.</p> <ul> <li><code>TRUE</code> \u2014 Exclude this VObject from dynamic lighting calculations.</li> <li><code>FALSE</code> \u2014 Include this VObject in dynamic lighting calculations.</li> </ul>"},{"location":"engine/objects/zCVob/#dynshadow","title":"<code>dynShadow</code>","text":"<p>The type of dynamic shadow to be used for this VObject.</p> <ul> <li><code>DS_NONE</code> \u2014 The VObject does not cast any shadow.</li> <li><code>DS_BLOB</code> \u2014 The VObject casts a dark circle at its base.</li> </ul>"},{"location":"engine/objects/zCVob/#zbias","title":"<code>zbias</code>","text":"<p>The depth-bias for this VObject. This value is passed directly to Direct3D when rendering the associated visual of this VObject. Sadly, because documentation is not available for the very old Direct3D version used by the ZenGin, the exact behavior it would have resulted in are unknown.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCVob/#isambient","title":"<code>isAmbient</code>","text":"<p>Indicates that this VObject is ambient. It looks like this VObject setting was a system used during development when access to the game's source code was available. Basically, the global variable <code>zCWorld::s_bAmbientVobsEnabled</code> could be used to hide or show VObjects which have the <code>isAmbient</code> flag set. In release builds, this variable is always set to <code>true</code>, thus the <code>isAmbient</code> flag does not have any perceivable effect on the game. It follows, that this field should be ignored by most implementations.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCVob/#sleepmode","title":"<code>sleepMode</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCVob/#nextontimer","title":"<code>nextOnTimer</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCVob/#hierarchy","title":"Hierarchy","text":"<p>The following list shows the virtual object class hierarchy. Click on any of the VObjects to see more details.</p> <ul> <li>zCVob<ul> <li>zCVobSpot</li> <li>zCVobStair</li> <li>zCVobStartpoint</li> <li>zCVobLevelCompo</li> <li>zCCSCamera</li> <li>zCCamTrj_KeyFrame</li> <li>zCVobLight</li> <li>zCVobAnimate</li> <li>oCItem</li> <li>zCVobLensFlare</li> <li>zCPFXController</li> <li>zCMessageFilter</li> <li>zCCodeMaster</li> <li>zCMoverController</li> <li>oCTouchDamage</li> <li>zCEarthquake</li> <li>oCNpc</li> <li>zCVobScreenFX</li> <li>oCMOB<ul> <li>oCMobInter<ul> <li>oCMobFire</li> <li>oCMobContainer</li> <li>oCMobDoor</li> <li>oCMobLadder</li> <li>oCMobSwitch</li> <li>oCMobWheel</li> <li>oCMobBed</li> </ul> </li> </ul> </li> <li>zCVobSound<ul> <li>zCVobSoundDaytime</li> </ul> </li> <li>zCTrigger<ul> <li>oCCSTrigger</li> <li>zCMover</li> <li>zCTriggerList</li> <li>oCTriggerScript</li> <li>oCTriggerChangeLevel</li> </ul> </li> <li>zCTriggerWorldStart</li> <li>zCTriggerUntouch</li> <li>oCZoneMusic<ul> <li>oCZoneMusicDefault</li> </ul> </li> <li>zCZoneVobFarPlane<ul> <li>zCZoneVobFarPlaneDefault</li> </ul> </li> <li>zCZoneZFog<ul> <li>zCZoneZFogDefault</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobAnimate/","title":"zCVobAnimate","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobAnimate</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VAnimate</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>A VObject used to create animated models. The visual of such objects can either be a morph mesh or a model with a skeletal animation (i.e. a model script). The animation of these objects can be started and stopped using <code>OnTrigger</code> and <code>OnUntrigger</code> events.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobAnimate<ul> <li>startOn = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobAnimate<ul> <li>startOn = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobAnimate<ul> <li>startOn = \"\"</li> <li>isRunning = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobAnimate<ul> <li>startOn = \"\"</li> <li>isRunning = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobAnimate/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVobAnimate/#starton","title":"<code>startOn</code>","text":"<p>Whether to start this animation when loading the level.</p> <ul> <li><code>TRUE</code> \u2014 Immediately start the animation when the level is loaded.</li> <li><code>FALSE</code> \u2014 Don't automatically start the animation.</li> </ul>"},{"location":"engine/objects/zCVobAnimate/#isrunning","title":"<code>isRunning</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCVobLensFlare/","title":"zCVobLensFlare","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobLensFlare</code> Version Identifiers: \u2014 Gothic I: <code>64704</code> \u2014 Gothic II: <code>193</code> ZenKit Class: <code>VLensFlare</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Represents a lens flare effect. Behaves exactly like the base <code>zCVob</code> but has a lens flare effect.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobLensFlare<ul> <li>lensflareFX = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobLensFlare<ul> <li>lensflareFX = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobLensFlare<ul> <li>lensflareFX = \"\"</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobLensFlare<ul> <li>lensflareFX = \"\"</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobLensFlare/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVobLensFlare/#lensflarefx","title":"<code>lensflareFX</code>","text":"The name of the lens flare effect. Must be one of the effects listed in <code>/_work/data/Presets/Lensflare.zen</code>."},{"location":"engine/objects/zCVobLevelCompo/","title":"zCVobLevelCompo","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobLevelCompo</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VLevel</code> Sources: \u2014 gothic-library.ru</p> <p>Used as root objects of game levels. Only used to group together other VObjects. Only one of the <code>zCVobLevelCompo</code> objects will have a visual which corresponds to the mesh of the world it exists in. Generally, it can be ignored and has no relevance to other VObjects in the hierarchy.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCVobLevelCompo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLevelCompo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLevelCompo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLevelCompo<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobLight/","title":"zCVobLight","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobLight</code> Version Identifiers: \u2014 Gothic I: <code>46080</code> \u2014 Gothic II: <code>39168</code> ZenKit Class: <code>VLight</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Represents a virtual light source which lights up nearby game objects. Point and spot light sources are supported and may be animated with different colors and ranges.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCVobLight<ul> <li>VobLight<ul> <li>lightPresetInUse = \"\"</li> <li>lightType = POINT</li> <li>range = 0</li> <li>color = 255 255 255 255</li> <li>spotConeAngle = 0</li> <li>lightStatic = TRUE</li> <li>lightQuality = HIGH</li> <li>lensflareFX = \"\"</li> </ul> </li> <li>Dynamic Light<ul> <li>turnedOn = TRUE</li> <li>rangeAniScale = \"\"</li> <li>rangeAniFPS = 0</li> <li>rangeAniSmooth = TRUE</li> <li>colorAniList = \"\"</li> <li>colorAniFPS = 0</li> <li>colorAniSmooth = TRUE</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLight<ul> <li>VobLight<ul> <li>lightPresetInUse = \"\"</li> <li>lightType = POINT</li> <li>range = 0</li> <li>color = 255 255 255 255</li> <li>spotConeAngle = 0</li> <li>lightStatic = TRUE</li> <li>lightQuality = HIGH</li> <li>lensflareFX = \"\"</li> </ul> </li> <li>Dynamic Light<ul> <li>turnedOn = TRUE</li> <li>rangeAniScale = \"\"</li> <li>rangeAniFPS = 0</li> <li>rangeAniSmooth = TRUE</li> <li>colorAniList = \"\"</li> <li>colorAniFPS = 0</li> <li>colorAniSmooth = TRUE</li> <li>canMove = FALSE</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLight<ul> <li>VobLight<ul> <li>lightPresetInUse = \"\"</li> <li>lightType = POINT</li> <li>range = 0</li> <li>color = 255 255 255 255</li> <li>spotConeAngle = 0</li> <li>lightStatic = TRUE</li> <li>lightQuality = HIGH</li> <li>lensflareFX = \"\"</li> </ul> </li> <li>Dynamic Light<ul> <li>turnedOn = TRUE</li> <li>rangeAniScale = \"\"</li> <li>rangeAniFPS = 0</li> <li>rangeAniSmooth = TRUE</li> <li>colorAniList = \"\"</li> <li>colorAniFPS = 0</li> <li>colorAniSmooth = TRUE</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobLight<ul> <li>VobLight<ul> <li>lightPresetInUse = \"\"</li> <li>lightType = POINT</li> <li>range = 0</li> <li>color = 255 255 255 255</li> <li>spotConeAngle = 0</li> <li>lightStatic = TRUE</li> <li>lightQuality = HIGH</li> <li>lensflareFX = \"\"</li> </ul> </li> <li>Dynamic Light<ul> <li>turnedOn = TRUE</li> <li>rangeAniScale = \"\"</li> <li>rangeAniFPS = 0</li> <li>rangeAniSmooth = TRUE</li> <li>colorAniList = \"\"</li> <li>colorAniFPS = 0</li> <li>colorAniSmooth = TRUE</li> <li>canMove = FALSE</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobLight/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVobLight/#lightpresetinuse","title":"<code>lightPresetInUse</code>","text":"The name of the selected light template. Templates can be found in <code>_work/data/Presets/LightPresets.zen</code>. This property is irrelevant for most use-cases."},{"location":"engine/objects/zCVobLight/#lighttype","title":"<code>lightType</code>","text":"<p>The type of the light source. One of:</p> <ul> <li><code>POINT</code> \u2014 A point light source.</li> <li><code>SPOT</code> \u2014 A spot light source.</li> </ul>"},{"location":"engine/objects/zCVobLight/#range","title":"<code>range</code>","text":"The range in which this light source illuminates objects."},{"location":"engine/objects/zCVobLight/#color","title":"<code>color</code>","text":"The color of this light source in RGBA form."},{"location":"engine/objects/zCVobLight/#spotconeangle","title":"<code>spotConeAngle</code>","text":"The angle of the beam cone for spotlights. Only relevant if <code>lightType</code> is <code>SPOT</code>, ignored otherwise."},{"location":"engine/objects/zCVobLight/#lightstatic","title":"<code>lightStatic</code>","text":"<p>Determines whether this is a static light or not. Static lights are baked into the world when its lighting is compiled. This makes static lights faster at runtime, but it also means, that they cannot change in any way after the world is compiled.</p> <ul> <li><code>TRUE</code> \u2014 This light is a static light.</li> <li><code>FALSE</code> \u2014 This light is a dynamic light.</li> </ul>"},{"location":"engine/objects/zCVobLight/#lightquality","title":"<code>lightQuality</code>","text":"<p>Determines the quality of the light source. What exactly changes with these values is unknown.</p> <ul> <li><code>HIGH</code> \u2014 Highest quality.</li> <li><code>MEDIUM</code> \u2014 Medium quality.</li> <li><code>LOW_FASTEST</code> \u2014 Low quality (used for almost all lights).</li> </ul>"},{"location":"engine/objects/zCVobLight/#lensflarefx","title":"<code>lensflareFX</code>","text":"The name of the lensflare effect associated with this light. Empty if there is no associated lensflare effect."},{"location":"engine/objects/zCVobLight/#turnedon","title":"<code>turnedOn</code>","text":"<p>Whether this dynamic light is turned on.</p> <ul> <li><code>TRUE</code> \u2014 The light is turned on.</li> <li><code>FALSE</code> \u2014 The light is turned off.</li> </ul> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#rangeaniscale","title":"<code>rangeAniScale</code>","text":"<p>Frames for the light's range animation. Its value is a space-separated list of floats where each float is one key frame of the animation. A value of <code>1.0</code> corresponds to the initial <code>range</code> of the light source, a value of <code>2.0</code> corresponds to double the initial <code>range</code> and a value of <code>0.5</code> means half the initial <code>range</code>. The range animation is further controlled by <code>rangeAniFPS</code> and <code>rangeAniSmooth</code>.</p> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#rangeanifps","title":"<code>rangeAniFPS</code>","text":"<p>The speed of the range animation in frames per second. The animation frames are defined in <code>rangeAniScale</code></p> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#rangeanismooth","title":"<code>rangeAniSmooth</code>","text":"<p>Whether the range animation should smoothly interpolate between keyframes.</p> <ul> <li><code>TRUE</code> \u2014 Turn on interpolation.</li> <li><code>FALSE</code> \u2014 Turn off interpolation.</li> </ul> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#coloranilist","title":"<code>colorAniList</code>","text":"<p>Frames for the light's color animation. Its value is a space-separated list of colors where each element can either be an RGB color consisting of three integers enclosed by parentheses or a greyscale color consisting of a single integer. For example: <code>(255 0 0) 100 (255 50 180)</code> would result in #ff0000 #646464, #ff32b4. The color animation is further controlled by <code>colorAniFPS</code> and <code>colorAniSmooth</code>.</p> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#coloranifps","title":"<code>colorAniFPS</code>","text":"<p>The speed of the color animation in frames per second. The animation frames are defined in <code>colorAniList</code></p> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#coloranismooth","title":"<code>colorAniSmooth</code>","text":"<p>Whether the color animation should smoothly interpolate between keyframes.</p> <ul> <li><code>TRUE</code> \u2014 Turn on interpolation.</li> <li><code>FALSE</code> \u2014 Turn off interpolation.</li> </ul> <p>Warning</p> <p>This value is only valid for dynamic lights. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobLight/#canmove","title":"<code>canMove</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This value is only valid for dynamic lights in Gothic II. Check <code>lightStatic</code> before use.</p>"},{"location":"engine/objects/zCVobScreenFX/","title":"zCVobScreenFX","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobScreenFX</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VScreenEffect</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Screen effect VObjects are used to create special effects. They are used for field-of-view changes, adding black bars for a cinematic feel to the game and other post-processing effects.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobScreenFX<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobScreenFX<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobScreenFX<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCEffect</li> <li>zCVobScreenFX<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobSound/","title":"zCVobSound","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobSound</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>12289</code> ZenKit Class: <code>VSound</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Emits a sound defined by a script instance in a given radius. The sound playback can be activated by sending an <code>OnTrigger</code> event to the VObject and sending an <code>OnUntrigger</code> event disables the sound playback.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound<ul> <li>Sound<ul> <li>sndVolume = 100</li> <li>sndMode = LOOPING</li> <li>sndRandDelay = 5</li> <li>sndRandDelayVar = 2</li> <li>sndStartOn = TRUE</li> <li>sndAmbient3D = FALSE</li> <li>sndObstruction = FALSE</li> <li>sndConeAngle = 0</li> <li>sndVolType = SPHERE</li> <li>sndRadius = 1200</li> <li>sndName = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound<ul> <li>Sound<ul> <li>sndVolume = 100</li> <li>sndMode = LOOPING</li> <li>sndRandDelay = 5</li> <li>sndRandDelayVar = 2</li> <li>sndStartOn = TRUE</li> <li>sndAmbient3D = FALSE</li> <li>sndObstruction = FALSE</li> <li>sndConeAngle = 0</li> <li>sndVolType = SPHERE</li> <li>sndRadius = 1200</li> <li>sndName = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound<ul> <li>Sound<ul> <li>sndVolume = 100</li> <li>sndMode = LOOPING</li> <li>sndRandDelay = 5</li> <li>sndRandDelayVar = 2</li> <li>sndStartOn = TRUE</li> <li>sndAmbient3D = FALSE</li> <li>sndObstruction = FALSE</li> <li>sndConeAngle = 0</li> <li>sndVolType = SPHERE</li> <li>sndRadius = 1200</li> <li>sndName = \"\"</li> </ul> </li> <li>soundIsRunning = FALSE</li> <li>soundAllowedToRun = FALSE</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound<ul> <li>Sound<ul> <li>sndVolume = 100</li> <li>sndMode = LOOPING</li> <li>sndRandDelay = 5</li> <li>sndRandDelayVar = 2</li> <li>sndStartOn = TRUE</li> <li>sndAmbient3D = FALSE</li> <li>sndObstruction = FALSE</li> <li>sndConeAngle = 0</li> <li>sndVolType = SPHERE</li> <li>sndRadius = 1200</li> <li>sndName = \"\"</li> </ul> </li> <li>soundIsRunning = FALSE</li> <li>soundAllowedToRun = FALSE</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobSound/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVobSound/#sndvolume","title":"<code>sndVolume</code>","text":"The volume of the sound effect in percent (0-100)."},{"location":"engine/objects/zCVobSound/#sndmode","title":"<code>sndMode</code>","text":"<p>Determines how the sound effect is played.</p> <ul> <li><code>LOOPING</code> \u2014 The sound effect is repeated endlessly</li> <li><code>ONCE</code> \u2014 The sound plays once</li> <li><code>RANDOM</code> \u2014 The sound effect is repeated endlessly with a random delay between repetitions</li> </ul>"},{"location":"engine/objects/zCVobSound/#sndranddelay","title":"<code>sndRandDelay</code>","text":"<p>The average delay between repetitions in seconds if <code>sndMode</code> is <code>RANDOM</code>.</p> <p>Warning</p> <p>Only relevant if <code>sndMode</code> is <code>RANDOM</code>.</p>"},{"location":"engine/objects/zCVobSound/#sndranddelayvar","title":"<code>sndRandDelayVar</code>","text":"<p>The maximum deviation of the random delay between repetitions if <code>sndMode</code> is <code>RANDOM</code>. The resulting delay will be a value between <code>sndRandDelay</code> \u00b1 <code>sndRandDelayVar</code>.</p> <p>Warning</p> <p>Only relevant if <code>sndMode</code> is <code>RANDOM</code>.</p>"},{"location":"engine/objects/zCVobSound/#sndstarton","title":"<code>sndStartOn</code>","text":"<p>Whether to start the sound when loading the world.</p> <ul> <li><code>TRUE</code> \u2014 Start the sound when the world is loaded</li> <li><code>FALSE</code> \u2014 Only start the sound in response to an <code>OnTrigger</code> event</li> </ul>"},{"location":"engine/objects/zCVobSound/#sndambient3d","title":"<code>sndAmbient3D</code>","text":"Determines whether the sound is an omnidirectional ambient sound. It will change volume depending on the distance to this VObject, but it won't sound as if this VObject is emitting the effect. <code>TRUE</code> \u2014 Emit an ambient sound effect. <code>FALSE</code> \u2014 Emit a directional sound effect."},{"location":"engine/objects/zCVobSound/#sndobstruction","title":"<code>sndObstruction</code>","text":"Whether to dampen the sound when there is no direct path from the VObject to the listener. <code>TRUE</code> \u2014 The sound is dampened by obstructions. <code>FALSE</code> \u2014 The sound is not dampened."},{"location":"engine/objects/zCVobSound/#sndconeangle","title":"<code>sndConeAngle</code>","text":"When set to a value other than <code>0</code>, determines a cone in front of the VObject in which the sound can be heard. To listeners outside of that cone, the sound is not heard. Only values between <code>0</code> and <code>360</code> are valid."},{"location":"engine/objects/zCVobSound/#sndvoltype","title":"<code>sndVolType</code>","text":"<p>Determines the type of volume used to check whether the sound can be heard.</p> <ul> <li><code>SV_SPHERE</code> \u2014 The sound the be heard in a sphere around this VObject.</li> <li><code>SV_ELLIPSOID</code> \u2014 The sound can be heard within an ellipsoid defined by the VObject's bounding box.</li> </ul>"},{"location":"engine/objects/zCVobSound/#sndradius","title":"<code>sndRadius</code>","text":"The radius in which the sound can be heard."},{"location":"engine/objects/zCVobSound/#sndname","title":"<code>sndName</code>","text":"The name of the script instance describing the sound."},{"location":"engine/objects/zCVobSound/#soundisrunning","title":"<code>soundIsRunning</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCVobSound/#soundallowedtorun","title":"<code>soundAllowedToRun</code>","text":"<p>Unknown.</p> <p>Warning</p> <p>This property is only available in saved games.</p>"},{"location":"engine/objects/zCVobSoundDaytime/","title":"zCVobSoundDaytime","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobSoundDaytime</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>12289</code> ZenKit Class: <code>VSoundDaytime</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Emits a sound defined by a script instance in a given radius during a given time during the day. Optionally, another sound can be defined which is played outside the defined time range (example: birds during the day and crickets at night). </p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound</li> <li>zCVobSoundDaytime<ul> <li>SoundDaytime<ul> <li>sndStartTime = 0</li> <li>sndEndTime = 0</li> <li>sndName2 = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound</li> <li>zCVobSoundDaytime<ul> <li>SoundDaytime<ul> <li>sndStartTime = 0</li> <li>sndEndTime = 0</li> <li>sndName2 = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound</li> <li>zCVobSoundDaytime<ul> <li>SoundDaytime<ul> <li>sndStartTime = 0</li> <li>sndEndTime = 0</li> <li>sndName2 = \"\"</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCVobSound</li> <li>zCVobSoundDaytime<ul> <li>SoundDaytime<ul> <li>sndStartTime = 0</li> <li>sndEndTime = 0</li> <li>sndName2 = \"\"</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobSoundDaytime/#properties","title":"Properties","text":""},{"location":"engine/objects/zCVobSoundDaytime/#sndstarttime","title":"<code>sndStartTime</code>","text":"The time of day after which the sound can be heard (<code>13.5</code> corresponds to <code>13:30</code>). Must be less than <code>sndEndTime</code>."},{"location":"engine/objects/zCVobSoundDaytime/#sndendtime","title":"<code>sndEndTime</code>","text":"The time of day after which the sound can no longer be heard (<code>13.5</code> corresponds to <code>13:30</code>). Must be greater than <code>sndStartTime</code>."},{"location":"engine/objects/zCVobSoundDaytime/#sndname2","title":"<code>sndName2</code>","text":"The name of the script instance describing the sound to play outside the hours defined by <code>sndStartTime</code> and <code>sndEndTime</code>. May be empty."},{"location":"engine/objects/zCVobSpot/","title":"zCVobSpot","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobSpot</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VSpot</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Spot objects are used to mark a position and orientation in virtual space. They are equivalent in function to way net free points and can be used in scripts to spawn other objects at their location.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCVobSpot<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobSpot<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobSpot<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobSpot<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCVobStair/","title":"zCVobStair","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobStair</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: Unused Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Used to mark staircase models in Gothic I only. This type of VObject was taken into account by the NPC pathfinding routines to properly ascend and descend staircases.</p> <p>Warning</p> <p>This VObject is only available in Gothic I.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCVobStair<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <p>Unavailable.</p> <ul> <li>zCVob</li> <li>zCVobStair<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <p>Unavailable.</p>"},{"location":"engine/objects/zCVobStartpoint/","title":"zCVobStartpoint","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCVobStartpoint</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VStartPoint</code> Sources: \u2014 spacerhilfedatei.sph \u2014 gothic-library.ru</p> <p>Marks the players initial position when loading in the game level. Behaves like <code>zCVobSpot</code> but causes the game to put the player at its location and in its orientation when the world is loaded.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCVobStartpoint<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobStartpoint<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobStartpoint<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCVobStartpoint<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCZone/","title":"zCZone","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCZone</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: \u2014</p> <p>The base class for effect zones.</p> <p>Warning</p> <p>This object is an abstract base class and cannot be instantiated by itself.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCZoneVobFarPlane/","title":"zCZoneVobFarPlane","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCZoneVobFarPlane</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VZoneFarPlane</code> Sources: \u2014 gothic-library.ru</p> <p>A VObject which defines the loading range of VObjects within its bounding box.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane<ul> <li>vobFarPlaneZ = 12000.0</li> <li>innerRangePerc = 0.0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane<ul> <li>vobFarPlaneZ = 12000.0</li> <li>innerRangePerc = 0.0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane<ul> <li>vobFarPlaneZ = 12000.0</li> <li>innerRangePerc = 0.0</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane<ul> <li>vobFarPlaneZ = 12000.0</li> <li>innerRangePerc = 0.0</li> </ul> </li> </ul>"},{"location":"engine/objects/zCZoneVobFarPlane/#properties","title":"Properties","text":""},{"location":"engine/objects/zCZoneVobFarPlane/#vobfarplanez","title":"<code>vobFarPlaneZ</code>","text":"The loading range of VObject within."},{"location":"engine/objects/zCZoneVobFarPlane/#innerrangeperc","title":"<code>innerRangePerc</code>","text":"Unknown."},{"location":"engine/objects/zCZoneVobFarPlaneDefault/","title":"zCZoneVobFarPlaneDefault","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCZoneVobFarPlaneDefault</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VZoneFarPlaneDefault</code> Sources: \u2014 gothic-library.ru</p> <p>A VObject which defines the default loading range of VObjects in the entire world. There may only be one of these objects in each world. Its effect can be overridden using zCZoneVobFarPlane objects.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane</li> <li>zCZoneVobFarPlane<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane</li> <li>zCZoneVobFarPlane<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane</li> <li>zCZoneVobFarPlane<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneVobFarPlane</li> <li>zCZoneVobFarPlane<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"engine/objects/zCZoneZFog/","title":"zCZoneZFog","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCZoneZFog</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VZoneFog</code> Sources: \u2014 gothic-library.ru</p> <p>A VObject which causes fog to appear within its bounding box.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog<ul> <li>ZoneZFog<ul> <li>fogRangeCenter = 0.0</li> <li>innerRangePerc = 0.0</li> <li>fogColor = 0 0 0</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog<ul> <li>ZoneZFog<ul> <li>fogRangeCenter = 0.0</li> <li>innerRangePerc = 0.0</li> <li>fogColor = 0 0 0</li> <li>fadeOutSky = FALSE</li> <li>overrideColor = FALSE</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog<ul> <li>ZoneZFog<ul> <li>fogRangeCenter = 0.0</li> <li>innerRangePerc = 0.0</li> <li>fogColor = 0 0 0</li> </ul> </li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog<ul> <li>ZoneZFog<ul> <li>fogRangeCenter = 0.0</li> <li>innerRangePerc = 0.0</li> <li>fogColor = 0 0 0</li> <li>fadeOutSky = FALSE</li> <li>overrideColor = FALSE</li> </ul> </li> </ul> </li> </ul>"},{"location":"engine/objects/zCZoneZFog/#properties","title":"Properties","text":""},{"location":"engine/objects/zCZoneZFog/#fograngecenter","title":"<code>fogRangeCenter</code>","text":"The maximum distance of visibility if the player is in the center of the fog object."},{"location":"engine/objects/zCZoneZFog/#innerrangeperc","title":"<code>innerRangePerc</code>","text":"Unknown."},{"location":"engine/objects/zCZoneZFog/#fogcolor","title":"<code>fogColor</code>","text":"The color of the fog."},{"location":"engine/objects/zCZoneZFog/#fadeoutsky","title":"<code>fadeOutSky</code>","text":"<p>Whether to hide the sky when the player is inside the fog.</p> <ul> <li><code>TRUE</code> \u2014 Do not show the skybox when the player is inside the fog.</li> <li><code>FALSE</code> \u2014 Do show the skybox when the player is inside the fog.</li> </ul> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCZoneZFog/#overridecolor","title":"<code>overrideColor</code>","text":"<p>Unclear.</p> <p>Warning</p> <p>This property is only available in Gothic II.</p>"},{"location":"engine/objects/zCZoneZFogDefault/","title":"zCZoneZFogDefault","text":"<p>Quick Infos</p> <p>Type: Virtual Object Format Name: ZenGin Archive File Extension: <code>.ZEN</code> Class Name: <code>zCZoneZFogDefault</code> Version Identifiers: \u2014 Gothic I: <code>12289</code> \u2014 Gothic II: <code>52224</code> ZenKit Class: <code>VZoneFogDefault</code> Sources: \u2014 gothic-library.ru</p> <p>A VObject which defines the default fog for the entire world. There may only be one of these objects in each world. Its effect can be overridden using zCZoneZFog objects.</p> Gothic 1Gothic 2Gothic 1 (Save)Gothic 2 (Save) <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog</li> <li>zCZoneZFogDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog</li> <li>zCZoneZFogDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog</li> <li>zCZoneZFogDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul> <ul> <li>zCVob</li> <li>zCZone</li> <li>zCZoneZFog</li> <li>zCZoneZFogDefault<ul> <li>&lt;empty&gt;</li> </ul> </li> </ul>"},{"location":"library/overview/","title":"Library Reference","text":"<p>Welcome to the ZenKit reference documentation. This page contains information about how to use ZenKit, a C++-library for parsing file formats used by the ZenGin, an early 2000's game engine developed by Piranha Bytes for the games Gothic and Gothic II.</p> <p>If you are new to ZenKit, a good place to start is the quickstart guide. If you are looking for information about a specific file type, the file type reference might be the place you're looking for.</p>"},{"location":"library/quickstart/","title":"Getting Started","text":""},{"location":"library/quickstart/#adding-zenkit-to-your-project","title":"Adding ZenKit to your project","text":"<p>To get started using ZenKit, you will first need to add it to your project as a library. The process of doing so is different between depending on which programming language you choose. Select the language of your choice below and continue.</p> C/C++C#JavaPython <p>ZenKit uses CMake as its build system and thus it may be integrated into existing CMake projects using CMake's FetchContent API or by adding it as a submodule. A system-wide installation via <code>cmake --install</code> is currently not supported.</p> <p>Adding ZenKit through FetchContent is the easiest way of obtaining a working copy of the library. To do this, simply add the following lines to your <code>CMakeLists.txt</code> file:</p> CMake<pre><code>include(ExternalProject)\nfind_package(Git REQUIRED)\n\nExternalProject_Add(\n        ZenKit\n        GIT_REPOSITORY https://github.com/GothicKit/ZenKit.git\n        UPDATE_COMMAND ${GIT_EXECUTABLE} pull\n        LOG_DOWNLOAD ON\n)\n</code></pre> <p>After doing this, you'll need to link against <code>zenkit</code> using the <code>target_link_libraries(your-target PRIVATE zenkit)</code> directive. With that, everything should be set up correctly for you to use ZenKit in your application.</p> <p>You can install <code>ZenKitCS</code> from the NuGet Package Gallery. Simply add the following snippet to your <code>.csproj</code> file, replacing the version with the approprite version identifier from NuGet.</p> Text Only<pre><code>&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"ZenKit\" Version=\"x.x.x\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p>To build your project then, you will need to add a <code>RuntimeIdentifiers</code> property to your <code>.csproj</code>. You can simply use this once and copy it the topmost <code>&lt;PropertyGroup&gt;</code> in your <code>.csproj</code> like this:</p> XML<pre><code>&lt;PropertyGroup&gt;\n    &lt;!-- ... --&gt;\n\n    &lt;RuntimeIdentifiers&gt;linux-x64;win-x64;osx-x64;android-arm64&lt;/RuntimeIdentifiers&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/PropertyGroup&gt;\n</code></pre> <p>You can now also build your project for those runtimes by supplying the runtime identifier in <code>dotnet build</code> using the <code>-r</code> parameter. This is how you would build your project for Android:</p> Text Only<pre><code>dotnet build -r android-arm64 -c Release --self-contained\n</code></pre> <p>You can integrate <code>ZenKit4J</code> into your Java project from Maven Central. Refer to its documentation about how to set it up with your package manager. No additional configuration is required.</p> <p>You can add <code>ZenKit4Py</code> to you Python project through Pip via PyPI:</p> Text Only<pre><code>pip install zenkit\n</code></pre> <p>No further action is required.</p> <p>Getting Help</p> <p>Feel free to ask any questions you might have over in the :material-github:/discussions section of the GitHub repository!</p>"},{"location":"library/quickstart/#a-basic-example","title":"A basic example","text":"<p>These are some basic examples of how to use ZenKit for each supported language. In this example, we load a <code>.VDF</code>-file into a <code>Vfs</code>, find a Font definition within it and load it into memory. The general mode of operation here is applicable to most assets that can be loaded using ZenKit</p> C++Python C++<pre><code>#include &lt;zenkit/Vfs.hh&gt;  // required to load VDF files\n#include &lt;zenkit/Font.hh&gt;  // required to load fonts\n\n#include &lt;iostream&gt;\n\nint main(int argc, const char** argv) {\n    if (argc &lt; 2) {\n        std::cerr &lt;&lt; \"please provide a textures.vdf file to read from\\n\";\n        return 1;\n    }\n\n    // Create a new Vfs\n    zenkit::Vfs vfs {};\n\n    // Load the VDF-file into the Vfs\n    vfs.mount_disk(argv[1]);\n\n    // Find the font file in the Vfs\n    zenkit::VfsNode const* font_file = vfs.find(\"font_default.fnt\");\n\n    // Make sure the entry actually exists\n    if (font_file == nullptr) {\n        std::cerr &lt;&lt; \"FONT_DEFAULT.FNT was not found in the VFS\\n\";\n        return 2;\n    }\n\n    // Open the file and parse a font from it\n    zenkit::Font font {};\n    font.load(font_file-&gt;open_read().get());\n\n    // Print out the associated texture name\n    std::cout &lt;&lt; \"The associated texture for FONT_DEFAULT.FNT is \\\"\" &lt;&lt; font.name &lt;&lt; \"\\\"\\n\";\n\n    return 0;\n}\n</code></pre> <p>To run this, compile it while linking against <code>zenkit</code> and execute the resulting binary in a terminal giving it the path to the <code>Data/textures.vdf</code> file in any Gothic or Gothic II installation:</p> Bash<pre><code>./a.out /path/to/gothic/Data/textures.VDF\n</code></pre> <p>More examples can be found in the :material-github:/examples/ directory of the project.</p> Python<pre><code>import sys\nfrom zenkit import Vfs, Font\n\ndef main() -&gt; int:\n    if len(sys.argv) &lt; 2:\n        print(\"please provide a textures.vdf file to read from\", file=sys.stderr)\n        return -1\n\n    vfs = Vfs()\n    vfs.mount_disk(sys.argv[1])\n\n    font_file = vfs.find(\"font_default.fnt\")\n    if font_file is None:\n        print(\"FONT_DEFAULT.FNT was not found in the VFS\", file=sys.stderr)\n        return -2\n\n    font = Font.load(font_file)\n    print(\"The associated texture for FONT_DEFAULT.FNT is \\\"\" + font.name + \"\\\"\")\n    return 0\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"library/reference/","title":"File Type Reference","text":"<p>The ZenGin uses a lot of custom file formats to store game data like meshes, animations and textures. Originally these custom formats for specifically made with Direct3D and later DirectX in mind and are thus sometimes confusing to understand or use some old, proprietary APIs common at the time. One example of this is DirectMusic which is used  or the in-game music.</p> <p>All files used by the ZenGin are binary files with the little-endian byte order or text files encoded with the Windows-1252 character set.</p>"},{"location":"library/reference/#1st-party-formats","title":"1st-party formats","text":"<p>The following is a list of file types and formats used by ZenGin.</p> Format Extension Description ZenKit Class Name Model Animation <code>.MAN</code> Contains animations for a model <code>ModelAnimation</code> Model Hierarchy <code>.MDH</code> Contains skeletal information for a model <code>ModelHierarchy</code> Model Mesh <code>.MDM</code> Contains the mesh of a model <code>ModelMesh</code> Model <code>.MDL</code> Contains a mesh and a hierarchy which make up a model <code>Model</code> Morph Mesh <code>.MMB</code> Contains a morph mesh with its mesh, skeleton and animation data <code>MorphMesh</code> Multi Resolution Mesh <code>.MRM</code> Contains a mesh with LOD information <code>MultiResolutionMesh</code> Mesh <code>.MSH</code> Contains mesh vertices and vertex features like materials <code>Mesh</code> Daedalus Script <code>.DAT</code> Contains a compiled Daedalus script <code>DaedalusScript</code> Texture <code>.TEX</code> Contains texture data in a variety of formats <code>Texture</code> Font <code>.FNT</code> Contains font data <code>Font</code> ZenGin Archive <code>.ZEN</code> Contains various structured data (general object persistence). <code>ReadArchive</code> Text/Cutscenes <code>.BIN</code>, <code>.CSL</code>, <code>.DAT</code>, <code>.LSC</code> Contains text and cutscene data <code>CutsceneLibrary</code> Model Script <code>.MDS</code>, <code>.MSB</code> Contains model animation script data and associated hierarchy and mesh information <code>ModelScript</code> Virtual File System <code>.VDF</code> Contains a directory structure containing multiple files; similar to TAR. <code>Vfs</code>"},{"location":"library/reference/#3rd-party-formats","title":"3rd-party formats","text":"<p>The ZenGin uses the following 3rd-party file formats:</p> <ul> <li>DirectMusic for the soundtrack</li> <li>DXT1, DXT3 and DXT5 for texture compression</li> <li>WAV for speech and sound effects</li> <li>TGA for uncompressed images</li> <li>Bink for cutscene videos</li> </ul> <p>For all of these, Open Source parsers are available, however some of them are no longer maintained. For DirectMusic there is libdmusic (unmaintained), for DXT decompression there is libsquish (unmaintained), stb can also decompress DXT-compressed files and can read in TGA files and the amazing ffmpeg can decode Bink video.</p>"},{"location":"library/api/archive/","title":"ZenGin Archives","text":"<p>The ZenGin Archive format is similar in concept to JSON or XML in that it is used to serialize nested data into a file which can be read later. There are three different kinds of archives called <code>ASCII</code>, <code>BINARY</code> and <code>BIN_SAFE</code> but the way these work exactly does not matter when using ZenKit.</p> <p>For detailed documentation on the inner workings of archives, see the ZenGin Reference.</p>"},{"location":"library/api/archive/#overview","title":"Overview","text":"<p>Like JSON, archives store values using a key-value structure where every key-value pair belongs to an object. Objects can also be nested. Unlike JSON, archives do not have first-class support for arrays, instead choosing a special type and encoding scheme. The class which is responsible for loading ZenGin Archives is called <code>zenkit::ReadArchive</code>.</p>"},{"location":"library/api/archive/#loading-an-archive","title":"Loading an archive","text":"<p>Since archives are an intermediate format, they are not loaded into memory. Rather, <code>zenkit::ReadArchive</code> functions as a high-level reader-like interface with which data can be read from the archive in a stream. To create one, simply call <code>zenkit::ReadArchive::from</code> (which is analogous to <code>zenkit::Read::from</code>) and start reading from it:</p> CC++C#JavaPython <p>Warning</p> <p>Archives are currently not supported with the C API.</p> Example<pre><code>#include &lt;zenkit/Archive.hh&gt;  // for `ReadArchive`\n#include &lt;zenkit/Stream.hh&gt;  // for `Read`\n\nint main(int, const char** argv) {\n    auto r = zenkit::Read::from(\"A.ZEN\");\n    auto ar = zenkit::ReadArchive::from(r.get());\n\n    // ...\n\n    return 0;\n}\n</code></pre> <p>Info</p> <p>As with all resources, archives can also be loaded from a virtual file system, passing the input obtained from <code>zenkit::VfsNode::open_read</code> into <code>zenkit::ReadArchive::from</code>.</p> <p>It must be noted in this case, however, that the unique pointer returned by <code>VfsNode::open_read</code> must be saved for the lifetime of <code>ar</code> since it is the data source for all read operations on it.</p> <p>Warning</p> <p>Archives are currently not supported with the C# API since it depends on the C wrapper.</p> <p>Warning</p> <p>Archives are currently not supported with the Java API since it depends on the C wrapper.</p> <p>Warning</p> <p>Archives are currently not supported with the Python API since it depends on the C wrapper.</p>"},{"location":"library/api/archive/#reading-from-an-archive","title":"Reading from an archive","text":"<p>ZenKit's implementation of ZenGin Archives is very bare-bones and does not provide a very rich interface. ZenKit will automatically determine the kind of archive but that's about it. Reading more data from it requires knowing the format you will be reading beforehand, no buffering or preloading of data is done. A more detailed explanation and demonstration can be found in the example below.</p> CC++C#JavaPython <p>Warning</p> <p>Archives are currently not supported with the C API.</p> Example<pre><code>#include &lt;zenkit/Archive.hh&gt;  // for `ReadArchive`\n#include &lt;zenkit/Stream.hh&gt;  // for `Read`\n\n#include &lt;iostream&gt;\n\nint main(int, const char** argv) {\n    // First, open the archive\n    auto buf = zenkit::Read::from(\"WORLD.ZEN\");\n    auto zen = zenkit::ReadArchive::from(buf.get());\n\n    // Second, read the definition of the root object.\n    //   Every archive has one object at its root which can be used to\n    //   identify what kind of data it is storing.\n    zenkit::ArchiveObject object {};\n\n    if (!zen-&gt;read_object_begin(object)) {\n        // If no object begins at the current position `read_object_begin`\n        // will return `false`.\n        std::cerr &lt;&lt; \"The root object was not found.\\n\";\n        return -1;\n    }\n\n    // Here, for example, we're checking whether the root object is a\n    // serialized game world.\n    if (object.class_name != \"oCWorld:zCWorld\") {\n        std::cerr &lt;&lt; \"This archive does not contain a serialized game world.\\n\";\n        return -1;\n    }\n\n    // From now on, we need to know the format worlds come in. It is not documented here\n    // but if necessary, the format of most objects can be found in ZenKit's source code.\n    //\n    // In this case, we know that worlds contain three sub-objects, one describing the\n    // world mesh, one containing the way-net and one containing all dynamic objects in\n    // the world.\n\n    while (!zen-&gt;read_object_end()) {\n        // `read_object_end` is used to read the end of an object. If it returns `false`,\n        // no object ends at the current position. It is required to `read_object_end`\n        // after reading all entries in that object.\n\n        zen-&gt;read_object_begin(object);\n\n        if (object.object_name == \"VobTree\") {\n            // Here, we're only interested in finding the sub-object containing the dynamic\n            // objects placed into the world.\n\n            // The VOb tree consists of more nested objects, each followed by an integer\n            // denoting the number entries following it which should be considered children\n            // of the VOb. The first integer denotes the number of root objects in the tree.\n\n            auto root_vobs = zen-&gt;read_int();\n\n            while (!zen-&gt;read_object_end()) {\n                zen-&gt;read_object_begin(object);\n\n                if (object.class_name == \"zCVob\") {\n                    // There is a whole system to the class names in the VOb tree but here,\n                    // to give an example, we're just interested in the basic `zCVob`. Also\n                    // there is a lot more data saved in the `zCVob` object but I will omit\n                    // most of it for brevity sake.\n                    //\n                    // So here's some of the types supported by archives read from one:\n\n                    auto packed = zen-&gt;read_int() != 0;\n                    auto preset_name = zen-&gt;read_string();\n                    auto bbox = zen-&gt;read_bbox();\n                    auto rotation = zen-&gt;read_mat3x3();\n                    auto position = zen-&gt;read_vec3();\n\n                    auto vob_name = zen-&gt;read_string();\n                    auto visual_name = zen-&gt;read_string();\n                    auto show_visual = zen-&gt;read_bool();\n                    auto camera_alignment = zen-&gt;read_enum();\n\n                   // As you can see, all fields must be read in order and with the correct type.\n                   // If the archive contains a field of type `int` but you try to `read_string()`,\n                   // ZenKit will throw an exception (as documented in the docstrings).\n                   //\n                   // For the full list of supported types, see the table below this example.\n                }\n\n                if (!zen-&gt;read_object_end()) {\n                     // (see below for an explanation)\n                     zen-&gt;skip_object(true);\n                }\n            }\n        }\n\n        // Now, we read the end of the current object.\n        if (!zen-&gt;read_object_end()) {\n            // But since this small example cannot parse the `WayNet` and `MeshAndBsp`\n            // objects of the world, we need to still make sure that the parser is in\n            // a sane state. `skip_object` can be used to fully ignore the next object\n            // in the archive or, if passed `true`, the object the parser is currently in.\n            //\n            // We pass `true` here, since we've already `read_object_begin` so the\n            // parser is now considered to be in the object we want to skip. Here, skipping\n            // the current object also has another great bonus: if, for some reason, one\n            // of the objects was not fully parsed, the remaining entries will be skipped\n            // so the parser is in a good state for the next iteration of the loop.\n            zen-&gt;skip_object(true);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>Supported data types:</p> Type Name Read Function Description <code>string</code> <code>read_string</code> A Windows-1252 encoded <code>std::string</code> <code>int</code> <code>read_int</code> A 32-bit signed integer <code>float</code> <code>read_float</code> An IEEE 754 floating point number <code>byte</code> <code>read_byte</code> An 8-bit unsigned integer <code>word</code> <code>read_word</code> A 16-bit unsigned integer <code>enum</code> <code>read_enum</code> A 32-bit unsigned integer <code>bool</code> <code>read_bool</code> A boolean value <code>color</code> <code>read_color</code> An <code>RGBA</code> color quad <code>vec3</code> <code>read_vec3</code> A 3-dimensional vector with floating point values <code>rawFloat</code> <code>read_bbox</code>, <code>read_mat3x3</code>, <code>read_vec2</code> A mathematical structure consisting of multiple floating point values <code>raw</code> <code>read_raw</code> A set of raw bytes, returned as a <code>zenkit::Read*</code> <p>Warning</p> <p>Archives are currently not supported with the C# API since it depends on the C wrapper.</p> <p>Warning</p> <p>Archives are currently not supported with the Java API since it depends on the C wrapper.</p> <p>Warning</p> <p>Archives are currently not supported with the Python API since it depends on the C wrapper.</p>"},{"location":"library/api/cutscene-library/","title":"Cutscene Libraries","text":"<p>Cutscene libraries, also called \"message databases\", contain voice lines and a reference to an associated audio recording. These files are used in conjunction with scripts to facilitate PC to NPC conversations in-game. Cutscene libraries are found within the <code>_work/data/scripts/content/cutscene/</code> directory of Gothic and Gothic II installations. </p> CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/CutsceneLibrary.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkCutsceneLibrary* csl = ZkCutsceneLibrary_loadPath(\"OU.csl\");\n    ZkCutsceneLibrary_del(csl);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountHost(vfs, \"_work/\", \"/\", ZkVfsOverwriteBehavior_OLDER);\n    csl = ZkCutsceneLibrary_loadVfs(vfs, \"OU.csl\");\n    ZkCutsceneLibrary_del(csl);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/CutsceneLibrary.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::CutsceneLibrary csl {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"OU.csl\");\n    csl.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_host(\"_work/\", \"/\", zenkit::VfsOverwriteBehavior::OLDER);\n\n    r = vfs-&gt;find(\"OU.csl\")-&gt;open_read();\n    font.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar csl = new CutsceneLibrary(\"OU.csl\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.Mount(\"_work/\", \"/\", VfsOverwriteBehavior.Older);\ncsl = new CutsceneLibrary(vfs, \"OU.csl\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.csl.CutsceneLibrary;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar csl = CutsceneLibrary.load(\"OU.csl\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mount(\"_work/\", \"/\", VfsOverwriteBehavior.OLDER);\ncsl = CutsceneLibrary.load(vfs, \"OU.csl\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, CutsceneLibrary\n\n# Load from a file on disk:\ncsl = CutsceneLibrary.load(\"OU.CSL\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_path(\"_work\", \"/\", clobber=VfsOverwriteBehavior.OLDER)\ncsl = CutsceneLibrary.load(vfs.find(\"OU.bin\"))\n</code></pre>"},{"location":"library/api/daedalus-script/","title":"Daedalus Scripts","text":"<p>Daedalus is the domain-specific compiled scripting language used by the ZenGin. Currently, ZenKit supports loading and executing compiled scripts using the <code>zenkit::DaedalusScript</code> API.</p>"},{"location":"library/api/daedalus-script/#loading-daedalus-scripts","title":"Loading Daedalus Scripts","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/DaedalusScript.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkDaedalusScript* script = ZkDaedalusScript_loadPath(\"MENU.DAT\");\n    ZkDaedalusScript_del(script);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountHost(vfs, \"_work/\", \"/\", ZkVfsOverwriteBehavior_OLDER);\n    script = ZkDaedalusScript_loadVfs(vfs, \"MENU.DAT\");\n    ZkDaedalusScript_del(csl);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/DaedalusScript.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::DaedalusScript script {};\n\n    auto r = zenkit::Read::from(\"MENU.DAT\");\n    script.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_host(\"_work/\", \"/\", zenkit::VfsOverwriteBehavior::OLDER);\n\n    r = vfs-&gt;find(\"MENU.DAT\")-&gt;open_read();\n    script.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar script = new DaedalusScript(\"MENU.DAT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.Mount(\"_work/\", \"/\", VfsOverwriteBehavior.Older);\nscript = new DaedalusScript(vfs, \"MENU.DAT\");\n</code></pre> Java<pre><code>import dev.gothickit.zenkit.daedalus.DaedalusScript;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar script = DaedalusScript.load(\"MENU.DAT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mount(\"_work/\", \"/\", VfsOverwriteBehavior.Older);\nscript = DaedalusScript.load(vfs, \"MENU.DAT\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, DaedalusScript\n\n# Load from a file on disk:\nscript = DaedalusScript.load(\"MENU.DAT\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_path(\"_work/\", \"/\", clobber=VfsOverwriteBehavior.OLDER)\nscript = DaedalusScript.load(vfs.find(\"MENU.DAT\"))\n</code></pre>"},{"location":"library/api/daedalus-vm/","title":"Daedalus VMs","text":""},{"location":"library/api/daedalus-vm/#loading-daedalus-vms","title":"Loading Daedalus VMs","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/DaedalusScript.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkDaedalusScript* script = ZkDaedalusScript_loadPath(\"MENU.DAT\");\n    ZkDaedalusScript_del(script);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountHost(vfs, \"_work/\", \"/\", ZkVfsOverwriteBehavior_OLDER);\n    script = ZkDaedalusScript_loadVfs(vfs, \"MENU.DAT\");\n    ZkDaedalusScript_del(csl);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/DaedalusScript.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::DaedalusScript script {};\n\n    auto r = zenkit::Read::from(\"MENU.DAT\");\n    script.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_host(\"_work/\", \"/\", zenkit::VfsOverwriteBehavior::OLDER);\n\n    r = vfs-&gt;find(\"MENU.DAT\")-&gt;open_read();\n    script.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar script = new DaedalusScript(\"MENU.DAT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.Mount(\"_work/\", \"/\", VfsOverwriteBehavior.Older);\nscript = new DaedalusScript(vfs, \"MENU.DAT\");\n</code></pre> Java<pre><code>import dev.gothickit.zenkit.daedalus.DaedalusScript;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar script = DaedalusScript.load(\"MENU.DAT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mount(\"_work/\", \"/\", VfsOverwriteBehavior.Older);\nscript = DaedalusScript.load(vfs, \"MENU.DAT\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, DaedalusScript\n\n# Load from a file on disk:\nscript = DaedalusScript.load(\"MENU.DAT\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_path(\"_work/\", \"/\", clobber=VfsOverwriteBehavior.OLDER)\nscript = DaedalusScript.load(vfs.find(\"MENU.DAT\"))\n</code></pre>"},{"location":"library/api/daedalus-vm/#using-the-daedalus-vm","title":"Using the Daedalus VM","text":"C++C#Python Example<pre><code>#include &lt;zenkit/DaedalusScript.hh&gt;\n#include &lt;zenkit/DaedalusVm.hh&gt;\n#include &lt;zenkit/Logger.hh&gt;\n#include &lt;zenkit/addon/daedalus.hh&gt;\n\n#include &lt;iostream&gt;\n\nint main(int argc, char** argv) {\nif (argc != 2) {\nstd::cerr &lt;&lt; \"Please provide a path to GOTHIC.DAT.\";\nreturn -1;\n}\n\n    zenkit::Logger::set_default(zenkit::LogLevel::DEBUG);\n\n    // Load the script file\n    zenkit::DaedalusScript script;\n    auto rd = zenkit::Read::from(argv[1]);\n    script.load(rd.get());\n\n    // Create a VM from the script\n    zenkit::DaedalusVm vm {std::move(script)};\n\n    // Register default script classes. Their implementation can be found in `zenkit/addon/daedalus.hh`. You are able\n    // to define your own classes through DaedalusScript::register_member if your use-case requires it.\n    // Generally, registering class definitions is required for scripts to work correctly.\n    zenkit::register_all_script_classes(vm);\n\n    // Register a catch-all callback for all calls to un-registered external functions. ZenKit will handle all required\n    // internal VM state as required so as to not corrupt the stack.\n    //\n    // If you need to restore custom VM state when external calls fail (such as setting a global variable or returning\n    // a custom value), you can use the unmanaged `DaedalusVm::register_default_external_custom` which leaves VM state\n    // fixing up to you. This not not recommended, however, and you should only use it when its absolutely required.\n    // Prefer actually implementing externals to messing with internal VM state.\n    vm.register_default_external([](zenkit::DaedalusSymbol const&amp; sym) { //\n        std::cout &lt;&lt; \"VM: No external for \" &lt;&lt; sym.name() &lt;&lt; \"\\n\";\n    });\n\n    // Register implementations for external functions. Parameters and return values are checked to match their\n    // definitions in the script at runtime and any mismatches between definition and implementation will cause runtime\n    // exceptions to be thrown.\n    vm.register_external(\"INTTOSTRING\", [](int i) { return std::to_string(i); });\n    vm.register_external(\"CONCATSTRINGS\", [](std::string_view a, std::string_view b) { //\n        return std::string {a} + std::string {b};\n    });\n\n    vm.register_external(\"AI_PRINTSCREEN\", [](std::string_view msg, int, int, std::string_view font, int) {\n        std::cout &lt;&lt; \"AI: print \\\"\" &lt;&lt; msg &lt;&lt; \"\\\" with font \\\"\" &lt;&lt; font &lt;&lt; \"\\\"\\n\";\n        return true;\n    });\n\n    // Initialize some instances. Essentially, each Daedalus instance needs to be initialized in C++ which causes the\n    // Daedalus code defining that instance to be executed. This needs to be done for every Daedalus instance BEFORE\n    // it can be used in a script. The fields of the Daedalus instances are synced, so any change in C++ will be\n    // reflected in Daedalus and vice-versa.\n    auto xardas = vm.init_instance&lt;zenkit::INpc&gt;(\"NONE_100_XARDAS\");\n    auto hero = vm.init_instance&lt;zenkit::INpc&gt;(\"PC_HERO\");\n\n    // You can also move the actual instance initialization call to a later point. This might be useful when you need\n    // you want to manually initialze the instance in C++. To do it, first allocate an instance, then initialize it,\n    // when needed, like this:\n    auto gold = vm.allocate_instance&lt;zenkit::IItem&gt;(\"ITMI_GOLD\");\n    vm.init_instance(gold, \"ITMI_GOLD\");\n\n    // External callbacks may also capture any local state, if needed.\n    vm.register_external(\"NPC_ISPLAYER\", [&amp;hero](std::shared_ptr&lt;zenkit::INpc&gt; npc) { //\n        return npc-&gt;id == hero-&gt;id;\n    });\n\n    // Some calls to VM function require a certain global context variable to be set. This applies mainly to NPC\n    // routine functions, state update functions (like item equip callbacks) and mision state query functions. The\n    // available global context variables are:\n    //\n    //  * `global_self` -&gt; var C_NPC self\n    //  * `global_other` -&gt; var C_NPC other\n    //  * `global_victim` -&gt; var C_NPC victim\n    //  * `global_hero` -&gt; var C_NPC hero\n    //  * `global_item` -&gt; var C_ITEM item\n    vm.global_item()-&gt;set_instance(gold);\n\n    // Call a function defined the script. The first parameter can either be the function's name or a the DaedalusSymbol\n    // for the function. The following parameters are passed to the Daedalus function as arguments. If set, the explicit\n    // template parameter indicates the return value. If it is not set, the return value (if any) is ignored.\n    //\n    // In this case, the Daedalus function definition is:\n    //\n    //     func int B_GIVEINVITEMS(var C_NPC giver, var C_NPC taker, var int itemInstance, var int amount)\n    auto ret = vm.call_function&lt;int&gt;(\"B_GIVEINVITEMS\", xardas, hero, static_cast&lt;int&gt;(gold-&gt;symbol_index()), 2);\n\n    std::cout &lt;&lt; \"\\nCalling B_GIVEINVITEMS(NONE_100_XARDAS, PC_HERO, \" &lt;&lt; gold-&gt;symbol_index()\n              &lt;&lt; \", 1) resulted in return of \" &lt;&lt; ret &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\nusing ZenKit.Daedalus;\n\nvar argv = Environment.GetCommandLineArgs();\nif (argv.Length != 2)\n{\n    Console.Error.WriteLine(\"Please provide a path to GOTHIC.DAT.\");\n    return -1;\n}\n\nLogger.SetDefault(LogLevel.Debug);\n\n// Load the script file into a VM\nvar vm = new DaedalusVm(argv[1]);\n\n// Register a catch-all callback for all calls to un-registered external functions. ZenKit will handle all required\n// internal VM state as required so as to not corrupt the stack.\nvm.RegisterExternalDefault((vm, sym) =&gt;\n{\n    //\n    Console.Error.WriteLine(\"VM: No external for \" + sym.Name);\n});\n\n// Register implementations for external functions. Parameters and return values are checked to match their\n// definitions in the script at runtime and any mismatches between definition and implementation will cause runtime\n// exceptions to be thrown.\nvm.RegisterExternal(\"INTTOSTRING\", (int i) =&gt; i.ToString());\nvm.RegisterExternal(\"CONCATSTRINGS\", (string a, string b) =&gt; a + b);\n\nvm.RegisterExternal(\"AI_PRINTSCREEN\", (string msg, int _, int _, string font, int _) =&gt;\n{\n    Console.WriteLine(\"AI: print \\\"\" + msg + \"\\\" with font \\\"\" + font + \"\\\"\");\n    return true;\n});\n\n// Initialize some instances. Essentially, each Daedalus instance needs to be initialized in C# which causes the\n// Daedalus code defining that instance to be executed. This needs to be done for every Daedalus instance BEFORE\n// it can be used in a script. The fields of the Daedalus instances are synced, so any change in C# will be\n// reflected in Daedalus and vice-versa.\nvar xardas = vm.InitInstance&lt;NpcInstance&gt;(\"NONE_100_XARDAS\");\nvar hero = vm.InitInstance&lt;NpcInstance&gt;(\"PC_HERO\");\n\n// You can also move the actual instance initialization call to a later point. This might be useful when you need\n// you want to manually initialize the instance in C#. To do it, first allocate an instance, then initialize it,\n// when needed, like this:\nvar gold = vm.AllocInstance&lt;ItemInstance&gt;(\"ITMI_GOLD\");\nvm.InitInstance(gold);\n\n// External callbacks may also capture any local state, if needed.\nvm.RegisterExternal(\"NPC_ISPLAYER\", (NpcInstance npc) =&gt; npc.Id == hero.Id);\n\n// Some calls to VM function require a certain global context variable to be set. This applies mainly to NPC\n// routine functions, state update functions (like item equip callbacks) and mission state query functions. The\n// available global context variables are:\n//\n//  * `GlobalSelf` -&gt; var C_NPC self\n//  * `GlobalOther` -&gt; var C_NPC other\n//  * `GlobalVictim` -&gt; var C_NPC victim\n//  * `GlobalHero` -&gt; var C_NPC hero\n//  * `GlobalItem` -&gt; var C_ITEM item\nvm.GlobalItem = gold;\n\n// Call a function defined the script. The first parameter can either be the function's name or the DaedalusSymbol\n// for the function. The following parameters are passed to the Daedalus function as arguments.\n//\n// In this case, the Daedalus function definition is:\n//\n//     func int B_GIVEINVITEMS(var C_NPC giver, var C_NPC taker, var int itemInstance, var int amount)\n//\n// Notice that you have to specify argument and return types manually. The first generic is the return type (which can\n// be omitted if the function returns void) and all other ones correspond to the function arguments.\nvar ret = vm.Call&lt;int, NpcInstance, NpcInstance, int, int&gt;(\"B_GIVEINVITEMS\", xardas, hero, gold.Index, 2);\n\nConsole.WriteLine(\n    \"Calling B_GIVEINVITEMS(NONE_100_XARDAS, PC_HERO, \" + gold.Index + \", 1) resulted in return of \" + ret);\nreturn 0;\n</code></pre> Example<pre><code>import sys\n\nfrom zenkit import DaedalusInstance\nfrom zenkit import DaedalusInstanceType\nfrom zenkit import DaedalusVm\nfrom zenkit import LogLevel\nfrom zenkit import set_logger_default\n\nif len(sys.argv) != 2:\n    print(\"Please provide a path to GOTHIC.DAT.\", file=sys.stderr)\n    sys.exit(-1)\n\nset_logger_default(LogLevel.DEBUG)\n\n# Load the script file into a VM\nvm = DaedalusVm.load(sys.argv[1])\n\n# Register a catch-all callback for all calls to un-registered external functions. ZenKit will handle all required\n# internal VM state as required so as to not corrupt the stack.\nvm.register_external_default(lambda sym: print(\"VM: No external for\", sym.name))\n\n# Register implementations for external functions. Parameters and return values are checked to match their\n# definitions in the script at runtime and any mismatches between definition and implementation will cause runtime\n# exceptions to be thrown. Notice that you have to specify the argument types after providing the callback function.\nvm.register_external(\"INTTOSTRING\", lambda i: str(i), int)\nvm.register_external(\"CONCATSTRINGS\", lambda a, b: a + b, str, str)\n\n\ndef _ai_printscreen(msg: str, _i0: int, _i1: int, font: str, _i2: int) -&gt; bool:\n    print('AI: print \"' + msg + '\" with font \"' + font + '\"')\n    return True\n\n\nvm.register_external(\"AI_PRINTSCREEN\", _ai_printscreen, str, int, int, str, int)\n\n# Initialize some instances. Essentially, each Daedalus instance needs to be initialized in Python which causes the\n# Daedalus code defining that instance to be executed. This needs to be done for every Daedalus instance BEFORE\n# it can be used in a script. The fields of the Daedalus instances are synced, so any change in Python will be\n# reflected in Daedalus and vice-versa.\nxardas = vm.init_instance(\"NONE_100_XARDAS\", DaedalusInstanceType.NPC)\nhero = vm.init_instance(\"PC_HERO\", DaedalusInstanceType.NPC)\n\n# You can also move the actual instance initialization call to a later point. This might be useful when you need\n# you want to manually initialize the instance in Python. To do it, first allocate an instance, then initialize it,\n# when needed, like this:\ngold = vm.alloc_instance(\"ITMI_GOLD\", DaedalusInstanceType.ITEM)\nvm.init_instance_direct(gold)\n\nvm.register_external(\"NPC_ISPLAYER\", lambda npc: npc.index == hero.index, DaedalusInstance)\n\n# Some calls to VM function require a certain global context variable to be set. This applies mainly to NPC\n# routine functions, state update functions (like item equip callbacks) and mission state query functions. The\n# available global context variables are:\n#\n#  * `global_self` -&gt; var C_NPC self\n#  * `global_other` -&gt; var C_NPC other\n#  * `global_victim` -&gt; var C_NPC victim\n#  * `global_hero` -&gt; var C_NPC hero\n#  * `global_item` -&gt; var C_ITEM item\nvm.global_item = gold\n\n# Call a function defined the script. The first parameter can either be the function's name or the DaedalusSymbol\n# for the function. The following parameters are passed to the Daedalus function as arguments.\n#\n# In this case, the Daedalus function definition is:\n#\n#   func int B_GIVEINVITEMS(var C_NPC giver, var C_NPC taker, var int itemInstance, var int amount)\n#\n# Notice that you have to specify the return type manually.\nret = vm.call(\"B_GIVEINVITEMS\", xardas, hero, gold.index, 2, rtype=int)\n\nprint(\"Calling B_GIVEINVITEMS(NONE_100_XARDAS, PC_HERO, \" + str(gold.index) + \", 1) resulted in return of \" + str(ret))\n</code></pre>"},{"location":"library/api/font/","title":"Fonts","text":"<p>ZenGin fonts are stored in a custom format which maps sections of an image to each character of the alphabet. To that end, each font contains 256 glyphs which correspond to the characters of the Windows-1252 character encoding. </p>"},{"location":"library/api/font/#overview","title":"Overview","text":"<p>Every font contains the name of the image containing the appearances of each glyph as well as a list of glyphs. Each glyph contains two coordinates which together form a rectangle around the glyph in the image. See Dealing with glyphs for more details</p>"},{"location":"library/api/font/#loading-fonts","title":"Loading Fonts","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/Font.h&gt;\n\nint main(int, char**) {\n    // Load from a file on disk:\n    ZkFont* font = ZkFont_loadPath(\"FONT_OLD_20.FNT\");\n    ZkFont_del(font);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Textures.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    font = ZkFont_loadVfs(vfs, \"FONT_OLD_20.FNT\");\n    ZkFont_del(font);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/Font.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::Font font {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"FONT_OLD_20.FNT\");\n    font.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Textures.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"FONT_OLD_20.FNT\")-&gt;open_read();\n    font.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar font = new Font(\"FONT_OLD_20.FNT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Textures.vdf\", VfsOverwriteBehavior.Older);\nfont = new Font(vfs, \"FONT_OLD_20.FNT\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.fnt.Font;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar fnt = Font.load(\"FONT_OLD_20.FNT\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Textures.vdf\", VfsOverwriteBehavior.OLDER)\nfnt = Font.load(vfs, \"FONT_OLD_20.FNT\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, Font\n\n# Load from a file on disk:\nfnt = Font.load(\"FONT_OLD_20.FNT\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Textures.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nfnt = Font.load(vfs.find(\"FONT_OLD_20.FNT\"))\n</code></pre>"},{"location":"library/api/font/#dealing-with-glyphs","title":"Dealing with glyphs","text":"<p>To render a font, first the font texture must be loaded. Its name is stored in the <code>Font::name</code> field. Each of the 256 glyphs of the font then contains two UV-coordinates denoting the top and bottom corner of a subsection of said texture. These UV-coordinates are between 0 and 1, so they have to be scaled to the actual width and height of the image by multiplying them. The subsection contains the actual image data for the glyph.</p> <p>Since each glyph is saved at the same index as the number representation of its character in Windows-1252, to get the glyph for the character <code>'a'</code>, one can just <code>font.glyphs[(int) 'a']</code> to get the correct glyph, assuming that <code>'a'</code> follows  Windows-1252 encoding.</p> CC++C#Java Example<pre><code>#include &lt;zenkit-capi/Font.h&gt;\n#include &lt;zenkit-capi/Texture.h&gt;\n\nint main(int, char**) {\n    ZkFont* font = ZkFont_loadPath(\"FONT_OLD_20.FNT\");\n\n    // The texture (1) must be loaded from some other location,\n    // most likely the `Textures.vdf` disk.\n    ZkTexture* tex = ZkTexture_loadPath(ZkFont_getName(font));\n\n    // The second parameter denotes the index of the glyph to get. There\n    // are usually 256 glyphs in every font but the number of glyphs can\n    // also be retrieved using `ZkFont_getGlyphCount()`.\n    ZkFontGlyph glyph = ZkFont_getGlyph(font, 0);\n\n    // To be able to determine the pixel offset of the glyph we\n    // need to retrieve the size of the font texture.\n    uint32_t texture_width = ZkTexture_getWidth(tex);\n    uint32_t texture_height = ZkTexture_getHeight(tex);\n\n    // Each UV coordinate contains a value from 0 to 1 which is\n    // mapped to the actual with and height of the image\n    int actual_top_x = glyph.topLeft.x * texture_width;\n    int actual_top_y = glyph.topLeft.y * texture_height;\n\n    int actual_bottom_x = glyph.bottomRight.x * texture_width;\n    int actual_bottom_y = glyph.bottomRight.y * texture_height;\n\n    // ...\n\n    ZkTexture_del(tex);\n    ZkFont_del(font);\n\n    return 0;\n}\n</code></pre> <ol> <li>See Textures for information about loading texture files.</li> </ol> Example<pre><code>#include &lt;zenkit/Font.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::Font font {};\n\n    auto r = zenkit::Read::from(\"FONT_OLD_20.FNT\");\n    font.load(r.get());\n\n    // The texture (1) must be loaded from some other location,\n    // most likely the `Textures.vdf` disk.\n    auto r_texture = zenkit::Read::from(font.name);\n    zenkit::Texture font_texture {};\n    font_texture.load(r_texture.get());\n\n    zenkit::FontGlyph glyph0 = font.glyphs[0];\n\n    // Each UV coordinate contains a value from 0 to 1 which is\n    // mapped to the actual with and height of the image\n    int actual_top_x = glyph0.uv[0].x * font_texture.width();\n    int actual_top_y = glyph0.uv[0].y * font_texture.height();\n\n    int actual_bottom_x = glyph0.uv[1].x * font_texture.width();\n    int actual_bottom_y = glyph0.uv[1].y * font_texture.height();\n\n    // ...\n\n    return 0;\n}\n</code></pre> <ol> <li>See Textures for information about loading texture files.</li> </ol> Example<pre><code>using ZenKit;\n\nvar font = new Font(\"FONT_OLD_20.FNT\");\n\n// The texture (1) must be loaded from some other location,\n// most likely the `Textures.vdf` disk.\nvar tex = new Texture(font.Name);\n\n// The second parameter denotes the index of the glyph to get. There\n// are usually 256 glyphs in every font but the number of glyphs can\n// also be retrieved using `Font.GlyphCount`. You can also access all\n// glyphs at once through `Font.Glyphs`.\nFontGlyph glyph = font.GetGlyph(0);\n\n// Each UV coordinate contains a value from 0 to 1 which is\n// mapped to the actual with and height of the image\nfloat actual_top_x = glyph.topLeft.X * tex.Width;\nfloat actual_top_y = glyph.topLeft.Y * tex.Height;\n\nfloat actual_bottom_x = glyph.bottomRight.X * tex.Width;\nfloat actual_bottom_y = glyph.bottomRight.Y * tex.Height;\n\n// ...\n</code></pre> <ol> <li>See Textures for information about loading texture files.</li> </ol> Example<pre><code>import dev.gothickit.zenkit.fnt.Font;\nimport dev.gothickit.zenkit.fnt.FontGlyph;\nimport dev.gothickit.zenkit.tex.Texture;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\nvar font = new Font(\"FONT_OLD_20.FNT\");\n\n// The texture (1) must be loaded from some other location,\n// most likely the `Textures.vdf` disk.\nvar tex = new Texture(font.getName());\n\n// The second parameter denotes the index of the glyph to get. There\n// are usually 256 glyphs in every font but the number of glyphs can\n// also be retrieved using `Font.GlyphCount`. You can also access all\n// glyphs at once through `Font.Glyphs`.\nFontGlyph glyph = font.getGlyph(0);\n\n// Each UV coordinate contains a value from 0 to 1 which is\n// mapped to the actual with and height of the image\nfloat actualTopX = glyph.topLeft.x * tex.getWidth();\nfloat actualTopY = glyph.topLeft.y * tex.getHeight();\n\nfloat actualBottomX = glyph.bottomRight.x * tex.getWidth();\nfloat actualBottomY = glyph.bottomRight.y * tex.getHeight();\n\n// ...\n</code></pre> <ol> <li>See Textures for information about loading texture files.</li> </ol>"},{"location":"library/api/mesh/","title":"Meshes","text":""},{"location":"library/api/mesh/#loading-meshes","title":"Loading Meshes","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/Mesh.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkMesh* mesh = ZkMesh_loadPath(\"MyMesh.MSH\");\n    ZkMesh_del(mesh);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Meshes.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mesh = ZkMesh_loadVfs(vfs, \"MyMesh.MSH\");\n    ZkMesh_del(mesh);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/Mesh.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::Mesh mesh {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyMesh.MSH\");\n    mesh.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Meshes.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyMesh.MSH\")-&gt;open_read();\n    mesh.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mesh = new Mesh(\"MyMesh.MSH\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Meshes.vdf\", VfsOverwriteBehavior.Older);\nmesh = new Mesh(vfs, \"MyMesh.MSH\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.msh.Mesh;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mesh = Mesh.load(\"MyMesh.MSH\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Meshes.vdf\", VfsOverwriteBehavior.OLDER)\nmesh = Mesh.load(vfs, \"MyMesh.MSH\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, Mesh\n\n# Load from a file on disk:\nmesh = Mesh.load(\"MyMesh.MSH\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Meshes.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmesh = Mesh.load(vfs.find(\"MyMesh.MSH\"))\n</code></pre>"},{"location":"library/api/model-animation/","title":"Model Animations","text":"<p>Model Animations form part of the animations system of the ZenGin they contain only animation samples, i.e. the position and orientation of each bone of the skeleton they're applied to. While there is space for additional data within animation files, it is mostly empty.</p>"},{"location":"library/api/model-animation/#overview","title":"Overview","text":"<p>The most important part of an animation are its samples. They are stored in <code>ModelAnimation::samples</code> after it has been parsed. Animation files themselves don't contain information about when to run animation or any other effects which should be applied during it. Those parts of the animation system are defined in Model Script files which should be loaded before animations. The <code>ModelAnimation::events</code> field will always be empty for that reason<sup>1</sup>.</p>"},{"location":"library/api/model-animation/#loading-animations","title":"Loading Animations","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/ModelAnimation.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkModelAnimation* man = ZkModelAnimation_loadPath(\"MyAnimation.MAN\");\n    ZkModelAnimation_del(man);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    man = ZkModelAnimation_loadVfs(vfs, \"MyAnimation.MAN\");\n    ZkModelAnimation_del(man);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/ModelAnimation.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::ModelAnimation man {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyAnimation.MAN\");\n    man.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyAnimation.MAN\")-&gt;open_read();\n    man.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar man = new ModelAnimation(\"MyAnimation.MAN\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nman = new ModelAnimation(vfs, \"MyAnimation.MAN\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.ani.ModelAnimation;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar man = ModelAnimation.load(\"MyAnimation.MAN\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nman = ModelAnimation.load(vfs, \"MyAnimation.MAN\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, ModelAnimation\n\n# Load from a file on disk:\nman = ModelAnimation.load(\"MyAnimation.MAN\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Anims.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nman = ModelAnimation.load(vfs.find(\"MyAnimation.MAN\"))\n</code></pre> <ol> <li> <p>This assertion is made after examining many animations from both Gothic and Gothic II   and finding no events being stored.\u00a0\u21a9</p> </li> </ol>"},{"location":"library/api/model-hierarchy/","title":"Model Hierarchies","text":""},{"location":"library/api/model-hierarchy/#loading-model-hierarchies","title":"Loading Model Hierarchies","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/ModelHierarchy.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkModelHierarchy* mdh = ZkModelHierarchy_loadPath(\"MySkeleton.MDH\");\n    ZkModelHierarchy_del(mdh);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mdh = ZkModelHierarchy_loadVfs(vfs, \"MySkeleton.MDH\");\n    ZkModelHierarchy_del(mdh);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/ModelHierarchy.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::ModelHierarchy mdh {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MySkeleton.MDH\");\n    mdh.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MySkeleton.MDH\")-&gt;open_read();\n    mdh.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mdh = new ModelHierarchy(\"MySkeleton.MDH\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nmdh = new ModelHierarchy(vfs, \"MySkeleton.MDH\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mdh.ModelHierarchy;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mdh = ModelHierarchy.load(\"MySkeleton.MDH\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nmdh = ModelHierarchy.load(vfs, \"MySkeleton.MDH\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, ModelHierarchy\n\n# Load from a file on disk:\nmdh = ModelHierarchy.load(\"MySkeleton.MDH\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Anims.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmdh = ModelHierarchy.load(vfs.find(\"MySkeleton.MDH\"))\n</code></pre>"},{"location":"library/api/model-mesh/","title":"Model Meshes","text":""},{"location":"library/api/model-mesh/#loading-model-meshes","title":"Loading Model Meshes","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/ModelMesh.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkModelMesh* mdm = ZkModelMesh_loadPath(\"MyMesh.MDM\");\n    ZkModelMesh_del(mdm);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mdm = ZkModelMesh_loadVfs(vfs, \"MyMesh.MDM\");\n    ZkModelMesh_del(mdm);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/ModelMesh.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::ModelMesh mesh {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyMesh.MDM\");\n    mesh.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyMesh.MDM\")-&gt;open_read();\n    mesh.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mesh = new ModelMesh(\"MyMesh.MDM\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nmesh = new ModelMesh(vfs, \"MyMesh.MDM\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mdm.ModelMesh;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mesh = ModelMesh.load(\"MyMesh.MDM\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nmesh = ModelMesh.load(vfs, \"MyMesh.MDM\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, ModelMesh\n\n# Load from a file on disk:\nmesh = ModelMesh.load(\"MyMesh.MDM\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Anims.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmesh = ModelMesh.load(vfs.find(\"MyMesh.MDM\"))\n</code></pre>"},{"location":"library/api/model-script/","title":"Model Scripts","text":""},{"location":"library/api/model-script/#loading-model-scripts","title":"Loading Model Scripts","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/ModelScript.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkModelScript* mds = ZkModelScript_loadPath(\"MyScript.MDS\");\n    ZkModelScript_del(mds);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mds = ZkModelScript_loadVfs(vfs, \"MyScript.MDS\");\n    ZkModelScript_del(mds);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/ModelScript.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::ModelScript mds {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyScript.MDS\");\n    mds.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyScript.MDS\")-&gt;open_read();\n    mds.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mds = new ModelScript(\"MyScript.MDS\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nmds = new ModelScript(vfs, \"MyScript.MDS\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mds.ModelScript;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mds = ModelScript.load(\"MyScript.MDS\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nmds = ModelScript.load(vfs, \"MyScript.MDS\");\n</code></pre> <p>Warning</p> <p>Not yet available.</p>"},{"location":"library/api/model/","title":"Models","text":"<p>Models are basic containers for a Model Hierarchy and a Model Mesh.</p>"},{"location":"library/api/model/#loading-models","title":"Loading Models","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/Model.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkModel* mesh = ZkModel_loadPath(\"MyMesh.MDL\");\n    ZkModel_del(mesh);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mesh = ZkModel_loadVfs(vfs, \"MyMesh.MDL\");\n    ZkModel_del(mesh);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/Model.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::Model mesh {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyMesh.MDL\");\n    mesh.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyMesh.MDL\")-&gt;open_read();\n    mesh.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mesh = new Model(\"MyMesh.MDL\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nmesh = new Model(vfs, \"MyMesh.MDL\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mdl.Model;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mesh = Model.load(\"MyMesh.MDL\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nmesh = Model.load(vfs, \"MyMesh.MDL\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, Model\n\n# Load from a file on disk:\nmesh = Model.load(\"MyMesh.MDL\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Anims.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmesh = Model.load(vfs.find(\"MyMesh.MDL\"))\n</code></pre>"},{"location":"library/api/morph-mesh/","title":"Morph Meshes","text":""},{"location":"library/api/morph-mesh/#loading-morph-meshes","title":"Loading Morph Meshes","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/MorphMesh.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkMorphMesh* mmb = ZkMorphMesh_loadPath(\"MyMesh.MMB\");\n    ZkMorphMesh_del(mmb);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Anims.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mmb = ZkMorphMesh_loadVfs(vfs, \"MyMesh.MMB\");\n    ZkMorphMesh_del(mmb);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/MorphMesh.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::MorphMesh mmb {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyMesh.MMB\");\n    mmb.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Anims.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyMesh.MMB\")-&gt;open_read();\n    mmb.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mmb = new MorphMesh(\"MyMesh.MMB\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Anims.vdf\", VfsOverwriteBehavior.Older);\nmmb = new MorphMesh(vfs, \"MyMesh.MMB\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mmb.MorphMesh;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mmb = MorphMesh.load(\"MyMesh.MMB\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Anims.vdf\", VfsOverwriteBehavior.OLDER)\nmmb = MorphMesh.load(vfs, \"MyMesh.MMB\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, MorphMesh\n\n# Load from a file on disk:\nmmb = MorphMesh.load(\"MyMesh.MMB\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Anims.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmmb = MorphMesh.load(vfs.find(\"MyMesh.MMB\"))\n</code></pre>"},{"location":"library/api/multi-resolution-mesh/","title":"Multi Resolution Meshes","text":""},{"location":"library/api/multi-resolution-mesh/#loading-multi-resolution-meshes","title":"Loading Multi Resolution Meshes","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/MultiResolutionMesh.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkMultiResolutionMesh* mrm = ZkMultiResolutionMesh_loadPath(\"MyMesh.MRM\");\n    ZkMultiResolutionMesh_del(mrm);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Meshes.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    mrm = ZkMultiResolutionMesh_loadVfs(vfs, \"MyMesh.MRM\");\n    ZkMultiResolutionMesh_del(mrm);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/MultiResolutionMesh.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::MultiResolutionMesh mrm {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyMesh.MRM\");\n    mrm.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Meshes.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyMesh.MRM\")-&gt;open_read();\n    mrm.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar mrm = new MultiResolutionMesh(\"MyMesh.MRM\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Meshes.vdf\", VfsOverwriteBehavior.Older);\nmrm = new MultiResolutionMesh(vfs, \"MyMesh.MRM\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.mrm.MultiResolutionMesh;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar mrm = MultiResolutionMesh.load(\"MyMesh.MRM\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Meshes.vdf\", VfsOverwriteBehavior.OLDER)\nmrm = MultiResolutionMesh.load(vfs, \"MyMesh.MRM\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, MultiResolutionMesh\n\n# Load from a file on disk:\nmrm = MultiResolutionMesh.load(\"MyMesh.MRM\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Meshes.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nmrm = MultiResolutionMesh.load(vfs.find(\"MyMesh.MRM\"))\n</code></pre>"},{"location":"library/api/save-game/","title":"Save Games","text":"<p>The save-game APIs exposed by ZenKit allow you to load, modify and save Gothic saves. As with all APIs, both Gothic 1 and Gothic 2 save-games are supported by this API. For more detailed information about the save-game format, consult the ZenGin Engine Documentation.</p>"},{"location":"library/api/save-game/#loading-save-games","title":"Loading save games","text":"<p>Loading a save game is relatively straightforward and example implementations can be found below. It should be noted however, that worlds loaded from save games do not contain any mesh information. They only contain the VObject-tree, the way-net and some additional metadata information related to the world state (such as the state of the sky controller). This means, that save games are loaded in addition to the original world and essentially just replace the way-net and VOb-tree of the base world.</p> CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/SaveGame.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n#include &lt;zenkit-capi/World.h&gt;\n\n#include &lt;stdio.h&gt;\n\nint main(int, const char** argv) {\n    // Initialize the save-game controller for use with Gothic 1\n    ZkSaveGame* sav = ZkSaveGame_new(ZkGameVersion_GOTHIC1);\n\n    // Try to load the save\n    if (!ZkSaveGame_load(sav, \"Gothic/Saves/savegame0/\")) {\n        fprintf(stderr, \"Failed to load the save-game!\\n\");\n        return -1;\n    }\n\n    // Load the world the player was in when creating the save ...\n    ZkWorld* world = ZkSaveGame_loadCurrentWorld(sav);\n    if (world == NULL) {\n        fprintf(stderr, \"No default world found!\\n\");\n        return -1;\n    }\n\n    // Since you own the world, don't forget to delete it when its no longer needed\n    ZkWorld_del(world);\n\n    // ... or load an arbitrary world from the save-game\n    world = ZkSaveGame_loadCurrentWorld(sav, \"DRAGONISLAND.ZEN\");\n    if (world == NULL) {\n        fprintf(stderr, \"DRAGONISLAND.ZEN not found!\\n\");\n        return -1;\n    }\n\n    // ...\n\n    ZkWorld_del(world);\n    ZkSaveGame_del(sav);\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/SaveGame.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/World.hh&gt;\n\n#include &lt;iostream&gt;\n\nint main(int, char const** argv) {\n    // Initialize the save-game controller for use with Gothic 1\n    zenkit::SaveGame sav {zenkit::GameVersion::GOTHIC1};\n\n    // Try to load the save (throws if it fails)\n    sav.load(\"Gothic/Saves/savegame0/\");\n\n    // Load the world the player was in when creating the save ...\n    std::shared_ptr&lt;World&gt; world = sav.load_world();\n    if (world == nullptr) {\n        std::cerr &lt;&lt; \"No default world found!\\n\";\n        return -1;\n    }\n\n    // ... or load an arbitrary world from the save-game\n    world = sav.load_world(\"DRAGONISLAND.ZEN\");\n    if (world == nullptr) {\n        std::cerr &lt;&lt; \"DRAGONISLAND.ZEN not found!\\n\";\n        return -1;\n    }\n\n    // ...\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Initialize the save-game controller for use with Gothic 1\nvar sav = new SaveGame(GameVersion.Gothic1);\n\n// Try to load the save \nif (!sav.Load(\"Gothic/Saves/savegame0/\")) {\n    Console.Error.WriteLine(\"Failed to load the save-game!\");\n    return;\n}\n\n// Load the world the player was in when creating the save ...\nWorld world = sav.LoadWorld();\nif (world != null) {\n    Console.Error.WriteLine(\"Failed to load the save-game!\");\n    return;\n}\n\n// ... or load an arbitrary world from the save-game\nworld = sav.LoadWorld(\"DRAGONISLAND.ZEN\");\nif (world == null) {\n    Console.Error.WriteLine(\"DRAGONISLAND.ZEN not found!\");\n    return;\n}\n\n// ...\n</code></pre> <p>Warning</p> <p>Not yet available.</p> <p>Warning</p> <p>Not yet available.</p>"},{"location":"library/api/save-game/#creating-or-modifying-save-games","title":"Creating or modifying save games","text":"<p>You can easily create a new save-game or modify an exising one using the save game APIs. To do so you need to have access to a world from somewhere (could also be another save game).</p> <p>Tip</p> <p>In addition to simply saving the world as shown below, you can also alter other save state such as script state, in-game information state, log entries and the save-game's name, thumbnail and other state through instance attributes of the <code>SaveGame</code>. Simply set these attributes to the values you want before calling <code>Save</code> to set them in the newly created save-game.</p> CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/SaveGame.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n#include &lt;zenkit-capi/World.h&gt;\n\n#include &lt;stdio.h&gt;\n\nint main(int, const char** argv) {\n    // Initialize the save-game controller for use with Gothic 1\n    ZkSaveGame* sav = ZkSaveGame_new(ZkGameVersion_GOTHIC1);\n\n    // Try to load an exising save-game (can be skipped if you already have access to a `ZkWorld` from elsewhere)\n    if (!ZkSaveGame_load(sav, \"Gothic/Saves/savegame0/\")) {\n        fprintf(stderr, \"Failed to load the save-game!\\n\");\n        return -1;\n    }\n\n    // Get a world from somewhere (does not necessarily have to be from an existing save-game)\n    ZkWorld* world = ZkSaveGame_loadCurrentWorld(sav);\n\n    // Create a new save-game which contains the given world's VOb-tree and way-net under the name \"WORLD\". If the\n    // given path already exists, all data within is deleted recursively, otherwise it and all its parent\n    // directories are created automatically.\n    // Since in this case, we're altering an existing save-game, all other worlds already present in the previous \n    // save are copied into the new location and the metadata (unless modified) is also copied.\n    ZkSaveGame_save(sav, \"Gothic/Saves/savegame1\", world, \"WORLD\");\n\n    ZkWorld_del(world);\n    ZkSaveGame_del(sav);\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/SaveGame.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/World.hh&gt;\n\n#include &lt;iostream&gt;\n\nint main(int, char const** argv) {\n    // Initialize the save-game controller for use with Gothic 1\n    zenkit::SaveGame sav {zenkit::GameVersion::GOTHIC1};\n\n    // Try to load an exising save-game (can be skipped if you already have access to a world from elsewhere)\n    sav.load(\"Gothic/Saves/savegame0/\");\n\n    // Get a world from somewhere (does not necessarily have to be from an existing save-game)\n    std::shared_ptr&lt;World&gt; world = sav.load_world();\n\n    // Create a new save-game which contains the given world's VOb-tree and way-net under the name \"WORLD\". If the\n    // given path already exists, all data within is deleted recursively, otherwise it and all its parent\n    // directories are created automatically.\n    // Since in this case, we're altering an existing save-game, all other worlds already present in the previous \n    // save are copied into the new location and the metadata (unless modified) is also copied.\n    sav.save(\"Gothic/Saves/savegame1\", *world, \"WORLD\");\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Initialize the save-game controller for use with Gothic 1\nvar sav = new SaveGame(GameVersion.Gothic1);\n\n// Try to load an exising save-game (can be skipped if you already have access to a world from elsewhere)\nif (!sav.Load(\"Gothic/Saves/savegame0/\")) {\n    Console.Error.WriteLine(\"Failed to load the save-game!\");\n    return;\n}\n\n// Get a world from somewhere (does not necessarily have to be from an existing save-game)\nWorld world = sav.LoadWorld();\n\n// Create a new save-game which contains the given world's VOb-tree and way-net under the name \"WORLD\". If the\n// given path already exists, all data within is deleted recursively, otherwise it and all its parent\n// directories are created automatically.\n// Since in this case, we're altering an existing save-game, all other worlds already present in the previous \n// save are copied into the new location and the metadata (unless modified) is also copied.\nsav.Save(\"Gothic/Saves/savegame1\", world, \"WORLD\");\n\n// ...\n</code></pre> <p>Warning</p> <p>Not yet available.</p> <p>Warning</p> <p>Not yet available.</p>"},{"location":"library/api/texture/","title":"Textures","text":""},{"location":"library/api/texture/#loading-textures","title":"Loading Textures","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/Texture.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkTexture* tex = ZkTexture_loadPath(\"MyTexture.TEX\");\n    ZkTexture_del(tex);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Textures.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    tex = ZkTexture_loadVfs(vfs, \"MyTexture.TEX\");\n    ZkTexture_del(tex);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/Texture.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::Texture tex {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"MyTexture.TEX\");\n    tex.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Textures.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"MyTexture.TEX\")-&gt;open_read();\n    tex.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar tex = new Texture(\"MyTexture.TEX\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Textures.vdf\", VfsOverwriteBehavior.Older);\ntex = new Texture(vfs, \"MyTexture.TEX\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.tex.Texture;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar tex = Texture.load(\"MyTexture.TEX\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Textures.vdf\", VfsOverwriteBehavior.OLDER)\ntex = Texture.load(vfs, \"MyTexture.TEX\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, Texture\n\n# Load from a file on disk:\ntex = Texture.load(\"MyTexture.TEX\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Textures.vdf\", clobber=VfsOverwriteBehavior.OLDER)\ntex = Texture.load(vfs.find(\"MyTexture.TEX\"))\n</code></pre>"},{"location":"library/api/virtual-file-system/","title":"Virtual File Systems","text":"<p>Virtual Disk Files (or <code>VDFs</code>) are container files like ZIP or, more accurately TAR. A VDF contains a directory structure with multiple files within it. Originally, Gothic and Gothic II used a library called PhysicsFS to load these files and read from them. While PhysicsFS now supports VDFs out-of-the-box, ZenKit implements its own, modern parser for them. This page provides a high-level overview of the VDF implementation in ZenKit.</p> <p>The original VDF implementation shipped with Gothic and Gothic II was not written by Piranha Bytes themselves but by a now defunct company called TRIACOM Software.</p>"},{"location":"library/api/virtual-file-system/#overview","title":"Overview","text":""},{"location":"library/api/virtual-file-system/#using-virtual-file-systems","title":"Using Virtual File Systems","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/Vfs.h&gt;\n\n#include &lt;stdio.h&gt;\n\nint main(int, char**) {\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Worlds.vdf\", ZkVfsOverwriteBehavior_OLDER);\n\n    ZkVfsNode* node = ZkVfs_findNode(vfs, \"OLDWORLD.ZEN\");\n    if (node == NULL) {\n        printf(\"Error: OLDWORLD.ZEN not found!\\n\");\n        return -1;\n    }\n\n    ZkRead* rd = ZkVfsNode_open(node);\n    // ...\n    ZkRead_del(rd);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/Vfs.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n\n#include &lt;iostream&gt;\n\nint main(int, char const** argv) {\n    zenkit::Vfs vfs {};\n    vfs.mount_disk(\"Worlds.vdf\");\n\n    zenkit::VfsNode* node = vfs.find(\"OLDWORLD.ZEN\");\n    if (node == nullptr) {\n        std::cerr &lt;&lt; \"Error: OLDWORLD.ZEN not found!\\n\";\n        return -1;\n    }\n\n    std::unique_ptr&lt;zenkit::Read&gt; r = node-&gt;open_read();\n\n    // ...\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\nvar vfs = new Vfs();\nvfs.MountDisk(\"Worlds.vdf\", VfsOverwriteBehavior.Older);\n\nVfsNode? node = vfs.Find(\"OLDWORLD.ZEN\");\n\nif (node == null)\n{\n    Console.Error.WriteLine(\"Error: OLDWORLD.ZEN not found!\");\n    return;\n}\n\nRead rd = node.Buffer;\n\n// ...\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsNode;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\nimport dev.gothickit.zenkit.Read;\n\nvar vfs = new Vfs();\nvfs.mountDisk(\"Worlds.vdf\", VfsOverwriteBehavior.OLDER);\n\nVfsNode node = vfs.find(\"OLDWORLD.ZEN\");\n\nif (node == null)\n{\n    System.err.println(\"Error: OLDWORLD.ZEN not found!\");\n    return;\n}\n\nRead rd = node.open();\n\n// ...\n</code></pre> Example<pre><code>from sys import stderr\nfrom zenkit import Vfs, VfsOverwriteBehavior\n\nvfs = Vfs()\nvfs.mount_disk(\"Worlds.vdf\", clobber=VfsOverwriteBehavior.OLDER)\n\nnode = vfs.find(\"OLDWORLD.ZEN\")\nif node is None:\n    print(\"Error: OLDWORLD.ZEN not found!\", file=stderr)\n    exit(-1)\n\nrd = node.open()\n\n# ...\n</code></pre>"},{"location":"library/api/world/","title":"Worlds","text":""},{"location":"library/api/world/#loading-worlds","title":"Loading Worlds","text":"CC++C#JavaPython Example<pre><code>#include &lt;zenkit-capi/World.h&gt;\n#include &lt;zenkit-capi/Vfs.h&gt;\n\nint main(int, const char** argv) {\n    // Load from a file on disk:\n    ZkWorld* world = ZkWorld_loadPath(\"OLDWORLD.ZEN\");\n    ZkWorld_del(world);\n\n    // ... or from a VFS:\n    ZkVfs* vfs = ZkVfs_new();\n    ZkVfs_mountDiskHost(vfs, \"Worlds.vdf\", ZkVfsOverwriteBehavior_OLDER);\n    world = ZkWorld_loadVfs(vfs, \"OLDWORLD.ZEN\");\n    ZkWorld_del(world);\n    ZkVfs_del(vfs);\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;zenkit/World.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n#include &lt;zenkit/Vfs.hh&gt;\n\nint main(int, char const** argv) {\n    zenkit::World world {};\n\n    // Load from a file on disk:\n    auto r = zenkit::Read::from(\"OLDWORLD.ZEN\");\n    world.load(r.get());\n\n    // ... or from a VFS\n    zenkit::Vfs vfs;\n    vfs.mount_disk(\"Worlds.vdf\", zenkit::VfsOverwriteBehavior::OLDER)\n\n    r = vfs-&gt;find(\"OLDWORLD.ZEN\")-&gt;open_read();\n    world.load(r.get());\n\n    return 0;\n}\n</code></pre> Example<pre><code>using ZenKit;\n\n// Load from a file on disk:\nvar world = new World(\"OLDWORLD.ZEN\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.MountDisk(\"Worlds.vdf\", VfsOverwriteBehavior.Older);\nworld = new World(vfs, \"OLDWORLD.ZEN\");\n</code></pre> Example<pre><code>import dev.gothickit.zenkit.world.World;\nimport dev.gothickit.zenkit.vfs.Vfs;\nimport dev.gothickit.zenkit.vfs.VfsOverwriteBehavior;\n\n// Load from a file on disk:\nvar world = World.load(\"OLDWORLD.ZEN\");\n\n// ... or from a VFS:\nvar vfs = new Vfs();\nvfs.mountDisk(\"Worlds.vdf\", VfsOverwriteBehavior.OLDER)\nworld = World.load(vfs, \"OLDWORLD.ZEN\");\n</code></pre> Example<pre><code>from zenkit import Vfs, VfsOverwriteBehavior, World\n\n# Load from a file on disk:\nworld = World.load(\"OLDWORLD.ZEN\")\n\n# ... or from a VFS:\nvfs = Vfs()\nvfs.mount_disk(\"Worlds.vdf\", clobber=VfsOverwriteBehavior.OLDER)\nworld = World.load(vfs.find(\"OLDWORLD.ZEN\"))\n</code></pre>"},{"location":"library/misc/v1.2-to-v1.3/","title":"Migration Guide v1.2 to v1.3","text":"<p>With the update to version 1.3, the library previously known as \"phoenix\" has bee re-branded to \"ZenKit\" to avoid confusion with PhoenixTales' Game of the same name. In this update, the library's API has changed significantly but a mostly backwards-compatible API has been kept intact.</p>"},{"location":"library/misc/v1.2-to-v1.3/#required-migrations","title":"Required Migrations","text":"<p>Danger</p> <p>These changes are required for your application to build with ZenKit.</p> <p>After updating ZenKit to v1.3, the first thing you have to do is update your CMake configuration. The <code>phoenix</code> target has been renamed to <code>zenkit</code>. Thus, you must now link against <code>zenkit</code> instead. The CMake variables for configuring ZenKit have also been renamed and a new one has been added:</p> <ul> <li><code>PHOENIX_BUILD_EXAMPLES</code> has been renamed to <code>ZK_BUILD_EXAMPLES</code></li> <li><code>PHOENIX_BUILD_TESTS</code> has been renamed to <code>ZK_BUILD_TESTS</code></li> <li><code>PHOENIX_BUILD_SHARED</code> has been renamed to <code>ZK_BUILD_SHARED</code></li> <li><code>PHOENIX_INSTALL</code> has been renamed to <code>ZK_ENABLE_INSTALL</code></li> <li><code>PHOENIX_DISABLE_SANITIZERS</code> has been removed and is replaced by <code>ZK_ENABLE_ASAN</code> which is <code>ON</code> by default.</li> <li><code>ZK_ENABLE_DEPRECATION</code> has been added and is <code>ON</code> by default. This is the recommended setting.</li> </ul> <p>After updating you configuration accordingly, assuming you have not used any already deprecated APIs from v1, your code should now build again. However, you will get a lot of deprecation warnings if you keep <code>ZK_ENABLE_DEPRECATION=ON</code>.</p>"},{"location":"library/misc/v1.2-to-v1.3/#replacing-phoenixvdf_file","title":"Replacing <code>phoenix::vdf_file</code>","text":"<p>The <code>phoenix::vdf_file</code> has been deprecated since v1.2 in favour of <code>phoenix::Vfs</code> and is removed in v1.3. Here's an example which shows how to migrate to the new implementation.</p> &lt;= v1.2&gt;= v1.3 C++<pre><code>phoenix::vdf_file anims = phoenix::vdf_file::open(\"Anims.vdf\");\nphoenix::vdf_file worlds = phoenix::vdf_file::open(\"Worlds.vdf\");\n\nphoenix::vdf_file root {\"\"};\nroot.merge(worlds, false);\nroot.merge(anims, false);\n\nphoenix::vdf_entry* world = root.find_entry(\"NewWorld.zen\");\nif (world == nullptr) {\n    throw std::runtime_error {\"NewWorld.zen not found!\"};\n}\n\nphoenix::buffer buf = world-&gt;open();\n\n// use `buf`\n</code></pre> C++<pre><code>phoenix::Vfs vfs {};\nvfs.mount_disk(\"Anims.vdf\", phoenix::VfsOverwriteBehavior::OLDER);\nvfs.mount_disk(\"Worlds.vdf\", phoenix::VfsOverwriteBehavior::OLDER);\n\nphoenix::VfsNode* world = vfs.find(\"NewWorld.zen\");\nif (world == nullptr) {\n    throw std::runtime_error {\"NewWorld.zen not found!\"};\n}\n\nphoenix::buffer buf = world-&gt;open();\n\n// use `buf`\n</code></pre>"},{"location":"library/misc/v1.2-to-v1.3/#replacing-other-apis","title":"Replacing other APIs","text":"<p>The following APIs have been deprecated v1.2 and removed in v1.3:</p> <ul> <li><code>way_net::waypoint(std::string const&amp;)</code> - Directly access the <code>waypoints</code> member instead</li> <li><code>archive_reader::read_raw_bytes()</code> - Replaced by <code>archive_reader::read_raw_bytes(size_t)</code></li> <li><code>model_script::parse_binary(buffer)</code> - Replaced by <code>model_script::parse(buffer)</code></li> <li><code>vobs::camera_lock_mode</code> - Renamed to <code>sprite_alignment</code></li> <li><code>vob.camera_alignment</code> - Renamed to <code>vob.sprite_camera_facing_mode</code></li> </ul>"},{"location":"library/misc/v1.2-to-v1.3/#performance-critical-migrations","title":"Performance Critical Migrations","text":"<p>Warning</p> <p>These changes are heavily encouraged since not migrating will have a sizable impact on the performance of ZenKit.</p> <p>While your app will compile after applying the required migrations, you will notice a performance dip, especially in debug builds. This is because the central <code>phoenix::buffer</code>-API has been deprecated in favour of <code>zenkit::Read</code> which is faster and simpler when used correctly.</p> <p>To remedy this, all you need to do is use the <code>.load(Read*)</code> API instead of the <code>::parse(buffer)</code> API when loading in any ZenKit asset. Here's an example which shows the differences between both versions when loading animations.</p> &lt; v1.3&gt;= v1.3 Example<pre><code>#include &lt;phoenix/Animation.hh&gt;\n\nint main(int, char const** argv) {\n    phoenix::buffer buf = phoenix::buffer::mmap(\"MyAnimation.MAN\");\n    phoenix::animation ani = phoenix::animation::parse(buf);\n\n    // ...\n\n    return 0;\n}\n</code></pre> Example<pre><code>#include &lt;phoenix/animation.hh&gt;\n#include &lt;zenkit/Stream.hh&gt;\n\nint main(int, char const** argv) {\n    phoenix::animation ani {};\n\n    auto r = zenkit::Read::from(\"MyAnimation.MAN\");\n    ani.load(r.get());\n\n    // ...\n\n    return 0;\n}\n</code></pre> <p><code>zenkit::Read::from</code> has many different overloads from reading from memory buffers to reading from C++'s <code>istream</code>. Just choose the one you need. When reading from raw files, the overload taking <code>std::filesystem::path</code> is recommended since it performs memory-mapped I/O in the background.</p> <p>When loading a file from a <code>zenkit::Vfs</code>, you can simply use the <code>VfsNode.open_read</code> API instead of the old <code>VfsNode.open</code> API. Most of this should be self-explanatory.</p>"},{"location":"library/misc/v1.2-to-v1.3/#recommended-migrations","title":"Recommended Migrations","text":"<p>Note</p> <p>These changes are recommended but not required. They concern changing class, struct and enum names to fit the new APIs. It is recommended to apply these to your code gradually.</p> <p>After these migrations, one thing remains: switching to the redesigned API. Generally this just means changing your includes and using the new names for classes, structs and enums. All of these have been renamed from the old <code>snake_case</code> naming convention to the more easily understandable <code>PascalCase</code> convention and some of their names have been polished up a bit. This is what you should do:</p> <ol> <li>Change your includes: generally, just change <code>#include &lt;phoenix/$include.hh&gt;</code> to <code>#include &lt;zenkit/$include.hh&gt;</code> while    changing <code>$include</code> from <code>snake_case</code> to <code>PascalCase</code>. Some files have been renamed completely:<ul> <li><code>animation.hh</code> is now <code>ModelAnimation.hh</code></li> <li><code>math.hh</code> is now <code>Boxes.hh</code></li> <li><code>messages.hh</code> is now <code>CutsceneLibrary.hh</code></li> <li><code>script.hh</code> is now <code>DaedalusScript.hh</code></li> <li><code>vm.hh</code> is now <code>DaedalusVm.hh</code></li> <li><code>phoenix.hh</code> has been split into <code>Error.hh</code>, <code>Date.hh</code>, <code>Logger.hh</code> and <code>Misc.hh</code></li> <li><code>proto_mesh.hh</code> is now <code>MultiResolutionMesh.hh</code></li> <li><code>vobs/vob.hh</code> is now <code>vobs/VirtualObject.hh</code></li> <li><code>vobs/mob.hh</code> is now <code>vobs/MovableObject.hh</code></li> <li><code>ext/daedalus_class.hh</code> is now <code>addon/daedalus.hh</code></li> <li><code>ext/dds_convert.hh</code> is now <code>addon/texcvt.hh</code></li> </ul> </li> <li>Changes usages of the <code>phoenix</code> namespace to the <code>zenkit</code> namespace (i.e. <code>phoenix::Vfs</code> becomes <code>zenkit::Vfs</code>.</li> <li>Change the names of all classes, structs and enums imported from ZenKit from <code>snake_case</code> to <code>PascalCase</code> except    for in the following cases:<ul> <li><code>animation</code> is now <code>ModelAnimation</code></li> <li><code>bounding_box</code> is now <code>AxisAlignedBoundingBox</code></li> <li><code>obb</code> is now <code>OrientedBoundingBox</code></li> <li><code>messages</code> is now <code>CutsceneLibrary</code></li> <li><code>message_block</code> is now <code>CutsceneBlock</code></li> <li><code>atomic_message</code> is now <code>CutsceneMessage</code></li> <li><code>script</code> is now <code>DaedalusScript</code> (other related classes and structs have been prefixed with <code>Daedalus</code> too)</li> <li><code>vm</code> is now <code>DaedalusVm</code> (other related classes and structs have been prefixed with <code>Daedalus</code> too)</li> <li>All classes in <code>phoenix::vobs</code> have been moved into the <code>zenkit</code> namespace and prefixed with a <code>V</code> (e.g.    <code>phoenix::vobs::Light</code> becomes <code>zenkit::VLight</code>)</li> </ul> </li> <li>Change all enum member accesses from their <code>snake_case</code> names to the new <code>SCREAMING_SNAKE_CASE</code> names.</li> </ol> <p>The deprecation warnings from your compiler should tell you these changes too. Alternatively, you can look into the old header files in <code>include/phoenix/</code> to see the type aliases which have been put in place.</p> <p>Generally these changes may be applied gradually but note that the old API will be removed in v2 at the latest, so switching to the new names is highly recommended.</p>"}]}